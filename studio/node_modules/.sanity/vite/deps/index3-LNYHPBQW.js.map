{
  "version": 3,
  "sources": ["../../../.pnpm/sanity@4.10.3_@emotion+is-prop-valid@1.2.2_@portabletext+sanity-bridge@1.1.14_@sanity+s_1530995b6ef1e06dc3fd05b18f3d2070/node_modules/sanity/src/structure/structureResolvers/PaneResolutionError.ts", "../../../.pnpm/sanity@4.10.3_@emotion+is-prop-valid@1.2.2_@portabletext+sanity-bridge@1.1.14_@sanity+s_1530995b6ef1e06dc3fd05b18f3d2070/node_modules/sanity/src/structure/structureResolvers/assignId.ts", "../../../.pnpm/sanity@4.10.3_@emotion+is-prop-valid@1.2.2_@portabletext+sanity-bridge@1.1.14_@sanity+s_1530995b6ef1e06dc3fd05b18f3d2070/node_modules/sanity/src/structure/structureResolvers/createPaneResolver.ts", "../../../.pnpm/sanity@4.10.3_@emotion+is-prop-valid@1.2.2_@portabletext+sanity-bridge@1.1.14_@sanity+s_1530995b6ef1e06dc3fd05b18f3d2070/node_modules/sanity/src/structure/structureResolvers/memoBind.ts", "../../../.pnpm/sanity@4.10.3_@emotion+is-prop-valid@1.2.2_@portabletext+sanity-bridge@1.1.14_@sanity+s_1530995b6ef1e06dc3fd05b18f3d2070/node_modules/sanity/src/structure/structureResolvers/resolveIntent.ts", "../../../.pnpm/sanity@4.10.3_@emotion+is-prop-valid@1.2.2_@portabletext+sanity-bridge@1.1.14_@sanity+s_1530995b6ef1e06dc3fd05b18f3d2070/node_modules/sanity/src/structure/structureResolvers/createResolvedPaneNodeStream.ts", "../../../.pnpm/sanity@4.10.3_@emotion+is-prop-valid@1.2.2_@portabletext+sanity-bridge@1.1.14_@sanity+s_1530995b6ef1e06dc3fd05b18f3d2070/node_modules/sanity/src/structure/structureResolvers/useResolvedPanes.ts", "../../../.pnpm/sanity@4.10.3_@emotion+is-prop-valid@1.2.2_@portabletext+sanity-bridge@1.1.14_@sanity+s_1530995b6ef1e06dc3fd05b18f3d2070/node_modules/sanity/src/structure/components/structureTool/intentResolver/utils.ts", "../../../.pnpm/sanity@4.10.3_@emotion+is-prop-valid@1.2.2_@portabletext+sanity-bridge@1.1.14_@sanity+s_1530995b6ef1e06dc3fd05b18f3d2070/node_modules/sanity/src/structure/components/structureTool/intentResolver/IntentResolver.tsx", "../../../.pnpm/sanity@4.10.3_@emotion+is-prop-valid@1.2.2_@portabletext+sanity-bridge@1.1.14_@sanity+s_1530995b6ef1e06dc3fd05b18f3d2070/node_modules/sanity/src/structure/components/structureTool/StructureError.tsx", "../../../.pnpm/sanity@4.10.3_@emotion+is-prop-valid@1.2.2_@portabletext+sanity-bridge@1.1.14_@sanity+s_1530995b6ef1e06dc3fd05b18f3d2070/node_modules/sanity/src/structure/components/structureTool/NoDocumentTypesScreen.tsx", "../../../.pnpm/sanity@4.10.3_@emotion+is-prop-valid@1.2.2_@portabletext+sanity-bridge@1.1.14_@sanity+s_1530995b6ef1e06dc3fd05b18f3d2070/node_modules/sanity/src/structure/components/structureTool/StructureTitle.tsx", "../../../.pnpm/sanity@4.10.3_@emotion+is-prop-valid@1.2.2_@portabletext+sanity-bridge@1.1.14_@sanity+s_1530995b6ef1e06dc3fd05b18f3d2070/node_modules/sanity/src/structure/components/structureTool/StructureTool.tsx", "../../../.pnpm/sanity@4.10.3_@emotion+is-prop-valid@1.2.2_@portabletext+sanity-bridge@1.1.14_@sanity+s_1530995b6ef1e06dc3fd05b18f3d2070/node_modules/sanity/src/structure/components/structureTool/StructureToolBoundary.tsx"],
  "sourcesContent": ["import {type RouterPaneSiblingContext} from '../types'\n\nexport interface PaneResolutionErrorOptions {\n  message: string\n  context?: RouterPaneSiblingContext\n  helpId?: string\n  cause?: Error\n}\n\n/**\n * An error thrown during pane resolving. This error is meant to be bubbled up\n * through react and handled in an error boundary. It includes a `cause`\n * property which is the original error caught\n */\nexport class PaneResolutionError extends Error {\n  cause: Error | undefined\n  context: RouterPaneSiblingContext | undefined\n  helpId: string | undefined\n\n  constructor({message, context, helpId, cause}: PaneResolutionErrorOptions) {\n    super(message)\n    this.name = 'PaneResolutionError'\n    this.context = context\n    this.helpId = helpId\n    this.cause = cause\n  }\n}\n", "import {nanoid} from 'nanoid'\n\n// `WeakMap`s require the first type param to extend `object`\nconst randomIdCache = new WeakMap<object, string>()\n\n/**\n * given an object, this function randomly generates an ID and returns it. this\n * result is then saved in a WeakMap so subsequent requests for the same object\n * will receive the same ID\n */\nexport function assignId(obj: object): string {\n  const cachedValue = randomIdCache.get(obj)\n  if (cachedValue) return cachedValue\n\n  const id = nanoid()\n  randomIdCache.set(obj, id)\n  return id\n}\n", "import {from, isObservable, type Observable, of as observableOf} from 'rxjs'\nimport {publishReplay, refCount, switchMap} from 'rxjs/operators'\nimport {isRecord} from 'sanity'\n\nimport {type PaneNode, type RouterPaneSiblingContext, type UnresolvedPaneNode} from '../types'\nimport {PaneResolutionError} from './PaneResolutionError'\n\ninterface Serializable {\n  serialize: (...args: never[]) => unknown\n}\n\nconst isPromise = (thing: any): thing is PromiseLike<unknown> => {\n  return !!thing && typeof thing?.then === 'function'\n}\nconst isSerializable = (thing: unknown): thing is Serializable => {\n  if (!isRecord(thing)) return false\n  return typeof thing.serialize === 'function'\n}\n\n/**\n * The signature of the function used to take an `UnresolvedPaneNode` and turn\n * it into an `Observable<PaneNode>`.\n */\nexport type PaneResolver = (\n  unresolvedPane: UnresolvedPaneNode | undefined,\n  context: RouterPaneSiblingContext,\n  flatIndex: number,\n) => Observable<PaneNode>\n\nexport type PaneResolverMiddleware = (paneResolveFn: PaneResolver) => PaneResolver\n\nconst rethrowWithPaneResolutionErrors: PaneResolverMiddleware =\n  (next) => (unresolvedPane, context, flatIndex) => {\n    try {\n      return next(unresolvedPane, context, flatIndex)\n    } catch (e) {\n      // re-throw errors that are already `PaneResolutionError`s\n      if (e instanceof PaneResolutionError) {\n        throw e\n      }\n\n      // anything else, wrap with `PaneResolutionError` and set the underlying\n      // error as a the `cause`\n      throw new PaneResolutionError({\n        message: typeof e?.message === 'string' ? e.message : '',\n        context,\n        cause: e,\n      })\n    }\n  }\n\nconst wrapWithPublishReplay: PaneResolverMiddleware =\n  (next) =>\n  (...args) => {\n    return next(...args).pipe(\n      // need to add publishReplay + refCount to ensure new subscribers always\n      // get an emission. without this, memoized observables may get stuck\n      // waiting for their first emissions resulting in a loading pane\n      publishReplay(1),\n      refCount(),\n    )\n  }\n\nexport function createPaneResolver(middleware: PaneResolverMiddleware): PaneResolver {\n  // note: this API includes a middleware/wrapper function because the function\n  // is recursive. we want to call the wrapped version of the function always\n  // (even inside of nested calls) so the identifier invoked for the recursion\n  // should be the wrapped version\n  const resolvePane = rethrowWithPaneResolutionErrors(\n    wrapWithPublishReplay(\n      middleware((unresolvedPane, context, flatIndex) => {\n        if (!unresolvedPane) {\n          throw new PaneResolutionError({\n            message: 'Pane returned no child',\n            context,\n            helpId: 'structure-item-returned-no-child',\n          })\n        }\n\n        if (isPromise(unresolvedPane) || isObservable(unresolvedPane)) {\n          return from(unresolvedPane).pipe(\n            switchMap((result) => resolvePane(result, context, flatIndex)),\n          )\n        }\n\n        if (isSerializable(unresolvedPane)) {\n          return resolvePane(unresolvedPane.serialize(context), context, flatIndex)\n        }\n\n        if (typeof unresolvedPane === 'function') {\n          return resolvePane(unresolvedPane(context.id, context), context, flatIndex)\n        }\n\n        return observableOf(unresolvedPane)\n      }),\n    ),\n  )\n\n  return resolvePane\n}\n", "/* eslint-disable @typescript-eslint/no-unsafe-function-type */\n\n// `WeakMap`s require the first type param to extend `object`\nconst bindCache = new WeakMap<object, Map<string, Function>>()\n\n/**\n * An alternative to `obj.method.bind(obj)` that utilizes a weakmap to return\n * the same memory reference for sequent binds.\n */\nexport function memoBind<\n  T extends object,\n  K extends keyof {[P in keyof T]: T[P] extends Function ? T[P] : never},\n>(obj: T, methodKey: K): T[K]\nexport function memoBind(obj: Record<string, unknown>, methodKey: string): Function {\n  const boundMethods = bindCache.get(obj) || new Map<string, Function>()\n  if (boundMethods) {\n    const bound = boundMethods.get(methodKey)\n    if (bound) return bound\n  }\n\n  const method = obj[methodKey]\n\n  if (typeof method !== 'function') {\n    throw new Error(\n      `Expected property \\`${methodKey}\\` to be a function but got ${typeof method} instead.`,\n    )\n  }\n\n  const bound = method.bind(obj)\n  boundMethods.set(methodKey, bound)\n  bindCache.set(obj, boundMethods)\n\n  return bound\n}\n", "import {omit} from 'lodash'\nimport {firstValueFrom, type Observable} from 'rxjs'\n\nimport {type StructureContext} from '../structureBuilder'\nimport {\n  type PaneNode,\n  type RouterPanes,\n  type RouterPaneSiblingContext,\n  type UnresolvedPaneNode,\n} from '../types'\nimport {assignId} from './assignId'\nimport {createPaneResolver, type PaneResolverMiddleware} from './createPaneResolver'\nimport {memoBind} from './memoBind'\n\ninterface TraverseOptions {\n  unresolvedPane: UnresolvedPaneNode | undefined\n  intent: string\n  params: {type: string; id: string; [key: string]: string | undefined}\n  payload: unknown\n  parent: PaneNode | null\n  path: string[]\n  currentId: string\n  flatIndex: number\n  levelIndex: number\n  structureContext: StructureContext\n}\n\nexport interface ResolveIntentOptions {\n  rootPaneNode?: UnresolvedPaneNode\n  intent: string\n  params: {type: string; id: string; [key: string]: string | undefined}\n  payload: unknown\n  structureContext: StructureContext\n}\n\n/**\n * Resolves an intent request using breadth first search. If a match is not\n * found, the intent will resolve to the fallback editor.\n *\n * A match is found if:\n * 1. the `PaneNode` is of type `document` and the its ID matches the intent ID\n * 2. the `PaneNode` is of type `documentList` and the `schemaTypeName` matches\n * 3. the `PaneNode`'s `canHandleIntent` method returns true\n *\n * If a `PaneNode` of type `list` is found, it will be searched for a match.\n *\n * @see PaneNode\n */\nexport async function resolveIntent(options: ResolveIntentOptions): Promise<RouterPanes> {\n  const resolvedPaneCache = new Map<string, Observable<PaneNode>>()\n\n  // this is a simple version of the memoizer in `createResolvedPaneNodeStream`\n  const memoize: PaneResolverMiddleware = (nextFn) => (unresolvedPane, context, flatIndex) => {\n    const key = unresolvedPane && `${assignId(unresolvedPane)}-${context.path.join('__')}`\n    const cachedResolvedPane = key && resolvedPaneCache.get(key)\n    if (cachedResolvedPane) return cachedResolvedPane\n\n    const result = nextFn(unresolvedPane, context, flatIndex)\n    if (key) resolvedPaneCache.set(key, result)\n    return result\n  }\n\n  const resolvePane = createPaneResolver(memoize)\n\n  const fallbackEditorPanes: RouterPanes = [\n    [\n      {\n        id: `__edit__${options.params.id}`,\n        params: {...omit(options.params, ['id']), type: options.params.type},\n        payload: options.payload,\n      },\n    ],\n  ]\n\n  async function traverse({\n    currentId,\n    flatIndex,\n    intent,\n    params,\n    parent,\n    path,\n    payload,\n    unresolvedPane,\n    levelIndex,\n    structureContext,\n  }: TraverseOptions): Promise<\n    Array<{panes: RouterPanes; depthIndex: number; levelIndex: number}>\n  > {\n    if (!unresolvedPane) return []\n\n    const {id: targetId, type: schemaTypeName, ...otherParams} = params\n    const context: RouterPaneSiblingContext = {\n      id: currentId,\n      splitIndex: 0,\n      parent,\n      path,\n      index: flatIndex,\n      params: {},\n      payload: undefined,\n      structureContext,\n    }\n    const resolvedPane = await firstValueFrom(resolvePane(unresolvedPane, context, flatIndex))\n\n    // if the resolved pane is a document pane and the pane's ID matches then\n    // resolve the intent to the current path\n    if (resolvedPane.type === 'document' && resolvedPane.id === targetId) {\n      return [\n        {\n          panes: [\n            ...path.slice(0, path.length - 1).map((i) => [{id: i}]),\n            [{id: targetId, params: otherParams, payload}],\n          ],\n          depthIndex: path.length,\n          levelIndex,\n        },\n      ]\n    }\n\n    // NOTE: if you update this logic, please also update the similar handler in\n    // `getIntentState.ts`\n    if (\n      // if the resolve pane's `canHandleIntent` returns true, then resolve\n      resolvedPane.canHandleIntent?.(intent, params, {\n        pane: resolvedPane,\n        index: flatIndex,\n      }) ||\n      // if the pane's `canHandleIntent` did not return true, then match against\n      // this default case. we will resolve the intent if:\n      (resolvedPane.type === 'documentList' &&\n        // 1. the schema type matches (this required for the document to render)\n        resolvedPane.schemaTypeName === schemaTypeName &&\n        // 2. the filter is the default filter.\n        //\n        // NOTE: this case is to prevent false positive matches where the user\n        // has configured a more specific filter for a particular type. In that\n        // case, the user can implement their own `canHandleIntent` function\n        resolvedPane.options.filter === '_type == $type')\n    ) {\n      return [\n        {\n          panes: [\n            // map the current path to router panes\n            ...path.map((id) => [{id}]),\n            // then augment with the intents IDs and params\n            [{id: params.id, params: otherParams, payload}],\n          ],\n          depthIndex: path.length,\n          levelIndex,\n        },\n      ]\n    }\n\n    if (resolvedPane.type === 'list' && resolvedPane.child && resolvedPane.items) {\n      return (\n        await Promise.all(\n          resolvedPane.items.map((item, nextLevelIndex) => {\n            if (item.type === 'divider') return Promise.resolve([])\n\n            return traverse({\n              currentId: item._id || item.id,\n              flatIndex: flatIndex + 1,\n              intent,\n              params,\n              parent: resolvedPane,\n              path: [...path, item.id],\n              payload,\n              unresolvedPane:\n                typeof resolvedPane.child === 'function'\n                  ? memoBind(resolvedPane, 'child')\n                  : resolvedPane.child,\n              levelIndex: nextLevelIndex,\n              structureContext,\n            })\n          }),\n        )\n      ).flat()\n    }\n\n    return []\n  }\n\n  const matchingPanes = await traverse({\n    currentId: 'root',\n    flatIndex: 0,\n    levelIndex: 0,\n    intent: options.intent,\n    params: options.params,\n    parent: null,\n    path: [],\n    payload: options.payload,\n    unresolvedPane: options.rootPaneNode,\n    structureContext: options.structureContext,\n  })\n\n  const closestPaneToRoot = matchingPanes.sort((a, b) => {\n    // break ties with the level index\n    if (a.depthIndex === b.depthIndex) return a.levelIndex - b.levelIndex\n    return a.depthIndex - b.depthIndex\n  })[0]\n\n  if (closestPaneToRoot) {\n    return closestPaneToRoot.panes\n  }\n\n  return fallbackEditorPanes\n}\n", "import {generateHelpUrl} from '@sanity/generate-help-url'\nimport {isEqual} from 'lodash'\nimport {concat, NEVER, type Observable, of as observableOf} from 'rxjs'\nimport {distinctUntilChanged, map, pairwise, scan, startWith, switchMap} from 'rxjs/operators'\n\nimport {type StructureContext} from '../structureBuilder'\nimport {\n  type DocumentPaneNode,\n  type PaneNode,\n  type PaneNodeResolver,\n  type RouterPanes,\n  type RouterPaneSibling,\n  type RouterPaneSiblingContext,\n  type UnresolvedPaneNode,\n} from '../types'\nimport {assignId} from './assignId'\nimport {\n  createPaneResolver,\n  type PaneResolver,\n  type PaneResolverMiddleware,\n} from './createPaneResolver'\nimport {memoBind} from './memoBind'\nimport {PaneResolutionError} from './PaneResolutionError'\n\n/**\n * the fallback editor child that is implicitly inserted into the structure tree\n * if the id starts with `__edit__`\n */\nconst fallbackEditorChild: PaneNodeResolver = (nodeId, context): DocumentPaneNode => {\n  const id = nodeId.replace(/^__edit__/, '')\n  const {\n    params,\n    payload,\n    structureContext: {resolveDocumentNode},\n  } = context\n  const {type, template} = params\n\n  if (!type) {\n    throw new Error(\n      `Document type for document with ID ${id} was not provided in the router params.`,\n    )\n  }\n\n  let defaultDocumentBuilder = resolveDocumentNode({schemaType: type, documentId: id}).id('editor')\n\n  if (template) {\n    defaultDocumentBuilder = defaultDocumentBuilder.initialValueTemplate(\n      template,\n      payload as {[key: string]: unknown},\n    )\n  }\n\n  return defaultDocumentBuilder.serialize() as DocumentPaneNode\n}\n\n/**\n * takes in a `RouterPaneSiblingContext` and returns a normalized string\n * representation that can be used for comparisons\n */\nfunction hashContext(context: RouterPaneSiblingContext): string {\n  return `contextHash(${JSON.stringify({\n    id: context.id,\n    parentId: parent && assignId(parent),\n    path: context.path,\n    index: context.index,\n    splitIndex: context.splitIndex,\n    serializeOptionsIndex: context.serializeOptions?.index,\n    serializeOptionsPath: context.serializeOptions?.path,\n  })})`\n}\n\n/**\n * takes in `ResolvedPaneMeta` and returns a normalized string representation\n * that can be used for comparisons\n */\nconst hashResolvedPaneMeta = (meta: ResolvedPaneMeta): string => {\n  const normalized = {\n    type: meta.type,\n    id: meta.routerPaneSibling.id,\n    params: meta.routerPaneSibling.params || {},\n    payload: meta.routerPaneSibling.payload || null,\n    flatIndex: meta.flatIndex,\n    groupIndex: meta.groupIndex,\n    siblingIndex: meta.siblingIndex,\n    path: meta.path,\n    paneNode: meta.type === 'resolvedMeta' ? assignId(meta.paneNode) : null,\n  }\n\n  return `metaHash(${JSON.stringify(normalized)})`\n}\n\n/**\n * Represents one flattened \"router pane\", including the source group and\n * sibling indexes.\n *\n * @see RouterPanes\n */\ninterface FlattenedRouterPane {\n  routerPaneSibling: RouterPaneSibling\n  flatIndex: number\n  groupIndex: number\n  siblingIndex: number\n}\n\n/**\n * The state of the accumulator used to store and manage memo cache state\n */\ninterface CacheState {\n  /**\n   * Holds the memoization results keyed by a combination of `assignId` and a\n   * context hash.\n   */\n  resolvedPaneCache: Map<string, Observable<PaneNode>>\n  /**\n   * Acts as a dictionary that stores cache keys by their flat index. This is\n   * used to clean up the cache between different branches in the pane\n   * structure.\n   *\n   * @see createResolvedPaneNodeStream look inside the `scan` where `wrapFn` is\n   * defined\n   */\n  cacheKeysByFlatIndex: Array<Set<string>>\n  /**\n   * The resulting memoized `PaneResolver` function. This function closes over\n   * the `resolvedPaneCache`.\n   */\n  resolvePane: PaneResolver\n  flattenedRouterPanes: FlattenedRouterPane[]\n}\n\nexport interface CreateResolvedPaneNodeStreamOptions {\n  /**\n   * an input stream of `RouterPanes`\n   * @see RouterPanes\n   */\n  routerPanesStream: Observable<RouterPanes>\n  /**\n   * any `UnresolvedPaneNode` (could be an observable, promise, pane resolver etc)\n   */\n  rootPaneNode: UnresolvedPaneNode\n  /** used primarily for testing */\n  initialCacheState?: CacheState\n\n  structureContext: StructureContext\n}\n\n/**\n * The result of pane resolving\n */\nexport type ResolvedPaneMeta = {\n  groupIndex: number\n  siblingIndex: number\n  flatIndex: number\n  routerPaneSibling: RouterPaneSibling\n  path: string[]\n} & ({type: 'loading'; paneNode: null} | {type: 'resolvedMeta'; paneNode: PaneNode})\n\ninterface ResolvePaneTreeOptions {\n  resolvePane: PaneResolver\n  flattenedRouterPanes: FlattenedRouterPane[]\n  unresolvedPane: UnresolvedPaneNode | undefined\n  parent: PaneNode | null\n  path: string[]\n  structureContext: StructureContext\n}\n\n/**\n * A recursive pane resolving function. Starts at one unresolved pane node and\n * continues until there is no more flattened router panes that can be used as\n * input to the unresolved panes.\n */\nfunction resolvePaneTree({\n  unresolvedPane,\n  flattenedRouterPanes,\n  parent,\n  path,\n  resolvePane,\n  structureContext,\n}: ResolvePaneTreeOptions): Observable<ResolvedPaneMeta[]> {\n  const [current, ...rest] = flattenedRouterPanes\n  const next = rest[0] as FlattenedRouterPane | undefined\n\n  const context: RouterPaneSiblingContext = {\n    id: current.routerPaneSibling.id,\n    splitIndex: current.siblingIndex,\n    parent,\n    path: [...path, current.routerPaneSibling.id],\n    index: current.flatIndex,\n    params: current.routerPaneSibling.params || {},\n    payload: current.routerPaneSibling.payload,\n    structureContext,\n  }\n\n  try {\n    return resolvePane(unresolvedPane, context, current.flatIndex).pipe(\n      // this switch map receives a resolved pane\n      switchMap((paneNode) => {\n        // we can create a `resolvedMeta` type using it\n        const resolvedPaneMeta: ResolvedPaneMeta = {\n          type: 'resolvedMeta',\n          ...current,\n          paneNode: paneNode,\n          path: context.path,\n        }\n\n        // for the other unresolved panes, we can create \"loading panes\"\n        const loadingPanes = rest.map((i, restIndex) => {\n          const loadingPanePath = [\n            ...context.path,\n            ...rest.slice(restIndex).map((_, currentIndex) => `[${i.flatIndex + currentIndex}]`),\n          ]\n\n          const loadingPane: ResolvedPaneMeta = {\n            type: 'loading',\n            path: loadingPanePath,\n            paneNode: null,\n            ...i,\n          }\n\n          return loadingPane\n        })\n\n        if (!rest.length) {\n          return observableOf([resolvedPaneMeta])\n        }\n\n        let nextStream\n\n        if (\n          // the fallback editor case\n          next?.routerPaneSibling.id.startsWith('__edit__')\n        ) {\n          nextStream = resolvePaneTree({\n            unresolvedPane: fallbackEditorChild,\n            flattenedRouterPanes: rest,\n            parent,\n            path: context.path,\n            resolvePane,\n            structureContext,\n          })\n        } else if (current.groupIndex === next?.groupIndex) {\n          // if the next flattened router pane has the same group index as the\n          // current flattened router pane, then the next flattened router pane\n          // belongs to the same group (i.e. it is a split pane)\n          nextStream = resolvePaneTree({\n            unresolvedPane,\n            flattenedRouterPanes: rest,\n            parent,\n            path,\n            resolvePane,\n            structureContext,\n          })\n        } else {\n          // normal children resolving\n          nextStream = resolvePaneTree({\n            unresolvedPane:\n              typeof paneNode.child === 'function'\n                ? (memoBind(paneNode, 'child') as PaneNodeResolver)\n                : paneNode.child,\n            flattenedRouterPanes: rest,\n            parent: paneNode,\n            path: context.path,\n            resolvePane,\n            structureContext,\n          })\n        }\n\n        return concat(\n          // we emit the loading panes first in a concat (this emits immediately)\n          observableOf([resolvedPaneMeta, ...loadingPanes]),\n          // then whenever the next stream is done, the results will be combined.\n          nextStream.pipe(map((nextResolvedPanes) => [resolvedPaneMeta, ...nextResolvedPanes])),\n        )\n      }),\n    )\n  } catch (e) {\n    if (e instanceof PaneResolutionError) {\n      if (e.context) {\n        console.warn(\n          `Pane resolution error at index ${e.context.index}${\n            e.context.splitIndex > 0 ? ` for split pane index ${e.context.splitIndex}` : ''\n          }: ${e.message}${e.helpId ? ` - see ${generateHelpUrl(e.helpId)}` : ''}`,\n          e,\n        )\n      }\n\n      if (e.helpId === 'structure-item-returned-no-child') {\n        // returning an observable of an empty array will remove loading panes\n        // note: this one intentionally does not throw\n        return observableOf([])\n      }\n    }\n\n    throw e\n  }\n}\n\n/**\n * Takes in a stream of `RouterPanes` and an unresolved root pane and returns\n * a stream of `ResolvedPaneMeta`\n */\nexport function createResolvedPaneNodeStream({\n  routerPanesStream,\n  rootPaneNode,\n  initialCacheState = {\n    cacheKeysByFlatIndex: [],\n    flattenedRouterPanes: [],\n    resolvedPaneCache: new Map(),\n    resolvePane: () => NEVER,\n  },\n  structureContext,\n}: CreateResolvedPaneNodeStreamOptions): Observable<ResolvedPaneMeta[]> {\n  const resolvedPanes$ = routerPanesStream.pipe(\n    // add in implicit \"root\" router pane\n    map((rawRouterPanes) => [[{id: 'root'}], ...rawRouterPanes]),\n    // create flattened router panes\n    map((routerPanes) => {\n      const flattenedRouterPanes: FlattenedRouterPane[] = routerPanes\n        .flatMap((routerPaneGroup, groupIndex) =>\n          routerPaneGroup.map((routerPaneSibling, siblingIndex) => ({\n            routerPaneSibling,\n            groupIndex,\n            siblingIndex,\n          })),\n        )\n        // add in the flat index\n        .map((i, index) => ({...i, flatIndex: index}))\n\n      return flattenedRouterPanes\n    }),\n    // calculate a \"diffIndex\" used for clearing the memo cache\n    startWith([] as FlattenedRouterPane[]),\n    pairwise(),\n    map(([prev, curr]) => {\n      for (let i = 0; i < curr.length; i++) {\n        const prevValue = prev[i]\n        const currValue = curr[i]\n\n        if (!isEqual(prevValue, currValue)) {\n          return {\n            flattenedRouterPanes: curr,\n            diffIndex: i,\n          }\n        }\n      }\n\n      return {\n        flattenedRouterPanes: curr,\n        diffIndex: curr.length,\n      }\n    }),\n    // create the memoized `resolvePane` function and manage the memo cache\n    scan((acc, next) => {\n      const {cacheKeysByFlatIndex, resolvedPaneCache} = acc\n      const {flattenedRouterPanes, diffIndex} = next\n\n      // use the `cacheKeysByFlatIndex` like a dictionary to find cache keys to\n      // and cache keys to delete\n      const beforeDiffIndex = cacheKeysByFlatIndex.slice(0, diffIndex + 1)\n      const afterDiffIndex = cacheKeysByFlatIndex.slice(diffIndex + 1)\n\n      const keysToKeep = new Set(beforeDiffIndex.flatMap((keySet) => Array.from(keySet)))\n      const keysToDelete = afterDiffIndex\n        .flatMap((keySet) => Array.from(keySet))\n        .filter((key) => !keysToKeep.has(key))\n\n      for (const key of keysToDelete) {\n        resolvedPaneCache.delete(key)\n      }\n\n      // create a memoizing pane resolver middleware that utilizes the cache\n      // maintained above. this keeps the cache from growing indefinitely\n      const memoize: PaneResolverMiddleware = (nextFn) => (unresolvedPane, context, flatIndex) => {\n        const key = unresolvedPane && `${assignId(unresolvedPane)}-${hashContext(context)}`\n        const cachedResolvedPane = key && resolvedPaneCache.get(key)\n        if (cachedResolvedPane) return cachedResolvedPane\n\n        const result = nextFn(unresolvedPane, context, flatIndex)\n        if (!key) return result\n\n        const cacheKeySet = cacheKeysByFlatIndex[flatIndex] || new Set()\n        cacheKeySet.add(key)\n        cacheKeysByFlatIndex[flatIndex] = cacheKeySet\n        resolvedPaneCache.set(key, result)\n        return result\n      }\n\n      return {\n        flattenedRouterPanes,\n        cacheKeysByFlatIndex,\n        resolvedPaneCache,\n        resolvePane: createPaneResolver(memoize),\n      }\n    }, initialCacheState),\n    // run the memoized, recursive resolving\n    switchMap(({flattenedRouterPanes, resolvePane}) =>\n      resolvePaneTree({\n        unresolvedPane: rootPaneNode,\n        flattenedRouterPanes,\n        parent: null,\n        path: [],\n        resolvePane,\n        structureContext,\n      }),\n    ),\n  )\n\n  // after we've created a stream of `ResolvedPaneMeta[]`, we need to clean up\n  // the results to remove unwanted loading panes and prevent unnecessary\n  // emissions\n  return resolvedPanes$.pipe(\n    // this diffs the previous emission with the current one. if there is a new\n    // loading pane at the same position where a previous pane already had a\n    // resolved value (looking at the IDs to compare), then return the previous\n    // pane instead of the loading pane\n    scan(\n      (prev, next) =>\n        next.map((nextPane, index) => {\n          const prevPane = prev[index] as ResolvedPaneMeta | undefined\n          if (!prevPane) return nextPane\n          if (nextPane.type !== 'loading') return nextPane\n\n          if (prevPane.routerPaneSibling.id === nextPane.routerPaneSibling.id) {\n            return prevPane\n          }\n          return nextPane\n        }),\n      [] as ResolvedPaneMeta[],\n    ),\n    // this prevents duplicate emissions\n    distinctUntilChanged((prev, next) => {\n      if (prev.length !== next.length) return false\n\n      for (let i = 0; i < next.length; i++) {\n        const prevValue = prev[i]\n        const nextValue = next[i]\n        if (hashResolvedPaneMeta(prevValue) !== hashResolvedPaneMeta(nextValue)) {\n          return false\n        }\n      }\n\n      return true\n    }),\n  )\n}\n", "import {useEffect, useMemo, useState} from 'react'\nimport {ReplaySubject} from 'rxjs'\nimport {map} from 'rxjs/operators'\nimport {type RouterState, useRouter} from 'sanity/router'\n\nimport {LOADING_PANE} from '../constants'\nimport {type PaneNode, type RouterPaneGroup, type RouterPanes} from '../types'\nimport {useStructureTool} from '../useStructureTool'\nimport {createResolvedPaneNodeStream} from './createResolvedPaneNodeStream'\n\ninterface PaneData {\n  active: boolean\n  childItemId: string | null\n  groupIndex: number\n  index: number\n  itemId: string\n  key: string\n  pane: PaneNode | typeof LOADING_PANE\n  params: Record<string, string | undefined> & {perspective?: string}\n  path: string\n  payload: unknown\n  selected: boolean\n  siblingIndex: number\n}\n\nexport interface Panes {\n  paneDataItems: PaneData[]\n  routerPanes: RouterPanes\n  resolvedPanes: (PaneNode | typeof LOADING_PANE)[]\n}\n\nfunction useRouterPanesStream() {\n  const [routerStateSubject] = useState(() => new ReplaySubject<RouterState>(1))\n  const routerPanes$ = useMemo(\n    () =>\n      routerStateSubject\n        .asObservable()\n        .pipe(map((_routerState) => (_routerState?.panes || []) as RouterPanes)),\n    [routerStateSubject],\n  )\n  const {state: routerState} = useRouter()\n  useEffect(() => {\n    routerStateSubject.next(routerState)\n  }, [routerState, routerStateSubject])\n\n  return routerPanes$\n}\n\nexport function useResolvedPanes(): Panes {\n  // used to propagate errors from async effect. throwing inside of the render\n  // will bubble the error to react where it can be picked up by standard error\n  // boundaries\n  const [error, setError] = useState<unknown>()\n  if (error) throw error\n\n  const {structureContext, rootPaneNode} = useStructureTool()\n\n  const [data, setData] = useState<Panes>({\n    paneDataItems: [],\n    resolvedPanes: [],\n    routerPanes: [],\n  })\n\n  const routerPanesStream = useRouterPanesStream()\n\n  useEffect(() => {\n    const resolvedPanes$ = createResolvedPaneNodeStream({\n      rootPaneNode,\n      routerPanesStream,\n      structureContext,\n    }).pipe(\n      map((resolvedPanes) => {\n        const routerPanes = resolvedPanes.reduce<RouterPanes>((acc, next) => {\n          const currentGroup = acc[next.groupIndex] || []\n          currentGroup[next.siblingIndex] = next.routerPaneSibling\n          acc[next.groupIndex] = currentGroup\n          return acc\n        }, [])\n\n        const groupsLen = routerPanes.length\n\n        const paneDataItems = resolvedPanes.map((pane) => {\n          const {groupIndex, flatIndex, siblingIndex, routerPaneSibling, path} = pane\n          const itemId = routerPaneSibling.id\n          const nextGroup = routerPanes[groupIndex + 1] as RouterPaneGroup | undefined\n\n          const paneDataItem: PaneData = {\n            active: groupIndex === groupsLen - 2,\n            childItemId: nextGroup?.[0].id ?? null,\n            index: flatIndex,\n            itemId: routerPaneSibling.id,\n            groupIndex,\n            key: `${\n              pane.type === 'loading' ? 'unknown' : pane.paneNode.id\n            }-${itemId}-${siblingIndex}`,\n            pane: pane.type === 'loading' ? LOADING_PANE : pane.paneNode,\n            params: routerPaneSibling.params || {},\n            path: path.join(';'),\n            payload: routerPaneSibling.payload,\n            selected: flatIndex === resolvedPanes.length - 1,\n            siblingIndex,\n          }\n\n          return paneDataItem\n        })\n\n        return {\n          paneDataItems,\n          routerPanes,\n          resolvedPanes: paneDataItems.map((pane) => pane.pane),\n        }\n      }),\n    )\n\n    const subscription = resolvedPanes$.subscribe({\n      next: (result) => setData(result),\n      error: (e) => setError(e),\n    })\n\n    return () => subscription.unsubscribe()\n  }, [rootPaneNode, routerPanesStream, structureContext])\n\n  return data\n}\n", "import {uuid} from '@sanity/uuid'\nimport {firstValueFrom, type Observable} from 'rxjs'\nimport {type DocumentStore, getPublishedId} from 'sanity'\n\nimport {PaneResolutionError} from '../../../structureResolvers'\n\nexport function removeDraftPrefix(documentId: string): string {\n  const publishedId = getPublishedId(documentId)\n\n  if (publishedId !== documentId) {\n    console.warn(\n      'Removed unexpected draft id in document link: All links to documents should have the ' +\n        '`drafts.`-prefix removed and something appears to have made an intent link to `%s`',\n      documentId,\n    )\n  }\n\n  return publishedId\n}\n\nexport async function ensureDocumentIdAndType(\n  documentStore: DocumentStore,\n  id: string | undefined,\n  type: string | undefined,\n): Promise<{id: string; type: string}> {\n  if (id && type) return {id, type}\n  if (!id && type) return {id: uuid(), type}\n  if (id && !type) {\n    const resolvedType = await firstValueFrom(\n      documentStore.resolveTypeForDocument(id) as Observable<string>,\n    )\n\n    return {id, type: resolvedType}\n  }\n\n  throw new PaneResolutionError({\n    message: 'Neither document `id` or `type` was provided when trying to resolve intent.',\n  })\n}\n", "import {memo, useCallback, useEffect, useState} from 'react'\nimport {isRecord, useDocumentStore} from 'sanity'\nimport {useRouter, useRouterState} from 'sanity/router'\n\nimport {resolveIntent} from '../../../structureResolvers'\nimport {useStructureTool} from '../../../useStructureTool'\nimport {ensureDocumentIdAndType} from './utils'\n\nconst EMPTY_RECORD: Record<string, unknown> = {}\n\n/**\n * A component that receives an intent from props and redirects to the resolved\n * intent location (while showing a loading spinner during the process)\n */\nexport const IntentResolver = memo(function IntentResolver() {\n  const {navigate} = useRouter()\n  const maybeIntent = useRouterState(\n    useCallback((routerState) => {\n      const intentName = typeof routerState.intent === 'string' ? routerState.intent : undefined\n      return intentName\n        ? {\n            intent: intentName,\n            params: isRecord(routerState.params) ? routerState.params : EMPTY_RECORD,\n            payload: routerState.payload,\n          }\n        : undefined\n    }, []),\n  )\n  const {rootPaneNode, structureContext} = useStructureTool()\n  const documentStore = useDocumentStore()\n  const [error, setError] = useState<unknown>(null)\n\n  // this re-throws errors so that parent ErrorBoundary's can handle them properly\n  if (error) throw error\n\n  // eslint-disable-next-line consistent-return\n  useEffect(() => {\n    if (maybeIntent) {\n      const {intent, params, payload} = maybeIntent\n\n      let cancelled = false\n      async function effect() {\n        const {id, type} = await ensureDocumentIdAndType(\n          documentStore,\n          typeof params.id === 'string' ? params.id : undefined,\n          typeof params.type === 'string' ? params.type : undefined,\n        )\n\n        if (cancelled) return\n\n        const panes = await resolveIntent({\n          intent,\n          params: {...params, id, type},\n          payload,\n          rootPaneNode,\n          structureContext,\n        })\n\n        if (cancelled) return\n\n        navigate({panes}, {replace: true})\n      }\n\n      effect().catch(setError)\n\n      return () => {\n        cancelled = true\n      }\n    }\n  }, [documentStore, maybeIntent, navigate, rootPaneNode, structureContext])\n\n  return null\n})\n", "import {generateHelpUrl} from '@sanity/generate-help-url'\nimport {SyncIcon} from '@sanity/icons'\nimport {Box, Card, Code, Container, Heading, Stack, Text} from '@sanity/ui'\nimport {useCallback} from 'react'\nimport {useTranslation} from 'sanity'\nimport {styled} from 'styled-components'\n\nimport {Button} from '../../../ui-components'\nimport {structureLocaleNamespace} from '../../i18n'\nimport {SerializeError} from '../../structureBuilder'\nimport {PaneResolutionError} from '../../structureResolvers'\n\nconst PathSegment = styled.span`\n  &:not(:last-child)::after {\n    content: ' ➝ ';\n    opacity: 0.5;\n  }\n`\n\nfunction formatStack(stack: string) {\n  return (\n    stack\n      // Prettify builder functions\n      .replace(/\\(\\.\\.\\.\\)\\./g, '(...)\\n  .')\n      // Remove webpack cruft from function names\n      .replace(/__WEBPACK_IMPORTED_MODULE_\\d+_+/g, '')\n      // Remove default export postfix from function names\n      .replace(/___default\\./g, '.')\n      // Replace full host path, leave only path to JS-file\n      .replace(new RegExp(` \\\\(https?:\\\\/\\\\/${window.location.host}`, 'g'), ' (')\n  )\n}\n\ninterface StructureErrorProps {\n  error: unknown\n}\n\nexport function StructureError({error}: StructureErrorProps) {\n  if (!(error instanceof PaneResolutionError)) {\n    throw error\n  }\n  const {cause} = error\n  const {t} = useTranslation(structureLocaleNamespace)\n\n  // Serialize errors are well-formatted and should be readable, in these cases a stack trace is\n  // usually not helpful. Build errors in dev (with HMR) usually also contains a bunch of garbage\n  // instead of an actual error message, so make sure we show the message in these cases as well\n  const stack = cause?.stack || error.stack\n  const showStack =\n    stack && !(cause instanceof SerializeError) && !error.message.includes('Module build failed:')\n\n  const path = cause instanceof SerializeError ? cause.path : []\n  const helpId = (cause instanceof SerializeError && cause.helpId) || error.helpId\n\n  const handleReload = useCallback(() => {\n    window.location.reload()\n  }, [])\n\n  return (\n    <Card height=\"fill\" overflow=\"auto\" padding={4} sizing=\"border\" tone=\"critical\">\n      <Container>\n        <Heading as=\"h2\">{t('structure-error.header.text')}</Heading>\n\n        <Card marginTop={4} padding={4} radius={2} overflow=\"auto\" shadow={1} tone=\"inherit\">\n          {path.length > 0 && (\n            <Stack space={2}>\n              <Text size={1} weight=\"medium\">\n                {t('structure-error.structure-path.label')}\n              </Text>\n              <Code>\n                {/* TODO: it seems like the path is off by one and includes */}\n                {/* `root` twice  */}\n                {path.slice(1).map((segment, i) => (\n                  <PathSegment key={`${segment}-${i}`}>{segment}</PathSegment>\n                ))}\n              </Code>\n            </Stack>\n          )}\n\n          <Stack marginTop={4} space={2}>\n            <Text size={1} weight=\"medium\">\n              {t('structure-error.error.label')}\n            </Text>\n            <Code>{showStack ? formatStack(stack) : error.message}</Code>\n          </Stack>\n\n          {helpId && (\n            <Box marginTop={4}>\n              <Text>\n                <a href={generateHelpUrl(helpId)} rel=\"noopener noreferrer\" target=\"_blank\">\n                  {t('structure-error.docs-link.text')}\n                </a>\n              </Text>\n            </Box>\n          )}\n\n          <Box marginTop={4}>\n            <Button\n              text={t('structure-error.reload-button.text')}\n              icon={SyncIcon}\n              tone=\"primary\"\n              onClick={handleReload}\n            />\n          </Box>\n        </Card>\n      </Container>\n    </Card>\n  )\n}\n", "import {WarningOutlineIcon} from '@sanity/icons'\nimport {Box, Card, Container, Flex, Stack, Text} from '@sanity/ui'\nimport {useTranslation} from 'sanity'\n\nimport {structureLocaleNamespace} from '../../i18n'\n\nexport function NoDocumentTypesScreen() {\n  const {t} = useTranslation(structureLocaleNamespace)\n\n  return (\n    <Card height=\"fill\">\n      <Flex align=\"center\" height=\"fill\" justify=\"center\" padding={4} sizing=\"border\">\n        <Container width={0}>\n          <Card padding={4} radius={2} shadow={1} tone=\"caution\">\n            <Flex>\n              <Box>\n                <Text size={1}>\n                  <WarningOutlineIcon />\n                </Text>\n              </Box>\n              <Stack flex={1} marginLeft={3} space={3}>\n                <Text as=\"h1\" size={1} weight=\"medium\">\n                  {t('no-document-types-screen.title')}\n                </Text>\n                <Text as=\"p\" muted size={1}>\n                  {t('no-document-types-screen.subtitle')}\n                </Text>\n                <Text as=\"p\" muted size={1}>\n                  <a\n                    href=\"https://www.sanity.io/docs/create-a-schema-and-configure-sanity-studio\"\n                    target=\"_blank\"\n                    rel=\"noreferrer\"\n                  >\n                    {t('no-document-types-screen.link-text')}\n                  </a>\n                </Text>\n              </Stack>\n            </Flex>\n          </Card>\n        </Container>\n      </Flex>\n    </Card>\n  )\n}\n", "import {type ObjectSchemaType} from '@sanity/types'\nimport {useEffect} from 'react'\nimport {\n  unstable_useValuePreview as useValuePreview,\n  useEditState,\n  usePerspective,\n  useSchema,\n  useTranslation,\n} from 'sanity'\n\nimport {LOADING_PANE} from '../../constants'\nimport {useDocumentLastRev} from '../../hooks/useDocumentLastRev'\nimport {structureLocaleNamespace} from '../../i18n'\nimport {type Panes} from '../../structureResolvers'\nimport {type DocumentPaneNode} from '../../types'\nimport {useStructureTool} from '../../useStructureTool'\n\ninterface StructureTitleProps {\n  resolvedPanes: Panes['resolvedPanes']\n}\n\n// TODO: Fix state jank when editing different versions inside panes.\nconst DocumentTitle = (props: {documentId: string; documentType: string}) => {\n  const {documentId, documentType} = props\n  const {selectedReleaseId} = usePerspective()\n\n  const editState = useEditState(documentId, documentType, 'default', selectedReleaseId)\n  const schema = useSchema()\n  const {t} = useTranslation(structureLocaleNamespace)\n  const isNewDocument = !editState?.published && !editState?.draft\n  const documentValue = editState?.version || editState?.draft || editState?.published\n  const schemaType = schema.get(documentType) as ObjectSchemaType | undefined\n\n  const {value, isLoading: previewValueIsLoading} = useValuePreview({\n    enabled: !!documentValue,\n    schemaType,\n    value: documentValue,\n  })\n\n  const {lastRevisionDocument} = useDocumentLastRev(documentId, documentType)\n  const isDeleted = lastRevisionDocument && !documentValue\n\n  // if the document is deleted, we don't want to show the title\n  const documentTitle = isDeleted\n    ? ''\n    : isNewDocument\n      ? t('browser-document-title.new-document', {\n          schemaType: schemaType?.title || schemaType?.name,\n        })\n      : value?.title || t('browser-document-title.untitled-document')\n\n  const settled = editState.ready && !previewValueIsLoading\n  const newTitle = useConstructDocumentTitle(documentTitle)\n  useEffect(() => {\n    if (!settled) return\n    // Set the title as the document title\n    document.title = newTitle\n  }, [documentTitle, settled, newTitle])\n\n  return null\n}\n\nconst PassthroughTitle = (props: {title?: string}) => {\n  const {title} = props\n  const newTitle = useConstructDocumentTitle(title)\n  useEffect(() => {\n    // Set the title as the document title\n    document.title = newTitle\n  }, [newTitle, title])\n  return null\n}\n\nexport const StructureTitle = (props: StructureTitleProps) => {\n  const {resolvedPanes} = props\n\n  if (!resolvedPanes?.length) return null\n\n  const lastPane = resolvedPanes[resolvedPanes.length - 1]\n\n  // If the last pane is loading, display the structure tool title only\n  if (isLoadingPane(lastPane)) {\n    return <PassthroughTitle />\n  }\n\n  // If the last pane is a document\n  if (isDocumentPane(lastPane)) {\n    // Passthrough the document pane's title, which may be defined in structure builder\n    if (lastPane?.title) {\n      return <PassthroughTitle title={lastPane.title} />\n    }\n\n    // Otherwise, display a `document.title` containing the resolved Sanity document title\n    return <DocumentTitle documentId={lastPane.options.id} documentType={lastPane.options.type} />\n  }\n\n  // Otherwise, display the last pane's title (if present)\n  return <PassthroughTitle title={lastPane?.title} />\n}\n\n/**\n * Construct a pipe delimited title containing `activeTitle` (if applicable) and the base structure title.\n *\n * @param activeTitle - Title of the first segment\n *\n * @returns A pipe delimited title in the format `${activeTitle} | %BASE_STRUCTURE_TITLE%`\n * or simply `%BASE_STRUCTURE_TITLE` if `activeTitle` is undefined.\n */\nfunction useConstructDocumentTitle(activeTitle?: string) {\n  const structureToolBaseTitle = useStructureTool().structureContext.title\n  return [activeTitle, structureToolBaseTitle].filter((title) => title).join(' | ')\n}\n\n// Type guards\nfunction isDocumentPane(pane: Panes['resolvedPanes'][number]): pane is DocumentPaneNode {\n  return pane !== LOADING_PANE && pane.type === 'document'\n}\n\nfunction isLoadingPane(pane: Panes['resolvedPanes'][number]): pane is typeof LOADING_PANE {\n  return pane === LOADING_PANE\n}\n", "import {PortalProvider, useTheme, useToast} from '@sanity/ui'\nimport {isHotkey} from 'is-hotkey-esm'\nimport {Fragment, memo, useCallback, useEffect, useState} from 'react'\nimport {_isCustomDocumentTypeDefinition, useSchema} from 'sanity'\nimport {useRouterState} from 'sanity/router'\nimport {styled} from 'styled-components'\n\nimport {LOADING_PANE} from '../../constants'\nimport {LoadingPane, StructureToolPane} from '../../panes'\nimport {useResolvedPanes} from '../../structureResolvers'\nimport {type PaneNode} from '../../types'\nimport {useStructureTool} from '../../useStructureTool'\nimport {PaneLayout} from '../pane'\nimport {NoDocumentTypesScreen} from './NoDocumentTypesScreen'\nimport {StructureTitle} from './StructureTitle'\n\ninterface StructureToolProps {\n  onPaneChange: (panes: Array<PaneNode | typeof LOADING_PANE>) => void\n}\n\nconst StyledPaneLayout = styled(PaneLayout)`\n  min-height: 100%;\n  min-width: 320px;\n`\n\nconst isSaveHotkey = isHotkey('mod+s')\n\n/**\n * @internal\n */\nexport const StructureTool = memo(function StructureTool({onPaneChange}: StructureToolProps) {\n  const {push: pushToast} = useToast()\n  const schema = useSchema()\n  const {layoutCollapsed, setLayoutCollapsed} = useStructureTool()\n  const {paneDataItems, resolvedPanes} = useResolvedPanes()\n  // Intent resolving is processed by the sibling `<IntentResolver />` but it doesn't have a UI for indicating progress.\n  // We handle that here, so if there are only 1 pane (the root structure), and there's an intent state in the router, we need to show a placeholder LoadingPane until\n  // the structure is resolved and we know what panes to load/display\n  const isResolvingIntent = useRouterState(\n    useCallback((routerState) => typeof routerState.intent === 'string', []),\n  )\n  const {\n    sanity: {media},\n  } = useTheme()\n\n  const [portalElement, setPortalElement] = useState<HTMLDivElement | null>(null)\n\n  const handleRootCollapse = useCallback(() => setLayoutCollapsed(true), [setLayoutCollapsed])\n  const handleRootExpand = useCallback(() => setLayoutCollapsed(false), [setLayoutCollapsed])\n\n  useEffect(() => {\n    // we check for length before emitting here to skip the initial empty array\n    // state from the `useResolvedPanes` hook. there should always be a root\n    // pane emitted on subsequent emissions\n    if (resolvedPanes.length) {\n      onPaneChange(resolvedPanes)\n    }\n  }, [onPaneChange, resolvedPanes])\n\n  useEffect(() => {\n    const handleGlobalKeyDown = (event: KeyboardEvent) => {\n      // Prevent `Cmd+S`\n      if (isSaveHotkey(event)) {\n        event.preventDefault()\n\n        pushToast({\n          closable: true,\n          id: 'auto-save-message',\n          status: 'info',\n          title: 'Your work is automatically saved!',\n          duration: 4000,\n        })\n      }\n    }\n\n    window.addEventListener('keydown', handleGlobalKeyDown)\n    return () => window.removeEventListener('keydown', handleGlobalKeyDown)\n  }, [pushToast])\n\n  const hasDefinedDocumentTypes = schema._original?.types.some(_isCustomDocumentTypeDefinition)\n\n  if (!hasDefinedDocumentTypes) {\n    return <NoDocumentTypesScreen />\n  }\n\n  return (\n    <PortalProvider element={portalElement || null}>\n      <StyledPaneLayout\n        flex={1}\n        height={layoutCollapsed ? undefined : 'fill'}\n        minWidth={media[1]}\n        onCollapse={handleRootCollapse}\n        onExpand={handleRootExpand}\n      >\n        {paneDataItems.map(\n          ({\n            active,\n            childItemId,\n            groupIndex,\n            itemId,\n            key: paneKey,\n            pane,\n            index: paneIndex,\n            params: paneParams,\n            path,\n            payload,\n            siblingIndex,\n            selected,\n          }) => (\n            <Fragment key={`${pane === LOADING_PANE ? 'loading' : pane.type}-${paneIndex}`}>\n              {pane === LOADING_PANE ? (\n                <LoadingPane paneKey={paneKey} path={path} selected={selected} />\n              ) : (\n                <StructureToolPane\n                  active={active}\n                  groupIndex={groupIndex}\n                  index={paneIndex}\n                  pane={pane}\n                  childItemId={childItemId}\n                  itemId={itemId}\n                  paneKey={paneKey}\n                  params={paneParams}\n                  payload={payload}\n                  path={path}\n                  selected={selected}\n                  siblingIndex={siblingIndex}\n                />\n              )}\n            </Fragment>\n          ),\n        )}\n        {/* If there's just 1 pane (the root), or less, and we're resolving an intent then it's necessary to show */}\n        {/* a loading indicator as the intent resolving is async, could take a while and can also be interrupted/redirected */}\n        {paneDataItems.length <= 1 && isResolvingIntent && (\n          <LoadingPane paneKey=\"intent-resolver\" />\n        )}\n      </StyledPaneLayout>\n      <StructureTitle resolvedPanes={resolvedPanes} />\n      <div data-portal=\"\" ref={setPortalElement} />\n    </PortalProvider>\n  )\n})\n", "import {useEffect, useState} from 'react'\nimport {SourceProvider, type Tool, useWorkspace} from 'sanity'\n\nimport {ErrorBoundary} from '../../../ui-components/errorBoundary'\nimport {setActivePanes} from '../../getIntentState'\nimport {StructureToolProvider} from '../../StructureToolProvider'\nimport {type StructureToolOptions} from '../../types'\nimport {IntentResolver} from './intentResolver'\nimport {StructureError} from './StructureError'\nimport {StructureTool} from './StructureTool'\n\ninterface StructureToolBoundaryProps {\n  tool: Tool<StructureToolOptions>\n}\n\nexport function StructureToolBoundary({tool: {options}}: StructureToolBoundaryProps) {\n  const {unstable_sources: sources} = useWorkspace()\n  const [firstSource] = sources\n  const {source, defaultDocumentNode, structure} = options || {}\n\n  // Set active panes to blank on mount and unmount\n  useEffect(() => {\n    setActivePanes([])\n    return () => setActivePanes([])\n  }, [])\n\n  const [{error}, setError] = useState<{error: unknown}>({error: null})\n\n  // this re-throws if the error it catches is not a PaneResolutionError\n  if (error) return <StructureError error={error} />\n\n  return (\n    <ErrorBoundary onCatch={setError}>\n      <SourceProvider name={source || firstSource.name}>\n        <StructureToolProvider defaultDocumentNode={defaultDocumentNode} structure={structure}>\n          <StructureTool onPaneChange={setActivePanes} />\n          <IntentResolver />\n        </StructureToolProvider>\n      </SourceProvider>\n    </ErrorBoundary>\n  )\n}\n"],
  "mappings": "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",
  "names": ["PaneResolutionError", "Error", "constructor", "message", "context", "helpId", "cause", "name", "randomIdCache", "WeakMap", "assignId", "obj", "cachedValue", "get", "id", "nanoid", "set", "isPromise", "thing", "then", "isSerializable", "isRecord", "serialize", "rethrowWithPaneResolutionErrors", "next", "unresolvedPane", "flatIndex", "e", "wrapWithPublishReplay", "args", "pipe", "publishReplay", "refCount", "createPaneResolver", "middleware", "resolvePane", "isObservable", "from", "switchMap", "result", "observableOf", "bindCache", "memoBind", "methodKey", "boundMethods", "Map", "bound", "method", "bind", "resolveIntent", "options", "resolvedPaneCache", "nextFn", "key", "path", "join", "cachedResolvedPane", "fallbackEditorPanes", "params", "omit", "type", "payload", "traverse", "currentId", "intent", "parent", "levelIndex", "structureContext", "targetId", "schemaTypeName", "otherParams", "resolvedPane", "firstValueFrom", "splitIndex", "index", "undefined", "panes", "slice", "length", "map", "i", "depthIndex", "canHandleIntent", "pane", "filter", "child", "items", "Promise", "all", "item", "nextLevelIndex", "resolve", "_id", "flat", "closestPaneToRoot", "rootPaneNode", "sort", "a", "b", "fallbackEditorChild", "nodeId", "replace", "resolveDocumentNode", "template", "defaultDocumentBuilder", "schemaType", "documentId", "initialValueTemplate", "hashContext", "JSON", "stringify", "parentId", "serializeOptionsIndex", "serializeOptions", "serializeOptionsPath", "hashResolvedPaneMeta", "meta", "normalized", "routerPaneSibling", "groupIndex", "siblingIndex", "paneNode", "resolvePaneTree", "flattenedRouterPanes", "current", "rest", "resolvedPaneMeta", "loadingPanes", "restIndex", "_", "currentIndex", "nextStream", "startsWith", "concat", "nextResolvedPanes", "console", "warn", "generateHelpUrl", "createResolvedPaneNodeStream", "routerPanesStream", "initialCacheState", "cacheKeysByFlatIndex", "NEVER", "rawRouterPanes", "routerPanes", "flatMap", "routerPaneGroup", "startWith", "pairwise", "prev", "curr", "prevValue", "currValue", "isEqual", "diffIndex", "scan", "acc", "beforeDiffIndex", "afterDiffIndex", "keysToKeep", "Set", "keySet", "Array", "keysToDelete", "has", "delete", "cacheKeySet", "add", "nextPane", "prevPane", "distinctUntilChanged", "nextValue", "useRouterPanesStream", "$", "_c", "routerStateSubject", "useState", "_temp", "t0", "asObservable", "_temp2", "routerPanes$", "state", "routerState", "useRouter", "t1", "t2", "useEffect", "_routerState", "ReplaySubject", "useResolvedPanes", "error", "setError", "useStructureTool", "Symbol", "for", "paneDataItems", "resolvedPanes", "data", "setData", "subscription", "_temp5", "subscribe", "unsubscribe", "reduce", "_temp3", "groupsLen", "itemId", "nextGroup", "active", "childItemId", "LOADING_PANE", "selected", "_temp4", "pane_0", "currentGroup", "ensureDocumentIdAndType", "documentStore", "uuid", "resolvedType", "resolveTypeForDocument", "EMPTY_RECORD", "IntentResolver", "memo", "navigate", "maybeIntent", "useRouterState", "useDocumentStore", "cancelled", "effect", "catch", "intentName", "PathSegment", "styled", "span", "formatStack", "stack", "RegExp", "window", "location", "host", "StructureError", "t", "useTranslation", "structureLocaleNamespace", "SerializeError", "includes", "showStack", "T0", "T1", "T2", "handleReload", "t10", "t11", "t12", "t13", "t14", "t3", "t4", "t5", "t6", "t7", "t8", "t9", "Card", "Container", "t15", "t16", "t17", "t18", "t19", "t20", "t21", "t22", "SyncIcon", "t23", "t24", "t25", "segment", "reload", "NoDocumentTypesScreen", "DocumentTitle", "props", "documentType", "selectedReleaseId", "usePerspective", "editState", "useEditState", "schema", "useSchema", "isNewDocument", "published", "draft", "documentValue", "version", "value", "isLoading", "previewValueIsLoading", "useValuePreview", "enabled", "lastRevisionDocument", "useDocumentLastRev", "documentTitle", "title", "settled", "ready", "newTitle", "useConstructDocumentTitle", "document", "PassthroughTitle", "StructureTitle", "lastPane", "isLoadingPane", "isDocumentPane", "activeTitle", "structureToolBaseTitle", "StyledPaneLayout", "PaneLayout", "isSaveHotkey", "isHotkey", "StructureTool", "onPaneChange", "push", "pushToast", "useToast", "layoutCollapsed", "setLayoutCollapsed", "isResolvingIntent", "sanity", "useTheme", "media", "portalElement", "setPortalElement", "handleRootCollapse", "handleRootExpand", "handleGlobalKeyDown", "event", "preventDefault", "closable", "status", "duration", "addEventListener", "removeEventListener", "_original", "types", "some", "_isCustomDocumentTypeDefinition", "paneKey", "paneIndex", "paneParams", "StructureToolBoundary", "tool", "unstable_sources", "sources", "useWorkspace", "firstSource", "source", "defaultDocumentNode", "structure", "setActivePanes"]
}
