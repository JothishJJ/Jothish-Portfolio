{
  "version": 3,
  "sources": ["../../../.pnpm/sanity@4.10.3_@emotion+is-prop-valid@1.2.2_@portabletext+sanity-bridge@1.1.14_@sanity+s_1530995b6ef1e06dc3fd05b18f3d2070/node_modules/sanity/src/structure/panes/list/ListPaneContent.tsx", "../../../.pnpm/sanity@4.10.3_@emotion+is-prop-valid@1.2.2_@portabletext+sanity-bridge@1.1.14_@sanity+s_1530995b6ef1e06dc3fd05b18f3d2070/node_modules/sanity/src/structure/panes/list/ListPaneHeader.tsx", "../../../.pnpm/sanity@4.10.3_@emotion+is-prop-valid@1.2.2_@portabletext+sanity-bridge@1.1.14_@sanity+s_1530995b6ef1e06dc3fd05b18f3d2070/node_modules/sanity/src/structure/panes/list/ListPane.tsx"],
  "sourcesContent": ["import {Box, Text} from '@sanity/ui'\nimport {useCallback} from 'react'\nimport {\n  CommandList,\n  type CommandListItemContext,\n  type GeneralPreviewLayoutKey,\n  useGetI18nText,\n  useI18nText,\n} from 'sanity'\nimport {styled} from 'styled-components'\n\nimport {PaneContent, PaneItem, usePaneLayout} from '../../components'\nimport {type PaneListItem, type PaneListItemDivider} from '../../types'\n\ninterface ListPaneContentProps {\n  childItemId?: string\n  isActive?: boolean\n  items: (PaneListItem<unknown> | PaneListItemDivider)[] | undefined\n  layout?: GeneralPreviewLayoutKey\n  showIcons: boolean\n  title: string\n}\n\nconst DividerContainer = styled(Box)`\n  display: flex;\n  align-items: center;\n  gap: 1rem;\n  margin: 0.75rem 0 0.25rem 0;\n`\n\nconst Divider = styled.hr`\n  flex: 1;\n  background-color: var(--card-border-color);\n  height: 1px;\n  margin: 0;\n  border: none;\n`\n\nconst DividerTitle = styled(Text)`\n  padding-bottom: 0.75rem;\n  padding-left: 0.5rem;\n  padding-right: 0.5rem;\n`\n\ninterface DividerItemProps {\n  item: PaneListItemDivider\n}\n\nfunction DividerItem({item}: DividerItemProps) {\n  const {title: dividerTitle} = useI18nText(item)\n  return (\n    <DividerContainer>\n      <DividerTitle weight=\"semibold\" muted size={1}>\n        {dividerTitle}\n      </DividerTitle>\n\n      <Divider />\n    </DividerContainer>\n  )\n}\n\n/**\n * @internal\n */\nexport function ListPaneContent(props: ListPaneContentProps) {\n  const {childItemId, items, isActive, layout, showIcons, title} = props\n  const {collapsed: layoutCollapsed} = usePaneLayout()\n  const getI18nText = useGetI18nText(\n    items?.filter(\n      (item): item is Exclude<typeof item, {type: 'divider'}> => item.type !== 'divider',\n    ),\n  )\n\n  const getItemDisabled = useCallback(\n    (itemIndex: number) => {\n      return items?.find((_, i) => i === itemIndex)?.type === 'divider'\n    },\n    [items],\n  )\n\n  const shouldShowIconForItem = useCallback(\n    (item: PaneListItem): boolean => {\n      const itemShowIcon = item.displayOptions?.showIcon\n\n      // Specific true/false on item should have precedence over list setting\n      if (typeof itemShowIcon !== 'undefined') {\n        return itemShowIcon !== false // Boolean(item.icon)\n      }\n\n      // If no item setting is defined, defer to the pane settings\n      return showIcons !== false // Boolean(item.icon)\n    },\n    [showIcons],\n  )\n\n  const renderItem = useCallback(\n    (item: PaneListItem<unknown> | PaneListItemDivider, ctx: CommandListItemContext) => {\n      const {virtualIndex: itemIndex} = ctx\n\n      if (item.type === 'divider') {\n        return (\n          <Box key={`divider-${itemIndex}`} marginBottom={1}>\n            {item.title ? <DividerItem item={item} /> : <Divider />}\n          </Box>\n        )\n      }\n\n      const pressed = !isActive && childItemId === item.id\n      const selected = isActive && childItemId === item.id\n      // If this is a document list item, pass on the ID and type,\n      // otherwise leave it undefined to use the passed title and gang\n      const value =\n        item._id && item.schemaType\n          ? {_id: item._id, _type: item.schemaType.name, title: item.title}\n          : undefined\n\n      return (\n        <PaneItem\n          key={item.id}\n          icon={shouldShowIconForItem(item) ? item.icon : false}\n          id={item.id}\n          layout={layout}\n          marginBottom={1}\n          pressed={pressed}\n          schemaType={item.schemaType}\n          selected={selected}\n          title={getI18nText(item).title}\n          value={value}\n        />\n      )\n    },\n    [childItemId, getI18nText, isActive, layout, shouldShowIconForItem],\n  )\n\n  return (\n    <PaneContent overflow={layoutCollapsed ? 'hidden' : 'auto'}>\n      {items && items.length > 0 && (\n        <CommandList\n          activeItemDataAttr=\"data-hovered\"\n          ariaLabel={title}\n          canReceiveFocus\n          getItemDisabled={getItemDisabled}\n          itemHeight={51}\n          items={items}\n          onlyShowSelectionWhenActive\n          paddingBottom={1}\n          paddingX={3}\n          renderItem={renderItem}\n          wrapAround={false}\n        />\n      )}\n    </PaneContent>\n  )\n}\n", "import {ArrowLeftIcon} from '@sanity/icons'\n\nimport {Button} from '../../../ui-components'\nimport {BackLink, PaneHeader, PaneHeaderActions, usePane} from '../../components'\nimport {type PaneMenuItem, type PaneMenuItemGroup} from '../../types'\nimport {useStructureTool} from '../../useStructureTool'\n\ninterface ListPaneHeaderProps {\n  index: number\n  menuItems?: PaneMenuItem[]\n  menuItemGroups?: PaneMenuItemGroup[]\n  title: string\n}\n\nexport const ListPaneHeader = ({index, menuItems, menuItemGroups, title}: ListPaneHeaderProps) => {\n  const {features} = useStructureTool()\n  const {collapsed, isLast} = usePane()\n  // Prevent focus if this is the last (non-collapsed) pane.\n  const tabIndex = isLast && !collapsed ? -1 : 0\n\n  return (\n    <PaneHeader\n      actions={<PaneHeaderActions menuItems={menuItems} menuItemGroups={menuItemGroups} />}\n      backButton={\n        features.backButton &&\n        index > 0 && (\n          <Button\n            as={BackLink}\n            data-as=\"a\"\n            icon={ArrowLeftIcon}\n            mode=\"bleed\"\n            tooltipProps={{content: 'Back'}}\n          />\n        )\n      }\n      tabIndex={tabIndex}\n      title={title}\n    />\n  )\n}\n", "import {Card, Code} from '@sanity/ui'\nimport {useI18nText} from 'sanity'\n\nimport {Pane} from '../../components'\nimport {_DEBUG} from '../../constants'\nimport {type BaseStructureToolPaneProps} from '../types'\nimport {ListPaneContent} from './ListPaneContent'\nimport {ListPaneHeader} from './ListPaneHeader'\n\ntype ListPaneProps = BaseStructureToolPaneProps<'list'>\n\n/**\n * @internal\n */\nexport function ListPane(props: ListPaneProps) {\n  const {childItemId, index, isActive, isSelected, pane, paneKey} = props\n\n  const {defaultLayout, displayOptions, items, menuItems, menuItemGroups} = pane\n  const showIcons = displayOptions?.showIcons !== false\n  const {title} = useI18nText(pane)\n\n  return (\n    <Pane\n      currentMaxWidth={350}\n      data-testid=\"structure-tool-list-pane\"\n      data-ui=\"ListPane\"\n      id={paneKey}\n      maxWidth={640}\n      minWidth={320}\n      selected={isSelected}\n    >\n      {_DEBUG && (\n        <Card padding={4} tone=\"transparent\">\n          <Code>{pane.source || '(none)'}</Code>\n        </Card>\n      )}\n\n      <ListPaneHeader\n        index={index}\n        menuItems={menuItems}\n        menuItemGroups={menuItemGroups}\n        title={title}\n      />\n\n      <ListPaneContent\n        key={paneKey}\n        childItemId={childItemId}\n        isActive={isActive}\n        items={items}\n        layout={defaultLayout}\n        showIcons={showIcons}\n        title={title}\n      />\n    </Pane>\n  )\n}\n"],
  "mappings": "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",
  "names": ["DividerContainer", "styled", "Box", "Divider", "hr", "DividerTitle", "Text", "DividerItem", "t0", "$", "_c", "item", "title", "dividerTitle", "useI18nText", "t1", "t2", "Symbol", "for", "t3", "ListPaneContent", "props", "childItemId", "items", "isActive", "layout", "showIcons", "collapsed", "layoutCollapsed", "usePaneLayout", "filter", "_temp", "getI18nText", "useGetI18nText", "itemIndex", "find", "_", "i", "type", "getItemDisabled", "item_0", "itemShowIcon", "displayOptions", "showIcon", "shouldShowIconForItem", "item_1", "ctx", "virtualIndex", "itemIndex_0", "pressed", "id", "selected", "value", "_id", "schemaType", "_type", "name", "undefined", "icon", "renderItem", "t4", "t5", "length", "t6", "ListPaneHeader", "index", "menuItems", "menuItemGroups", "features", "useStructureTool", "isLast", "usePane", "tabIndex", "backButton", "BackLink", "ArrowLeftIcon", "content", "ListPane", "isSelected", "pane", "paneKey", "defaultLayout", "source", "_DEBUG"]
}
