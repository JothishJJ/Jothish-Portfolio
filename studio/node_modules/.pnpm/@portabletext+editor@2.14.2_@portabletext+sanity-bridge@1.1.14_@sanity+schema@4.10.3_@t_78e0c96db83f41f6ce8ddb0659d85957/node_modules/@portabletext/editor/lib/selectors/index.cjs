"use strict";
Object.defineProperty(exports, "__esModule", { value: !0 });
var selector_isActiveStyle = require("../_chunks-cjs/selector.is-active-style.cjs"), util_getTextBlockText = require("../_chunks-cjs/util.get-text-block-text.cjs"), schema = require("@portabletext/schema"), types = require("@sanity/types"), selector_getSelectionText = require("../_chunks-cjs/selector.get-selection-text.cjs"), selector_getTextBefore = require("../_chunks-cjs/selector.get-text-before.cjs");
const getAnchorBlock = (snapshot) => {
  if (!snapshot.context.selection)
    return;
  const key = util_getTextBlockText.getBlockKeyFromSelectionPoint(snapshot.context.selection.anchor), index = key ? snapshot.blockIndexMap.get(key) : void 0, node = index !== void 0 ? snapshot.context.value.at(index) : void 0;
  return node && key ? {
    node,
    path: [{
      _key: key
    }]
  } : void 0;
}, getAnchorTextBlock = (snapshot) => {
  const anchorBlock = getAnchorBlock(snapshot);
  return anchorBlock && schema.isTextBlock(snapshot.context, anchorBlock.node) ? {
    node: anchorBlock.node,
    path: anchorBlock.path
  } : void 0;
}, getAnchorChild = (snapshot) => {
  if (!snapshot.context.selection)
    return;
  const anchorBlock = getAnchorTextBlock(snapshot);
  if (!anchorBlock)
    return;
  const key = util_getTextBlockText.getChildKeyFromSelectionPoint(snapshot.context.selection.anchor), node = key ? anchorBlock.node.children.find((span) => span._key === key) : void 0;
  return node && key ? {
    node,
    path: [...anchorBlock.path, "children", {
      _key: key
    }]
  } : void 0;
}, getAnchorSpan = (snapshot) => {
  const anchorChild = getAnchorChild(snapshot);
  return anchorChild && types.isPortableTextSpan(anchorChild.node) ? {
    node: anchorChild.node,
    path: anchorChild.path
  } : void 0;
}, getBlockOffsets = (snapshot) => {
  if (!snapshot.context.selection)
    return;
  const selectionStartPoint = selector_getSelectionText.getSelectionStartPoint(snapshot), selectionEndPoint = selector_isActiveStyle.getSelectionEndPoint(snapshot);
  if (!selectionStartPoint || !selectionEndPoint)
    return;
  const start = util_getTextBlockText.spanSelectionPointToBlockOffset({
    context: snapshot.context,
    selectionPoint: selectionStartPoint
  }), end = util_getTextBlockText.spanSelectionPointToBlockOffset({
    context: snapshot.context,
    selectionPoint: selectionEndPoint
  });
  return start && end ? {
    start,
    end
  } : void 0;
};
function getListIndex({
  path
}) {
  return (snapshot) => {
    const selection = {
      anchor: {
        path,
        offset: 0
      },
      focus: {
        path,
        offset: 0
      }
    }, focusTextBlock = selector_getSelectionText.getFocusTextBlock({
      ...snapshot,
      context: {
        ...snapshot.context,
        selection
      }
    });
    if (!focusTextBlock || focusTextBlock.node.listItem === void 0 || focusTextBlock.node.level === void 0)
      return;
    const targetListItem = focusTextBlock.node.listItem, targetLevel = focusTextBlock.node.level, targetKey = focusTextBlock.node._key, targetIndex = snapshot.blockIndexMap.get(targetKey);
    if (targetIndex === void 0)
      return;
    let listIndex = 1;
    for (let i = targetIndex - 1; i >= 0; i--) {
      const block = snapshot.context.value[i];
      if (!schema.isTextBlock(snapshot.context, block) || block.listItem === void 0 || block.level === void 0 || block.listItem !== targetListItem || block.level < targetLevel)
        break;
      block.level === targetLevel && listIndex++;
    }
    return listIndex;
  };
}
const getNextInlineObjects = (snapshot) => {
  const focusTextBlock = selector_getSelectionText.getFocusTextBlock(snapshot), selectionEndPoint = selector_isActiveStyle.getSelectionEndPoint(snapshot), selectionEndPointChildKey = selectionEndPoint && types.isKeySegment(selectionEndPoint.path[2]) ? selectionEndPoint.path[2]._key : void 0;
  if (!focusTextBlock || !selectionEndPointChildKey)
    return [];
  let endPointChildFound = !1;
  const inlineObjects = [];
  for (const child of focusTextBlock.node.children) {
    if (child._key === selectionEndPointChildKey) {
      endPointChildFound = !0;
      continue;
    }
    if (!schema.isSpan(snapshot.context, child) && endPointChildFound) {
      inlineObjects.push({
        node: child,
        path: [...focusTextBlock.path, "children", {
          _key: child._key
        }]
      });
      break;
    }
  }
  return inlineObjects;
}, getPreviousInlineObjects = (snapshot) => {
  const focusTextBlock = selector_getSelectionText.getFocusTextBlock(snapshot), selectionStartPoint = selector_getSelectionText.getSelectionStartPoint(snapshot), selectionStartPointChildKey = selectionStartPoint && types.isKeySegment(selectionStartPoint.path[2]) ? selectionStartPoint.path[2]._key : void 0;
  if (!focusTextBlock || !selectionStartPointChildKey)
    return [];
  const inlineObjects = [];
  for (const child of focusTextBlock.node.children) {
    if (child._key === selectionStartPointChildKey)
      break;
    schema.isSpan(snapshot.context, child) || inlineObjects.push({
      node: child,
      path: [...focusTextBlock.path, "children", {
        _key: child._key
      }]
    });
  }
  return inlineObjects;
}, getSelectedSlice = (snapshot) => selector_getSelectionText.getSelectedValue(snapshot), getSelection = (snapshot) => snapshot.context.selection, getSelectionEndChild = (snapshot) => {
  const endPoint = util_getTextBlockText.getSelectionEndPoint(snapshot.context.selection);
  if (endPoint)
    return selector_getSelectionText.getFocusChild({
      ...snapshot,
      context: {
        ...snapshot.context,
        selection: {
          anchor: endPoint,
          focus: endPoint
        }
      }
    });
}, getSelectionStartChild = (snapshot) => {
  const startPoint = util_getTextBlockText.getSelectionStartPoint(snapshot.context.selection);
  if (startPoint)
    return selector_getSelectionText.getFocusChild({
      ...snapshot,
      context: {
        ...snapshot.context,
        selection: {
          anchor: startPoint,
          focus: startPoint
        }
      }
    });
}, getValue = (snapshot) => snapshot.context.value;
exports.getActiveAnnotations = selector_isActiveStyle.getActiveAnnotations;
exports.getActiveListItem = selector_isActiveStyle.getActiveListItem;
exports.getActiveStyle = selector_isActiveStyle.getActiveStyle;
exports.getCaretWordSelection = selector_isActiveStyle.getCaretWordSelection;
exports.getFirstBlock = selector_isActiveStyle.getFirstBlock;
exports.getFocusBlockObject = selector_isActiveStyle.getFocusBlockObject;
exports.getFocusInlineObject = selector_isActiveStyle.getFocusInlineObject;
exports.getFocusListBlock = selector_isActiveStyle.getFocusListBlock;
exports.getLastBlock = selector_isActiveStyle.getLastBlock;
exports.getMarkState = selector_isActiveStyle.getMarkState;
exports.getNextBlock = selector_isActiveStyle.getNextBlock;
exports.getNextInlineObject = selector_isActiveStyle.getNextInlineObject;
exports.getPreviousBlock = selector_isActiveStyle.getPreviousBlock;
exports.getSelectedBlocks = selector_isActiveStyle.getSelectedBlocks;
exports.getSelectedSpans = selector_isActiveStyle.getSelectedSpans;
exports.getSelectedTextBlocks = selector_isActiveStyle.getSelectedTextBlocks;
exports.getSelectionEndBlock = selector_isActiveStyle.getSelectionEndBlock;
exports.getSelectionEndPoint = selector_isActiveStyle.getSelectionEndPoint;
exports.getSelectionStartBlock = selector_isActiveStyle.getSelectionStartBlock;
exports.getTrimmedSelection = selector_isActiveStyle.getTrimmedSelection;
exports.isActiveAnnotation = selector_isActiveStyle.isActiveAnnotation;
exports.isActiveDecorator = selector_isActiveStyle.isActiveDecorator;
exports.isActiveListItem = selector_isActiveStyle.isActiveListItem;
exports.isActiveStyle = selector_isActiveStyle.isActiveStyle;
exports.isAtTheEndOfBlock = selector_isActiveStyle.isAtTheEndOfBlock;
exports.isAtTheStartOfBlock = selector_isActiveStyle.isAtTheStartOfBlock;
exports.isOverlappingSelection = selector_isActiveStyle.isOverlappingSelection;
exports.isPointAfterSelection = selector_isActiveStyle.isPointAfterSelection;
exports.isPointBeforeSelection = selector_isActiveStyle.isPointBeforeSelection;
exports.isSelectingEntireBlocks = selector_isActiveStyle.isSelectingEntireBlocks;
exports.getFocusBlock = selector_getSelectionText.getFocusBlock;
exports.getFocusChild = selector_getSelectionText.getFocusChild;
exports.getFocusSpan = selector_getSelectionText.getFocusSpan;
exports.getFocusTextBlock = selector_getSelectionText.getFocusTextBlock;
exports.getPreviousInlineObject = selector_getSelectionText.getPreviousInlineObject;
exports.getSelectedValue = selector_getSelectionText.getSelectedValue;
exports.getSelectionStartPoint = selector_getSelectionText.getSelectionStartPoint;
exports.getSelectionText = selector_getSelectionText.getSelectionText;
exports.isSelectionCollapsed = selector_getSelectionText.isSelectionCollapsed;
exports.isSelectionExpanded = selector_getSelectionText.isSelectionExpanded;
exports.getBlockTextBefore = selector_getTextBefore.getBlockTextBefore;
exports.getAnchorBlock = getAnchorBlock;
exports.getAnchorChild = getAnchorChild;
exports.getAnchorSpan = getAnchorSpan;
exports.getAnchorTextBlock = getAnchorTextBlock;
exports.getBlockOffsets = getBlockOffsets;
exports.getListIndex = getListIndex;
exports.getNextInlineObjects = getNextInlineObjects;
exports.getPreviousInlineObjects = getPreviousInlineObjects;
exports.getSelectedSlice = getSelectedSlice;
exports.getSelection = getSelection;
exports.getSelectionEndChild = getSelectionEndChild;
exports.getSelectionStartChild = getSelectionStartChild;
exports.getValue = getValue;
//# sourceMappingURL=index.cjs.map
