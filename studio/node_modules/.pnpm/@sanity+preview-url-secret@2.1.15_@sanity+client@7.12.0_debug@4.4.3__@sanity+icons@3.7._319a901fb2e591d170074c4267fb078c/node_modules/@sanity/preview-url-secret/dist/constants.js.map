{"version":3,"file":"constants.js","sources":["../src/constants.ts"],"sourcesContent":["import type {\n  PreviewUrlSecretSchemaIdPrefix,\n  PreviewUrlSecretSchemaType,\n  PreviewUrlSecretSchemaTypeSingleton,\n  VercelProtectionBypassSchemaType,\n} from './types'\n\n/** @internal */\nexport const schemaType = 'sanity.previewUrlSecret' satisfies PreviewUrlSecretSchemaType\n\n/** @internal */\nexport const schemaIdPrefix = 'sanity-preview-url-secret' satisfies PreviewUrlSecretSchemaIdPrefix\n\n/** @internal */\nexport const schemaIdSingleton = `${schemaIdPrefix}.share-access` as const\n\n/** @internal */\nexport const schemaTypeSingleton =\n  'sanity.previewUrlShareAccess' satisfies PreviewUrlSecretSchemaTypeSingleton\n\n/** @internal */\nexport const apiVersion = '2025-02-19'\n\n/** @internal */\nexport const urlSearchParamPreviewSecret = 'sanity-preview-secret'\n\n/** @internal */\nexport const urlSearchParamPreviewPathname = 'sanity-preview-pathname'\n\n/** @internal */\nexport const urlSearchParamPreviewPerspective = 'sanity-preview-perspective'\n\n/** @internal */\nexport const urlSearchParamVercelProtectionBypass = 'x-vercel-protection-bypass'\n\n/** @internal */\nexport const urlSearchParamVercelSetBypassCookie = 'x-vercel-set-bypass-cookie'\n\n/** @internal */\nexport const isDev = process.env.NODE_ENV === 'development'\n\n/**\n * updated within the hour, if it's older it'll create a new secret or return null\n * @internal\n */\nexport const SECRET_TTL = 60 * 60\n\n/** @internal */\nexport const fetchSecretQuery =\n  /* groq */ `*[_type == \"${schemaType}\" && secret == $secret && dateTime(_updatedAt) > dateTime(now()) - ${SECRET_TTL}][0]{\n    _id,\n    _updatedAt,\n    secret,\n    studioUrl,\n  }` as const\n\n/** @internal */\nexport const fetchSharedAccessQuery =\n  /* groq */ `*[_id == \"${schemaIdSingleton}\" && _type == \"${schemaTypeSingleton}\"][0].secret` as const\n\n/** @internal */\nexport const fetchSharedAccessSecretQuery =\n  /* groq */ `*[_id == \"${schemaIdSingleton}\" && _type == \"${schemaTypeSingleton}\" && secret == $secret][0]{\n  secret,\n  studioUrl,\n}` as const\n\n/** @internal */\nexport const deleteExpiredSecretsQuery =\n  /* groq */ `*[_type == \"${schemaType}\" && dateTime(_updatedAt) <= dateTime(now()) - ${SECRET_TTL}]` as const\n\n/** @internal */\nexport const vercelProtectionBypassSchemaType =\n  'sanity.vercelProtectionBypass' satisfies VercelProtectionBypassSchemaType\n\n/** @internal */\nexport const vercelProtectionBypassSchemaId = `${schemaIdPrefix}.vercel-protection-bypass` as const\n\n/** @internal */\nexport const fetchVercelProtectionBypassSecret =\n  /* groq */ `*[_id == \"${vercelProtectionBypassSchemaId}\" && _type == \"${vercelProtectionBypassSchemaType}\"][0].secret` as const\n\n/**\n * Used for tagging `client.fetch` queries\n * @internal\n */\nexport const tag = 'sanity.preview-url-secret' as const\n\n/** @internal */\nexport const perspectiveCookieName = 'sanity-preview-perspective'\n\nexport type {VercelSetBypassCookieValue} from './types'\n"],"names":[],"mappings":"AAQO,MAAM,aAAa,2BAGb,iBAAiB,6BAGjB,oBAAoB,GAAG,cAAc,iBAGrC,sBACX,gCAGW,aAAa,cAGb,8BAA8B,yBAG9B,gCAAgC,2BAGhC,mCAAmC,8BAGnC,uCAAuC,8BAGvC,sCAAsC,8BAGtC,QAAQ,QAAQ,IAAI,aAAa,eAMjC,aAAa,MAGb;AAAA;AAAA,EACA,eAAe,UAAU,sEAAsE,UAAU;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAQzG;AAAA;AAAA,EACA,aAAa,iBAAiB,kBAAkB,mBAAmB;AAAA,GAGnE;AAAA;AAAA,EACA,aAAa,iBAAiB,kBAAkB,mBAAmB;AAAA;AAAA;AAAA;AAAA,GAMnE;AAAA;AAAA,EACA,eAAe,UAAU,kDAAkD,UAAU;AAAA,GAGrF,mCACX,iCAGW,iCAAiC,GAAG,cAAc,6BAGlD;AAAA;AAAA,EACA,aAAa,8BAA8B,kBAAkB,gCAAgC;AAAA,GAM7F,MAAM,6BAGN,wBAAwB;"}