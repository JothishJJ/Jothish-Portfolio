"use strict";
Object.defineProperty(exports, "__esModule", { value: !0 });
var constants = require("./constants.cjs");
async function enableVercelProtectionBypass(client, secret) {
  const patch = client.patch(constants.vercelProtectionBypassSchemaId).set({ secret });
  await client.transaction().createIfNotExists({ _id: constants.vercelProtectionBypassSchemaId, _type: constants.vercelProtectionBypassSchemaType }).patch(patch).commit({ tag: constants.tag });
}
async function disableVercelProtectionBypass(client) {
  const patch = client.patch(constants.vercelProtectionBypassSchemaId).set({ secret: null });
  await client.transaction().createIfNotExists({ _id: constants.vercelProtectionBypassSchemaId, _type: constants.vercelProtectionBypassSchemaType }).patch(patch).commit({ tag: constants.tag });
}
function subcribeToVercelProtectionBypass(client, onChange) {
  let controller = new AbortController(), usedTags = [];
  async function fetchSecret(lastLiveEventId, signal) {
    const { result, syncTags } = await client.fetch(
      constants.fetchVercelProtectionBypassSecret,
      {},
      {
        filterResponse: !1,
        lastLiveEventId,
        tag: "preview-url-secret.fetch-vercel-bypass-protection-secret"
      }
    );
    Array.isArray(syncTags) && (usedTags = syncTags), signal.aborted || onChange(result);
  }
  const subscription = client.live.events().subscribe({
    next: (event) => {
      event.type === "message" && (controller.abort(), controller = new AbortController(), event.tags.some((tag2) => usedTags.includes(tag2)) && fetchSecret(event.id, controller.signal));
    },
    // eslint-disable-next-line no-console
    error: (reason) => console.error(reason)
  });
  return fetchSecret(null, controller.signal), () => {
    subscription.unsubscribe(), controller.abort();
  };
}
exports.disableVercelProtectionBypass = disableVercelProtectionBypass;
exports.enableVercelProtectionBypass = enableVercelProtectionBypass;
exports.subcribeToVercelProtectionBypass = subcribeToVercelProtectionBypass;
//# sourceMappingURL=toggle-vercel-protection-bypass.cjs.map
