{"version":3,"file":"without-secret-search-params.js","sources":["../src/withoutSecretSearchParams.ts"],"sourcesContent":["import {\n  urlSearchParamPreviewPathname,\n  urlSearchParamPreviewPerspective,\n  urlSearchParamPreviewSecret,\n  urlSearchParamVercelProtectionBypass,\n  urlSearchParamVercelSetBypassCookie,\n} from './constants'\n\n/** @alpha */\nexport function withoutSecretSearchParams(url: URL): URL {\n  const newUrl = new URL(url)\n  const {searchParams} = newUrl\n  searchParams.delete(urlSearchParamPreviewPathname)\n  searchParams.delete(urlSearchParamPreviewSecret)\n  searchParams.delete(urlSearchParamPreviewPerspective)\n  searchParams.delete(urlSearchParamVercelProtectionBypass)\n  searchParams.delete(urlSearchParamVercelSetBypassCookie)\n  return newUrl\n}\n\n/** @alpha */\nexport function hasSecretSearchParams(url: URL): boolean {\n  return url.searchParams.has(urlSearchParamPreviewSecret)\n}\n\n/** @alpha */\nexport function setSecretSearchParams(\n  url: URL,\n  secret: string | null,\n  redirectTo: string,\n  perspective: string,\n): URL {\n  const newUrl = new URL(url)\n  const {searchParams} = newUrl\n  // Preview secrets are added when preview mode is setup with an `enable` endpoint\n  if (secret) {\n    searchParams.set(urlSearchParamPreviewSecret, secret)\n    searchParams.set(urlSearchParamPreviewPathname, redirectTo)\n  }\n  // Always set the perspective that's being used\n  searchParams.set(urlSearchParamPreviewPerspective, perspective)\n\n  return newUrl\n}\n"],"names":[],"mappings":";AASO,SAAS,0BAA0B,KAAe;AACvD,QAAM,SAAS,IAAI,IAAI,GAAG,GACpB,EAAC,iBAAgB;AACvB,SAAA,aAAa,OAAO,6BAA6B,GACjD,aAAa,OAAO,2BAA2B,GAC/C,aAAa,OAAO,gCAAgC,GACpD,aAAa,OAAO,oCAAoC,GACxD,aAAa,OAAO,mCAAmC,GAChD;AACT;AAGO,SAAS,sBAAsB,KAAmB;AACvD,SAAO,IAAI,aAAa,IAAI,2BAA2B;AACzD;AAGO,SAAS,sBACd,KACA,QACA,YACA,aACK;AACL,QAAM,SAAS,IAAI,IAAI,GAAG,GACpB,EAAC,iBAAgB;AAEvB,SAAI,WACF,aAAa,IAAI,6BAA6B,MAAM,GACpD,aAAa,IAAI,+BAA+B,UAAU,IAG5D,aAAa,IAAI,kCAAkC,WAAW,GAEvD;AACT;"}