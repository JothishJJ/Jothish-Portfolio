import type { Blueprint } from '@sanity/blueprints-parser';
export type ScopeType = 'organization' | 'project';
/** Result utility type */
export type Result<T, E = string> = {
    ok: true;
    value: T;
} | {
    ok: false;
    error: E;
};
/** @internal */
export interface AuthParams {
    token: string;
    scopeType: ScopeType;
    scopeId: string;
}
/** @internal */
export interface GroqRule {
    on: Array<string>;
    filter?: string;
    includeDrafts?: boolean;
    includeAllVersions?: boolean;
    projection?: string;
    resource?: {
        type: 'dataset';
        id: string;
    };
}
/** @internal */
export interface Resource {
    name: string;
    type: string;
    id?: string;
    externalId?: string;
    displayName?: string;
}
export interface DeployedResource extends Resource {
    id: string;
    externalId: string;
}
export declare function isLocalFunctionResource(r: Resource): r is FunctionResource;
/** @internal */
export interface FunctionResource extends Resource {
    src?: string;
    autoResolveDeps?: boolean;
    transpile?: boolean;
    memory?: number;
    timeout?: number;
    env?: Record<string, string>;
    event?: GroqRule;
}
export interface CorsResource extends Resource {
    origin?: string;
}
export interface Stack {
    id: string;
    name: string;
    displayName: string;
    scopeType: ScopeType;
    scopeId: string;
    resources: Array<DeployedResource>;
    createdAt?: string;
    updatedAt?: string;
    recentOperation?: StackOperation;
}
/** @internal */
export interface StackOperation {
    id: string;
    status: string;
    createdAt?: string;
    completedAt?: string;
}
/** @internal */
export interface StackMutation {
    name: string;
    scopeType: ScopeType;
    scopeId: string;
    document: Blueprint;
    useProjectBasedId?: boolean;
}
/** @internal */
export interface BuildPayloadOptions {
    data?: string;
    file?: string;
    timeout?: number;
}
/** @internal */
export interface InvokePayloadOptions {
    payload?: Record<string, unknown>;
    event: EventType;
    before: Record<string, unknown> | null;
    after: Record<string, unknown> | null;
}
export type EventType = 'create' | 'update' | 'delete';
export declare function isEventType(arg: string): arg is EventType;
/** @internal */
export interface InvokeContextOptions {
    clientOptions: {
        apiVersion?: string;
        dataset?: string;
        projectId?: string;
        token?: string;
    };
}
/** @internal */
export interface InvokeExecutionOptions {
    forceColor?: boolean;
    timeout?: number;
}
/** @internal */
export interface InvocationResponse {
    error: undefined | unknown;
    json: JsonInvocationResponse | undefined;
    logs: string | undefined;
    timings?: Record<string, number>;
}
/** @internal */
export interface JsonInvocationResponse {
    data: Record<string, unknown> | undefined;
}
/** @internal */
export interface BlueprintLog {
    timestamp: string;
    message: string;
    stackId: string;
    level: string;
    metadata?: Record<string, unknown>;
}
/** @internal */
export interface FunctionLog {
    time: string;
    requestId: string;
    level: string;
    message: string;
}
/** @internal */
export declare enum BlueprintParserErrorType {
    InvalidProperty = "invalid_property",
    InvalidVersion = "invalid_version",
    InvalidType = "invalid_type",
    MissingRequiredProperty = "missing_required_property",
    DuplicateName = "duplicate_name",
    InvalidFormat = "invalid_format",
    InvalidValue = "invalid_value",
    JsonValidationError = "json_validation_error",
    InvalidInput = "invalid_input",
    MissingParameter = "missing_parameter"
}
/** @internal */
export interface BlueprintParserError {
    message: string;
    type: string;
}
