/* globals customElements document */
/* eslint-disable unicorn/prefer-dom-node-text-content */

import {
  basicSetup,
  EditorState,
  EditorView,
  json,
  prettyBytes,
  prettyMilliseconds,
} from '../vendor/vendor.bundle.js'
import {ApiBaseElement} from './api-base.js'
import {sanityCodeMirrorTheme} from './codemirror-theme.js'

const template = `<div class="border-left border-top border-top-none-l h-100 gutter-gradient" style='height: 100%; max-height: 100%; overflow: hidden; display:grid;grid-template-rows: auto 1fr; grid-template-columns: 1fr;' >
    <!-- Response Section -->
        <div style='overflow-y:scroll; min-height: 0;'>
            <div style='padding-bottom: var(--space-6)'>
            <h3 class="config-label" style='display: none; margin-top: 0;'>Response</h3>
            <header class='flex space-between'>
              <dl class='slab-stat'>
                <dt style='white-space:nowrap;'>Response size</dt>
                <dd id="size" style='white-space:nowrap;'></dd>
              </dl>
              <dl class='slab-stat'>
                <dt>Time</dt>
                <dd><time id="time" datetime=""></time></dd>
              </dl>
          </header>
          <div id="response" name="response" class="cm-s-dracula"></div>
        </div>
      </div>
</div>
`
class ResponsePanel extends ApiBaseElement {
  updateResponse = ({result}) => {
    if (!result) return

    const {error, json, timings} = result
    if (!error) {
      const transaction = this.api.store.response.state.update({
        changes: {
          from: 0,
          insert: JSON.stringify(json, null, 2),
          to: this.api.store.response.state.doc.length,
        },
      })
      this.api.store.response.dispatch(transaction)

      this.size.innerText = json ? prettyBytes(JSON.stringify(json).length) : ''

      if (timings && 'bundle' in timings && 'execute' in timings) {
        const bundleTime = prettyMilliseconds(timings.bundle)
        const executeTime = prettyMilliseconds(timings.execute)
        this.time.innerText = `${executeTime} (+${bundleTime} bundle time)`
        this.time.dateTime = `PT${executeTime / 1000}S`
      } else if (timings && 'execute' in timings) {
        this.time.innerText = prettyMilliseconds(timings.execute)
        this.time.dateTime = `PT${timings.execute / 1000}S`
      } else {
        this.time.innerText = ''
        this.time.dateTime = ''
      }
    } else {
      const transaction = this.api.store.response.state.update({
        changes: {from: 0, to: this.api.store.response.state.doc.length, insert: ''},
      })
      this.api.store.response.dispatch(transaction)
      this.size.innerText = ''
      this.time.innerText = ''
      this.time.removeAttribute('datetime')
    }
  }

  connectedCallback() {
    this.innerHTML = template
    this.response = this.querySelector('#response')
    this.size = this.querySelector('#size')
    this.time = this.querySelector('#time')
    if (this.api) {
      this.api.subscribe(this.updateResponse, ['result'])
      if (this.api.store.result) {
        this.updateResponse({result: this.api.store.result})
      }
    } else {
      console.error('API context not available for response-panel on connect.')
    }

    this.api.store.response = new EditorView({
      doc: '\n\n\n\n',
      extensions: [basicSetup, json(), sanityCodeMirrorTheme, EditorState.readOnly.of(true)],
      parent: this.response,
    })
  }

  disconnectedCallback() {
    if (this.api) {
      this.api.unsubscribe(this.updateResponse)
    }
  }
}

customElements.define('response-panel', ResponsePanel)
