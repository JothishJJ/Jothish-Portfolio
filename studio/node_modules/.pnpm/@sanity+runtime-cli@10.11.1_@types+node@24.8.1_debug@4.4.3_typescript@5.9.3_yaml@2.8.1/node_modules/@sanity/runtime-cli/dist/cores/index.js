import { readLocalBlueprint } from '../actions/blueprints/blueprint.js';
import { getStack } from '../actions/blueprints/stacks.js';
import { presentBlueprintParserErrors } from '../utils/display/errors.js';
import { niceId } from '../utils/display/presenters.js';
import { validTokenOrErrorMessage } from '../utils/validated-token.js';
export * as blueprintsCores from './blueprints/index.js';
export * as functionsCores from './functions/index.js';
export async function initBlueprintConfig({ bin, log, token, validateToken = true, }) {
    let checkedToken = token;
    if (!token || (token && validateToken)) {
        const tokenCheck = await validTokenOrErrorMessage(token);
        if (!tokenCheck.ok) {
            return { ok: false, error: tokenCheck.error.message };
        }
        checkedToken = tokenCheck.value;
    }
    if (!checkedToken) {
        return { ok: false, error: 'A valid token is required but was not provided.' };
    }
    const blueprint = await readLocalBlueprint();
    if (blueprint.errors.length > 0) {
        log(presentBlueprintParserErrors(blueprint.errors));
        return { ok: false, error: 'Blueprint file contains errors.' };
    }
    return {
        ok: true,
        value: {
            bin,
            blueprint,
            log,
            token: checkedToken,
        },
    };
}
export async function initDeployedBlueprintConfig(config) {
    if (!config.blueprint) {
        const blueprintResult = await initBlueprintConfig(config);
        if (!blueprintResult.ok)
            return blueprintResult;
        config.blueprint = blueprintResult.value.blueprint;
        config.token = blueprintResult.value.token;
    }
    const { projectId, stackId } = config.blueprint;
    if (!(projectId && stackId)) {
        config.log(`Run \`${config.bin} blueprints config --edit --test\` to update your config`);
        if (!projectId)
            return { ok: false, error: 'Missing Project configuration for Blueprint' };
        if (!stackId)
            return { ok: false, error: 'Missing deployment configuration for Blueprint' };
    }
    const auth = { token: config.token, scopeType: 'project', scopeId: projectId };
    const stackResponse = await getStack({ stackId, auth });
    if (!stackResponse.ok) {
        config.log(`Could not retrieve deployment info for ${niceId(stackId)}. Was it destroyed?`);
        config.log(`Run \`${config.bin} blueprints config --edit --test\` to update your config`);
        return { ok: false, error: 'Missing deployment' };
    }
    return {
        ok: true,
        value: {
            bin: config.bin,
            log: config.log,
            blueprint: config.blueprint,
            token: config.token,
            projectId,
            stackId,
            auth,
            deployedStack: stackResponse.stack,
        },
    };
}
