import { BlueprintParserErrorType } from '../types.js';
export function validateFunctionName(name) {
    // must be 3+ characters, no special characters, no spaces, allow _ and -
    return /^[a-zA-Z0-9][a-zA-Z0-9_-]{2,}$/.test(name);
}
const validFunctionEventNames = ['publish', 'create', 'update', 'delete'];
export function validateFunctionResource(resource) {
    const { name: fnName } = resource;
    const msgPrefix = `Function "${fnName}":`;
    const errors = [];
    if (!validateFunctionName(resource.name)) {
        errors.push({
            message: `${msgPrefix} Function name must be at least 3 characters, start with a letter or number, and only contain letters, numbers, _ or -`,
            type: BlueprintParserErrorType.InvalidProperty,
        });
    }
    if (!resource.type.startsWith('sanity.function.')) {
        errors.push({
            message: `${msgPrefix} Resource type must start with "sanity.function."`,
            type: BlueprintParserErrorType.InvalidType,
        });
    }
    if (!resource.event || !Array.isArray(resource.event.on) || resource.event.on.length === 0) {
        errors.push({
            message: `${msgPrefix} event.on must be a non-empty array`,
            type: BlueprintParserErrorType.MissingRequiredProperty,
        });
    }
    else if (!resource.event.on.every((evt) => validFunctionEventNames.includes(evt))) {
        errors.push({
            message: `${msgPrefix} event.on values must be one of ${validFunctionEventNames.map((e) => `"${e}"`).join(', ')}`,
            type: BlueprintParserErrorType.InvalidValue,
        });
    }
    if (resource.event?.filter && typeof resource.event.filter !== 'string') {
        errors.push({
            message: `${msgPrefix} event.filter must be a string`,
            type: BlueprintParserErrorType.InvalidType,
        });
    }
    if (resource.event?.projection && typeof resource.event.projection !== 'string') {
        errors.push({
            message: `${msgPrefix} event.projection must be a string`,
            type: BlueprintParserErrorType.InvalidType,
        });
    }
    if (resource.event?.includeDrafts && typeof resource.event.includeDrafts !== 'boolean') {
        errors.push({
            message: `${msgPrefix} event.includeDrafts must be a boolean`,
            type: BlueprintParserErrorType.InvalidType,
        });
    }
    if (resource.event?.includeAllVersions &&
        typeof resource.event.includeAllVersions !== 'boolean') {
        errors.push({
            message: `${msgPrefix} event.includeAllVersions must be a boolean`,
            type: BlueprintParserErrorType.InvalidType,
        });
    }
    if (resource.event?.resource) {
        if (!resource.event.resource.type || resource.event.resource.type !== 'dataset') {
            errors.push({
                message: `${msgPrefix} event.resource.type must be "dataset"`,
                type: BlueprintParserErrorType.InvalidType,
            });
        }
        // Ensure exactly one period is passed into the ID to conform to the format <projectId>.<datasetName>
        if (!resource.event.resource.id || resource.event.resource.id.split('.').length !== 2) {
            errors.push({
                message: `${msgPrefix} event.resource.id must be of the form <projectId>.<datasetName>. <datasetName> can be "*" to signify "all datasets in project with ID <projectId>."`,
                type: BlueprintParserErrorType.InvalidFormat,
            });
        }
        // TODO: validate the project ID and dataset names exist by making an API call?
    }
    if (resource.memory !== undefined) {
        if (!Number.isInteger(resource.memory)) {
            errors.push({
                message: `${msgPrefix} memory must be an integer`,
                type: BlueprintParserErrorType.InvalidType,
            });
        }
        else if (resource.memory < 1 || resource.memory > 10) {
            errors.push({
                message: `${msgPrefix} memory must be between 1 and 10 (GB)`,
                type: BlueprintParserErrorType.InvalidValue,
            });
        }
    }
    if (resource.timeout !== undefined) {
        if (!Number.isInteger(resource.timeout)) {
            errors.push({
                message: `${msgPrefix} timeout must be an integer`,
                type: BlueprintParserErrorType.InvalidType,
            });
        }
        else if (resource.timeout < 1 || resource.timeout > 900) {
            errors.push({
                message: `${msgPrefix} timeout must be between 1 and 900 (seconds)`,
                type: BlueprintParserErrorType.InvalidValue,
            });
        }
    }
    if (resource.env !== undefined) {
        if (typeof resource.env !== 'object') {
            errors.push({
                message: `${msgPrefix} env must be an object`,
                type: BlueprintParserErrorType.InvalidType,
            });
        }
        else {
            if (!Object.keys(resource.env).every((key) => typeof key === 'string')) {
                errors.push({
                    message: `${msgPrefix} All env keys must be strings`,
                    type: BlueprintParserErrorType.InvalidFormat,
                });
            }
            if (!Object.values(resource.env).every((value) => typeof value === 'string')) {
                errors.push({
                    message: `${msgPrefix} All env values must be strings`,
                    type: BlueprintParserErrorType.InvalidFormat,
                });
            }
        }
    }
    return errors;
}
