/* globals customElements document */
/* eslint-disable unicorn/prefer-dom-node-text-content */

import {basicSetup, EditorState, EditorView, json} from '../vendor/vendor.bundle.js'
import {ApiBaseElement} from './api-base.js'
import {sanityCodeMirrorTheme} from './codemirror-theme.js'

const template = `<div class="border-left" style='overflow-y:scroll; min-height: 0;'>
  <div>
    <h3 class="config-label" style='display: none; margin-top: 0;'>Filter/Projection</h3>
    <header class='flex space-between'>
        <dl class='slab-stat'>
          <dt style='white-space:nowrap;'>Filter/Projection</dt>
        </dl>
    </header>
    <div id="rule" name="rule" class="cm-s-dracula"></div>
  </div>
</div>
`
class RulePanel extends ApiBaseElement {
  updateRule = () => {
    const {functions, rule, selectedIndex} = this.api.store
    const func = functions.find((func) => func.name === selectedIndex)

    if (func.event) {
      const transaction = rule.state.update({
        changes: {
          from: 0,
          insert: JSON.stringify(func.event, null, 2),
          to: rule.state.doc.length,
        },
      })
      rule.dispatch(transaction)
    }
  }

  connectedCallback() {
    this.innerHTML = template
    this.rule = this.querySelector('#rule')

    if (this.api) {
      this.api.subscribe(this.updateRule, ['selectedIndex', 'functions'])
      if (this.api.store.selectedIndex) {
        this.updateRule({selectedIndex: this.api.store.selectedIndex})
      }
    }

    this.api.store.rule = new EditorView({
      doc: '\n\n\n\n',
      extensions: [basicSetup, json(), sanityCodeMirrorTheme, EditorState.readOnly.of(true)],
      parent: this.rule,
    })
  }

  disconnectedCallback() {
    if (this.api) {
      this.api.unsubscribe(this.updateResponse)
    }
  }
}

customElements.define('rule-panel', RulePanel)
