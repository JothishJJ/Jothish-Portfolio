import config from '../../config.js';
const { apiUrl } = config;
export const projectsApiPath = `${apiUrl}v2021-06-07/projects`;
export const orgsApiPath = `${apiUrl}v2021-06-07/organizations`;
export async function listProjects({ token }) {
    const projectsFetch = await fetch(projectsApiPath, {
        method: 'GET',
        headers: {
            Authorization: `Bearer ${token}`,
            'Content-Type': 'application/json',
        },
    });
    const projects = await projectsFetch.json();
    return {
        ok: projectsFetch.ok,
        error: projectsFetch.ok ? null : projects.error?.message,
        projects,
    };
}
export async function groupProjectsByOrganization({ token, }) {
    const projectsResponse = await listProjects({ token });
    if (!projectsResponse.ok) {
        return {
            ok: false,
            error: projectsResponse.error,
            organizations: [],
        };
    }
    const orgsFetch = await fetch(orgsApiPath, {
        method: 'GET',
        headers: { Authorization: `Bearer ${token}`, 'Content-Type': 'application/json' },
    });
    if (!orgsFetch.ok) {
        return {
            ok: false,
            error: orgsFetch.statusText,
            organizations: [],
        };
    }
    const organizations = await orgsFetch.json();
    const orgsWithProjects = organizations.map(({ name, id }) => {
        const projects = projectsResponse.projects.filter((project) => project.organizationId === id);
        return { organization: { name, id }, projects };
    });
    return {
        ok: true,
        error: null,
        organizations: orgsWithProjects,
    };
}
export async function getProject({ token, scopeId, scopeType, }) {
    if (scopeType !== 'project') {
        throw new Error('Scope type must be project');
    }
    const response = await fetch(`${projectsApiPath}/${scopeId}`, {
        method: 'GET',
        headers: { Authorization: `Bearer ${token}`, 'Content-Type': 'application/json' },
    });
    const project = await response.json();
    return {
        ok: response.ok,
        error: response.ok ? null : project.error?.message,
        project,
    };
}
