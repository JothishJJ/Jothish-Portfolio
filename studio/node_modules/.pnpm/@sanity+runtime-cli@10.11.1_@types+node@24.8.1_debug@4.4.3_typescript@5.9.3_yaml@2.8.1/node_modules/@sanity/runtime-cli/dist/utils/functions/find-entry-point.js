import { readFile, stat } from 'node:fs/promises';
import { join, resolve } from 'node:path';
import { cwd } from 'node:process';
/**
 * Resolves the source path to an executable entry file path.
 *
 * If the source path is a directory, it looks for `package.json#main`, then `index.ts`, then `index.js`.
 *
 * @param srcPath - The source path (can be a file or directory).
 * @param displayName - Optional display name for the function, used in error messages.
 * @returns The absolute path to the entry file.
 * @throws If the entry file cannot be determined.
 */
export async function findFunctionEntryPoint(srcPath, displayName) {
    const absolutePath = resolve(cwd(), srcPath);
    let stats;
    try {
        stats = await stat(absolutePath);
    }
    catch (err) {
        throw new Error(`Source path not found or inaccessible: ${srcPath}`, { cause: err });
    }
    if (stats.isFile()) {
        // It's already an entry file path
        return absolutePath;
    }
    if (stats.isDirectory()) {
        // 1. Check package.json#main
        try {
            const pkgJsonPath = join(absolutePath, 'package.json');
            const pkgJsonContent = await readFile(pkgJsonPath, 'utf8');
            const pkgJson = JSON.parse(pkgJsonContent);
            if (pkgJson.main) {
                const mainPath = resolve(absolutePath, pkgJson.main);
                if (await fileExists(mainPath)) {
                    return mainPath;
                }
                // If pkgJson.main points to a non-existent file, we continue checking index files
            }
        }
        catch {
            // Ignore errors (missing package.json, invalid JSON, etc.)
            // Consider warning the user on invalid JSON though?
        }
        // 2. Check index.ts
        const indexTs = join(absolutePath, 'index.ts');
        if (await fileExists(indexTs)) {
            return indexTs;
        }
        // 3. Check index.js
        const indexJs = join(absolutePath, 'index.js');
        if (await fileExists(indexJs)) {
            return indexJs;
        }
        const nameHint = displayName ? ` for function "${displayName}"` : '';
        throw new Error(`Could not determine entry file${nameHint} in directory: ${srcPath}. Looked for package.json#main, index.ts, index.js.`);
    }
    // Should not happen if stat succeeded, but defensively handle
    throw new Error(`Source path is neither a file nor a directory: ${srcPath}`);
}
/**
 * Checks if a file exists and is a file.
 */
async function fileExists(filePath) {
    try {
        const stats = await stat(filePath);
        return stats.isFile();
    }
    catch (err) {
        if (err instanceof Error && 'code' in err && err.code === 'ENOENT') {
            return false;
        }
        throw err; // Re-throw other errors
    }
}
