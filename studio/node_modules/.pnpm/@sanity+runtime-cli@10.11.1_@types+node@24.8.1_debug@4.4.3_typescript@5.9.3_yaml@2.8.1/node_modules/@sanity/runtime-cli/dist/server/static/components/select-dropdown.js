/* globals customElements */
import {ApiBaseElement} from './api-base.js'

const dropdownTemplate = ({label}) => `
<fieldset class="mar-t-sm">
  <label class="slab-text">
    <span style="display: block; margin-bottom: var(--space-1);">${label}</span>
    <div data-ui="Select" style="position: relative; display: inline-block; width: 100%;">
      <select
        data-ui="Select"
        style="
          width: 100%;
          appearance: none;
          -webkit-appearance: none;
          -moz-appearance: none;
          background: transparent;
          color: light-dark(var(--gray-950), var(--gray-300));
          padding-right: 2rem;
          border: 1px solid var(--gray-400);
          border-radius: var(--radius-2);
          height: var(--input-height, 2.5rem);
        "
      ></select>
      <div
        data-as="div"
        data-ui="Box"
        style="
          position: absolute;
          top: 50%;
          right: 0.4rem;
          transform: translateY(-50%);
          pointer-events: none;
          display: flex;
          align-items: center;
          height: 100%;
        "
      >
        <svg
          data-sanity-icon="chevron-down"
          width="1.5rem"
          height="1.5rem"
          viewBox="0 0 25 25"
          fill="none"
          xmlns="http://www.w3.org/2000/svg"
        >
          <path
            d="M17 10L12.5 14.5L8 10"
            stroke="currentColor"
            stroke-width="1.2"
            stroke-linejoin="round"
          ></path>
        </svg>
      </div>
    </div>
  </label>
</fieldset>
`

class SelectDropdown extends ApiBaseElement {
  connectedCallback() {
    this.label = this.getAttribute('label') || 'Select'
    this.storeKey = this.getAttribute('store-key')
    this.selectedKey = this.getAttribute('selected-key')
    this.valueProp = this.getAttribute('value-prop') || 'id'
    this.labelProp = this.getAttribute('label-prop') || 'displayName'
    this.subscribeTo = this.getAttribute('subscribe-to')

    this.innerHTML = dropdownTemplate({label: this.label})
    this.select = this.querySelector('select')
    this.select.addEventListener('change', this.handleSelect)

    this.api.subscribe(this.renderOptions, [this.storeKey])

    if (this.hasAttribute('trigger-fetch')) {
      // e.g. this.api.projects()
      this.api[this.storeKey]?.()
    } else if (this.subscribeTo) {
      this.api.subscribe(this.refreshOnChange, [this.subscribeTo])
    } else {
      this.renderOptions()
    }
  }

  disconnectedCallback() {
    this.select.removeEventListener('change', this.handleSelect)
    this.api.unsubscribe(this.renderOptions)
    if (this.subscribeTo) {
      this.api.unsubscribe(this.refreshOnChange)
    }
  }

  handleSelect = (event) => {
    this.api.store[this.selectedKey] = event.target.value
  }

  renderOptions = () => {
    const items = this.api.store?.[this.storeKey] || []
    const selectedVal = this.api.store?.[this.selectedKey]
    if (items.length === 0) {
      this.select.innerHTML = `<option>No ${this.label}s found</option>`
      return
    }
    this.select.innerHTML = items
      .map((item) => {
        const val = item[this.valueProp]
        const label = item[this.labelProp] ?? val
        const selected = selectedVal === val ? 'selected' : ''
        return `<option value="${val}" ${selected}>${label}</option>`
      })
      .join('')
  }

  refreshOnChange = () => {
    this.api[this.storeKey]?.(this.api.store[this.subscribeTo])
  }
}

customElements.define('select-dropdown', SelectDropdown)
