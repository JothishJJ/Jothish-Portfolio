import { existsSync, mkdirSync, readFileSync, writeFileSync } from 'node:fs';
import { dirname, join } from 'node:path';
import { cwd } from 'node:process';
import { BLUEPRINT_CONFIG_FILE, BLUEPRINT_CONFIG_VERSION, BLUEPRINT_DIR } from '../../config.js';
export function readConfigFile(blueprintFilePath) {
    const blueprintDir = blueprintFilePath ? dirname(blueprintFilePath) : cwd();
    const configPath = join(blueprintDir, BLUEPRINT_DIR, BLUEPRINT_CONFIG_FILE);
    if (existsSync(configPath)) {
        try {
            const config = JSON.parse(readFileSync(configPath, 'utf8'));
            return { configPath, ...config };
        }
        catch {
            return null;
        }
    }
    return null;
}
export function writeConfigFile({ blueprintFilePath, organizationId, projectId, stackId, }) {
    const blueprintDir = blueprintFilePath ? dirname(blueprintFilePath) : cwd();
    const configDir = join(blueprintDir, BLUEPRINT_DIR);
    const configPath = join(configDir, BLUEPRINT_CONFIG_FILE);
    if (!existsSync(configDir)) {
        mkdirSync(configDir, { recursive: true });
    }
    let config = {};
    if (existsSync(configPath)) {
        try {
            config = JSON.parse(readFileSync(configPath, 'utf8'));
        }
        catch {
            // config broken, start fresh
        }
    }
    config.organizationId = organizationId;
    config.projectId = projectId;
    config.stackId = stackId;
    config.blueprintConfigVersion = BLUEPRINT_CONFIG_VERSION;
    config.updatedAt = Date.now();
    writeFileSync(configPath, JSON.stringify(config, null, 2));
}
