/* eslint-disable n/no-unsupported-features/node-builtins */
import {Store} from './vendor/vendor.bundle.js'

// list of events to simulate
const events = ['create', 'update', 'delete'].map((e) => ({name: e}))

// eslint-disable-next-line new-cap
const store = Store({events, selectedEvent: events[0].name})

export default function API() {
  return {
    blueprint,
    document,
    invoke,
    projects,
    datasets,
    store,
    subscribe: store.subscribe,
    unsubscribe: store.unsubscribe,
  }
}

function invoke({context, event, metadata}) {
  store.inprogress = true
  const start = Date.now()
  const payload = {
    data: {context, event},
    func: store.selectedIndex,
    metadata,
  }
  fetch('/invoke', {
    body: JSON.stringify(payload),
    headers: {
      'Content-Type': 'application/json',
    },
    method: 'POST',
  })
    .then((response) => {
      return response.json().then((data) => ({data, timings: getServerTimings(response)}))
    })
    .then(({data, timings}) => {
      store.inprogress = false
      store.result = {
        ...data,
        time: Date.now() - start,
        timings,
      }
    })
}

function blueprint() {
  fetch('/blueprint')
    .then((response) => response.json())
    .then((blueprint) => {
      const {parsedBlueprint, projectId} = blueprint
      const functions = parsedBlueprint?.resources.filter((r) =>
        r.type.startsWith('sanity.function.'),
      )

      store.functions = functions
      store.selectedIndex = functions[0].name
      store.defaultProject = projectId || undefined
    })
    .catch(() => {
      store.functions = []
    })
}

function projects() {
  fetch('/projects')
    .then((response) => response.json())
    .then((projects) => {
      store.projects = projects
      store.selectedProject = store.defaultProject ? store.defaultProject : projects[0].id
    })
    .catch(() => {
      store.projects = []
    })
}

function datasets(selectedProject) {
  fetch(`/datasets?project=${selectedProject}`)
    .then((response) => response.json())
    .then((datasets) => {
      store.datasets = datasets
      store.selectedDataset = datasets[0].name
    })
    .catch(() => {
      store.datasets = []
    })
}

function document({projectId, dataset, docId}) {
  return fetch(`/document?project=${projectId}&dataset=${dataset}&doc=${docId}`)
    .then((response) => response.json())
    .then((doc) => {
      store.document = doc
    })
    .catch(() => {
      store.document = {}
    })
}

function getServerTimings(response) {
  const timings = {}
  const serverTiming = response.headers.get('Server-Timing')
  if (!serverTiming) {
    return timings
  }

  for (const entry of serverTiming.split(',')) {
    const [name, ...params] = entry.split(';')
    const durationParam = params.find((p) => p.startsWith('dur='))
    if (durationParam) {
      timings[name.trim()] = Number.parseFloat(durationParam.slice(4))
    }
  }

  return timings
}
