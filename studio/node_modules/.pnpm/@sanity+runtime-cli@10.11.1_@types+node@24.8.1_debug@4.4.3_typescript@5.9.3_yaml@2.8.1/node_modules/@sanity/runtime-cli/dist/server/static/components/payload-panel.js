/* globals customElements document */

import {basicSetup, EditorView, json} from '../vendor/vendor.bundle.js'
import {ApiBaseElement} from './api-base.js'
import {sanityCodeMirrorTheme} from './codemirror-theme.js'

function template({selectedEvent}) {
  const singleModeStyle = selectedEvent === 'update' ? ' style="display: none;"' : ''
  const deltaModeStyle = selectedEvent !== 'update' ? '' : ' style="display: none;"'
  return `<div id="payloadContainer" class="gutter-gradient relative h-100 max-h-100 y-scroll border-top border-top-none-l"${singleModeStyle}>
  <div class="bg gutter-gradient sticky top-0 right-0 left-0 z-100">
    <div class="flex items-center space-between" style="padding: 8px 20px 8px 48px;">
      <h2 class="config-label mar-t-0 mar-b-0">Document</h2>
    </div>
    <hr class='hr-border' style='margin-left: 31px; ' />
  </div>
  <div id="payload" name="payload" class='max-h-100 min-h-0'></div>
</div>
<div id="deltaPayloadContainer" class="gutter-gradient relative h-100 max-h-100 y-scroll border-top border-top-none-l"${deltaModeStyle}>
  <div class="bg gutter-gradient sticky top-0 right-0 left-0 z-100">
    <div class="flex items-center space-between" style="padding: 8px 20px 8px 48px;">
      <h2 class="config-label mar-t-0 mar-b-0">Before Document</h2>
    </div>
    <hr class='hr-border' style='margin-left: 31px; ' />
  </div>
  <div id="beforePayload" name="beforePayload" class='max-h-50 min-h-0'></div>
  <div class="bg gutter-gradient sticky top-0 right-0 left-0 z-100">
    <hr class='hr-border' style='margin-left: 31px; ' />
    <div class="flex items-center space-between" style="padding: 8px 20px 8px 48px;">
      <h2 class="config-label mar-t-0 mar-b-0">After Document</h2>
    </div>
    <hr class='hr-border' style='margin-left: 31px; ' />
  </div>
  <div id="afterPayload" name="afterPayload" class='max-h-50 min-h-0'></div>
</div>
`
}

class PayloadPanel extends ApiBaseElement {
  updatePayload = ({document}) => {
    if (!document) return

    this.#updateCodeView(this.api.store.payload, document)
    this.#updateCodeView(this.api.store.beforePayload, document)
    this.#updateCodeView(this.api.store.afterPayload, document)
  }
  #updateCodeView = (view, document) => {
    const transaction = view.state.update({
      changes: {
        from: 0,
        insert: JSON.stringify(document, null, 2),
        to: view.state.doc.length,
      },
    })
    view.dispatch(transaction)
  }
  updateSelectedEvent = ({selectedEvent}) => {
    console.log('updateSelectedEvent', selectedEvent)

    const payloadContainer = this.querySelector('#payloadContainer')
    const deltaPayloadContainer = this.querySelector('#deltaPayloadContainer')

    const isUpdateEvent = selectedEvent === 'update'
    payloadContainer.style.display = isUpdateEvent ? 'none' : 'block'
    deltaPayloadContainer.style.display = isUpdateEvent ? 'block' : 'none'
  }
  connectedCallback() {
    this.innerHTML = template({
      selectedEvent: this.api.store.selectedEvent,
    })

    const beforePayloadElem = this.querySelector('#beforePayload')
    const afterPayloadElem = this.querySelector('#afterPayload')

    this.api.store.beforePayload = attachEditorView(beforePayloadElem)
    this.api.store.afterPayload = attachEditorView(afterPayloadElem)

    const payloadElem = this.querySelector('#payload')
    this.api.store.payload = attachEditorView(payloadElem)

    this.api.subscribe(this.updatePayload, ['document'])
    this.api.subscribe(this.updateSelectedEvent, ['selectedEvent'])
  }
  disconnectedCallback() {
    if (this.api) {
      this.api.unsubscribe(this.updatePayload)
    }
  }
}

function attachEditorView(parent) {
  return new EditorView({
    doc: '\n\n\n\n',
    extensions: [basicSetup, json(), sanityCodeMirrorTheme],
    parent,
  })
}

customElements.define('payload-panel', PayloadPanel)
