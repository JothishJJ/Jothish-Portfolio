import chalk from 'chalk';
import { EventSource } from 'eventsource';
import { formatLogEntry } from '../../utils/display/logs-formatting.js';
import getHeaders from '../../utils/get-headers.js';
import { logsUrl } from './logs.js';
export function streamLogs({ stackId, after, auth, onLog, onOpen, onError, }) {
    const url = new URL(`${logsUrl}/stream`);
    url.searchParams.append('stackId', stackId);
    if (after)
        url.searchParams.append('after', after);
    const headers = getHeaders(auth);
    const eventSource = new EventSource(url.toString(), {
        fetch: (input, init) => fetch(input, {
            ...init,
            headers: {
                ...init?.headers,
                ...headers,
            },
        }),
    });
    eventSource.onopen = onOpen;
    eventSource.onmessage = (event) => {
        try {
            const log = JSON.parse(event.data);
            onLog(log);
        }
        catch (err) {
            onError(`Failed to parse log data: ${err instanceof Error ? err.message : String(err)}`);
        }
    };
    eventSource.addEventListener('logs', (event) => {
        try {
            const logData = JSON.parse(event.data);
            // usually an array
            if (Array.isArray(logData)) {
                for (const log of logData)
                    onLog(log);
            }
            else {
                onLog(logData);
            }
        }
        catch (err) {
            console.error('Error parsing logs event:', err);
        }
    });
    eventSource.onerror = () => {
        onError('Connection to log stream failed or was closed');
        if (eventSource.readyState === eventSource.CLOSED) {
            console.log('Connection is CLOSED');
        }
        else if (eventSource.readyState === eventSource.CONNECTING) {
            console.log('Connection is attempting to reconnect...');
            return; // Don't close if trying to reconnect
        }
        eventSource.close();
    };
    return () => {
        eventSource.close();
    };
}
/** Check if a log is newer than a given timestamp */
export function isNewerLog(log, timestamp) {
    const logTimestamp = new Date(log.timestamp).getTime();
    return logTimestamp > timestamp;
}
/**
 * Sets up log streaming for operations like deploy or destroy with spinner integration
 * @param config Configuration for log streaming
 * @returns A cleanup function for closing the log stream
 */
export async function setupLogStreaming(config) {
    const { stackId, auth, log, showBanner, after } = config;
    let newestTimestamp = Date.now();
    const onLogReceived = (logEntry) => {
        if (!isNewerLog(logEntry, newestTimestamp))
            return;
        newestTimestamp = new Date(logEntry.timestamp).getTime();
        log(formatLogEntry(logEntry, true));
    };
    let alreadyOpened = false;
    const onStreamOpen = () => {
        if (!alreadyOpened && showBanner)
            log(`Streaming logs... ${chalk.bold('ctrl+c')} to cancel`);
        if (alreadyOpened)
            log(`${chalk.green('Reconnected')}`);
        alreadyOpened = true;
    };
    const onStreamError = (error) => {
        log(`${chalk.red('Stream error:')} ${error}`);
    };
    return streamLogs({
        stackId,
        after,
        auth,
        onLog: onLogReceived,
        onOpen: onStreamOpen,
        onError: onStreamError,
    });
}
