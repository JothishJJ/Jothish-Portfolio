import config from '../config.js';
export async function validToken(maybeToken) {
    if (config.isTest)
        return maybeToken ?? 'token';
    const token = maybeToken ?? config.token;
    if (!token)
        throw new Error('NO_TOKEN');
    const url = `${config.apiUrl}v2025-04-23/users/me`;
    const response = await fetch(url, {
        method: 'GET',
        headers: {
            Accept: 'application/json',
            Authorization: `Bearer ${token}`,
        },
    });
    if (response.ok) {
        const data = await response.json();
        if (data.id)
            return token;
        throw new Error('NO_USER');
    }
    throw new Error('SERVER_ERROR', { cause: response.statusText });
}
export async function validTokenOrErrorMessage(maybeToken) {
    try {
        const token = await validToken(maybeToken);
        return { ok: true, value: token };
    }
    catch (e) {
        if (e instanceof Error) {
            switch (e.message) {
                case 'NO_TOKEN':
                    return {
                        ok: false,
                        error: {
                            e,
                            message: 'No API token found. Use `npx @sanity/cli login` to login.',
                        },
                    };
                case 'NO_USER':
                    return {
                        ok: false,
                        error: {
                            e,
                            message: 'User is not authenticated. Use `npx @sanity/cli login` to login.',
                        },
                    };
                case 'SERVER_ERROR':
                    return {
                        ok: false,
                        error: {
                            e,
                            message: `Authentication server error: "${e.cause}". Try again later`,
                        },
                    };
                default:
                    return { ok: false, error: { e, message: e.message } };
            }
        }
        return { ok: false, error: { e, message: 'Unknown error' } };
    }
}
