import chalk from 'chalk';
import { listStacks } from '../../actions/blueprints/stacks.js';
import { formatStacksListing } from '../../utils/display/blueprints-formatting.js';
import { niceId } from '../../utils/display/presenters.js';
export async function blueprintStacksCore(options) {
    const { log, token, blueprint, flags } = options;
    const { projectId: blueprintProjectId, stackId: blueprintStackId } = blueprint;
    const projectId = flags['project-id'] || blueprintProjectId;
    if (!projectId) {
        log('Run in a Blueprint directory or provide a Project with --project-id');
        return { success: false, error: 'No Project ID provided' };
    }
    try {
        const { ok, stacks, error } = await listStacks({ token, scopeType: 'project', scopeId: projectId });
        if (!ok)
            return { success: false, error: error || 'Failed to list stacks' };
        if (!stacks || stacks.length === 0) {
            log('No stacks found');
            return { success: true };
        }
        log(`${chalk.bold('Project')} ${niceId(projectId)} ${chalk.bold('Stacks')}:\n`);
        log(formatStacksListing(stacks, blueprintStackId));
        return { success: true };
    }
    catch (error) {
        const errorMessage = error instanceof Error ? error.message : String(error);
        log(`Error: ${errorMessage}`);
        return { success: false, error: errorMessage };
    }
}
