{"version":3,"file":"getCliConfig.js","sources":["../../src/debug.ts","../../src/util/dynamicRequire.ts","../../src/util/getCliConfig.ts"],"sourcesContent":["import debugIt from 'debug'\n\nexport const debug = debugIt('sanity:cli')\n","// Prevent webpack from bundling in webpack context,\n// use regular node require for unbundled context\n\n/* eslint-disable camelcase */\ndeclare const __webpack_require__: boolean\ndeclare const __non_webpack_require__: typeof require\n\nconst requireFunc: typeof require =\n  typeof __webpack_require__ === 'function' ? __non_webpack_require__ : require\n/* eslint-enable camelcase */\n\nexport function dynamicRequire<T = any>(request: string): T {\n  const mod = requireFunc(request)\n  return mod.__esModule && mod.default ? mod.default : mod\n}\n\ndynamicRequire.resolve = requireFunc.resolve\ndynamicRequire.cache = requireFunc.cache\n","/**\n * Reads the Sanity CLI config from one of the following files (in preferred order):\n *   - sanity.cli.js\n *   - sanity.cli.ts\n *\n * Note: There are two ways of using this:\n * a) `getCliConfig(cwd)`\n * b) `getCliConfig(cwd, {forked: true})`\n *\n * Approach a is generally a bit faster as it avoids the forking startup time, while\n * approach b could be considered \"safer\" since any side-effects of running the config\n * file will not bleed into the current CLI process directly.\n */\nimport fs from 'node:fs'\nimport path from 'node:path'\nimport {Worker} from 'node:worker_threads'\n\nimport {debug} from '../debug'\nimport {type CliConfig} from '../types'\nimport {getCliWorkerPath} from './cliWorker'\nimport {dynamicRequire} from './dynamicRequire'\n\nexport type CliConfigResult = {config: CliConfig; path: string} | {config: null; path: string}\n\nexport async function getCliConfig(\n  cwd: string,\n  {forked}: {forked?: boolean} = {},\n): Promise<CliConfigResult | null> {\n  let clearCache = false\n  if (forked) {\n    try {\n      return await getCliConfigForked(cwd)\n    } catch (err) {\n      debug('Error in getCliConfigForked', err)\n      clearCache = true\n      // Intentional noop - try unforked variant\n    }\n  }\n\n  const {unregister} = __DEV__\n    ? {unregister: () => undefined}\n    : // eslint-disable-next-line @typescript-eslint/no-require-imports\n      require('esbuild-register/dist/node').register({supported: {'dynamic-import': true}})\n\n  try {\n    // If forked execution failed, we need to clear the cache to reload the env vars\n    return getSanityCliConfig(cwd, clearCache)\n  } catch (err) {\n    throw err\n  } finally {\n    unregister()\n  }\n}\n\nasync function getCliConfigForked(cwd: string): Promise<CliConfigResult | null> {\n  const workerPath = await getCliWorkerPath('getCliConfig')\n  return new Promise((resolve, reject) => {\n    const worker = new Worker(workerPath, {\n      workerData: cwd,\n      env: process.env,\n    })\n    worker.on('message', (message) => {\n      if (message.type === 'config') {\n        resolve(message.config)\n      } else {\n        const error = new Error(message.error)\n        ;(error as any).type = message.errorType\n        reject(new Error(message.error))\n      }\n    })\n    worker.on('error', reject)\n    worker.on('exit', (code) => {\n      if (code !== 0) {\n        reject(new Error(`Worker stopped with exit code ${code}`))\n      }\n    })\n  })\n}\n\nexport function getSanityCliConfig(cwd: string, clearCache = false): CliConfigResult | null {\n  const jsConfigPath = path.join(cwd, 'sanity.cli.js')\n  const tsConfigPath = path.join(cwd, 'sanity.cli.ts')\n\n  const [js, ts] = [fs.existsSync(jsConfigPath), fs.existsSync(tsConfigPath)]\n\n  if (!js && !ts) {\n    return null\n  }\n\n  if (!js && ts) {\n    return {\n      config: importConfig(tsConfigPath, clearCache),\n      path: tsConfigPath,\n    }\n  }\n\n  if (js && ts) {\n    warn('Found both `sanity.cli.js` and `sanity.cli.ts` - using sanity.cli.js')\n  }\n\n  return {\n    config: importConfig(jsConfigPath, clearCache),\n    path: jsConfigPath,\n  }\n}\n\nfunction importConfig(filePath: string, clearCache: boolean): CliConfig | null {\n  try {\n    // Clear module cache if requested (needed for env var reload)\n    if (clearCache) {\n      const resolvedPath = dynamicRequire.resolve(filePath)\n      delete dynamicRequire.cache[resolvedPath]\n    }\n\n    const config = dynamicRequire<CliConfig | {default: CliConfig} | null>(filePath)\n    if (config === null || typeof config !== 'object') {\n      throw new Error('Module export is not a configuration object')\n    }\n\n    return 'default' in config ? config.default : config\n  } catch (err) {\n    // If attempting to import `defineCliConfig` or similar from `sanity/cli`,\n    // accept the fact that it might not be installed. Instead, let the CLI\n    // give a warning about the `sanity` module not being installed\n    if (err.code === 'MODULE_NOT_FOUND' && err.message.includes('sanity/cli')) {\n      return null\n    }\n\n    console.error(`Error reading \"${filePath}\": ${err.message}`)\n    return null\n  }\n}\n\nfunction warn(warning: string) {\n  if (typeof process.send === 'function') {\n    process.send({type: 'warning', warning})\n  } else {\n    console.warn(warning)\n  }\n}\n"],"names":["debugIt","getCliWorkerPath","Worker","path","fs"],"mappings":"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"}