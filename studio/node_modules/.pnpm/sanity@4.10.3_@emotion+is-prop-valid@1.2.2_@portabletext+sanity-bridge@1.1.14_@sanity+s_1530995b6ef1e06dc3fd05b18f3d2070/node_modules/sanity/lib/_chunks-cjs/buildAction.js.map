{"version":3,"file":"buildAction.js","sources":["../../src/_internal/cli/actions/app/build.telemetry.ts","../../src/_internal/cli/actions/app/buildAction.ts"],"sourcesContent":["import {defineTrace} from '@sanity/telemetry'\n\nexport const BuildTrace = defineTrace<{outputSize: number}>({\n  name: 'App Build Completed',\n  version: 0,\n  description: 'An App build completed',\n})\n","/* eslint-disable max-statements */\nimport path from 'node:path'\n\nimport {type CliCommandArguments, type CliCommandContext} from '@sanity/cli'\nimport {noopLogger} from '@sanity/telemetry'\nimport chalk from 'chalk'\nimport {info} from 'log-symbols'\nimport {rimraf} from 'rimraf'\nimport semver from 'semver'\n\nimport {buildStaticFiles} from '../../server'\nimport {buildVendorDependencies} from '../../server/buildVendorDependencies'\nimport {compareDependencyVersions} from '../../util/compareDependencyVersions'\nimport {getAppId} from '../../util/getAppId'\nimport {getAutoUpdatesImportMap} from '../../util/getAutoUpdatesImportMap'\nimport {formatModuleSizes, sortModulesBySize} from '../../util/moduleFormatUtils'\nimport {readModuleVersion} from '../../util/readModuleVersion'\nimport {shouldAutoUpdate} from '../../util/shouldAutoUpdate'\nimport {getTimer} from '../../util/timing'\nimport {warnAboutMissingAppId} from '../../util/warnAboutMissingAppId'\nimport {BuildTrace} from './build.telemetry'\n\nexport interface BuildSanityAppCommandFlags {\n  'yes'?: boolean\n  'y'?: boolean\n  'minify'?: boolean\n  'stats'?: boolean\n  'source-maps'?: boolean\n  'auto-updates'?: boolean\n}\n\nexport default async function buildSanityApp(\n  args: CliCommandArguments<BuildSanityAppCommandFlags>,\n  context: CliCommandContext,\n  overrides?: {basePath?: string},\n): Promise<{didCompile: boolean}> {\n  const timer = getTimer()\n  const {output, prompt, workDir, cliConfig, telemetry = noopLogger, cliConfigPath} = context\n  const flags: BuildSanityAppCommandFlags = {\n    'minify': true,\n    'stats': false,\n    'source-maps': false,\n    ...args.extOptions,\n  }\n\n  /**\n   * Unattended mode means that if there are any prompts it will use `YES` for them but will no change anything that doesn't have a prompt\n   */\n  const unattendedMode = Boolean(flags.yes || flags.y)\n  const defaultOutputDir = path.resolve(path.join(workDir, 'dist'))\n  const outputDir = path.resolve(args.argsWithoutOptions[0] || defaultOutputDir)\n\n  const autoUpdatesEnabled = shouldAutoUpdate({flags, cliConfig})\n  const appId = getAppId({cliConfig, output})\n\n  const installedSdkVersion = await readModuleVersion(context.workDir, '@sanity/sdk-react')\n  const installedSanityVersion = await readModuleVersion(context.workDir, 'sanity')\n\n  if (!installedSdkVersion) {\n    throw new Error(`Failed to find installed @sanity/sdk-react version`)\n  }\n\n  let autoUpdatesImports = {}\n\n  if (autoUpdatesEnabled) {\n    // Get the clean version without build metadata: https://semver.org/#spec-item-10\n    const cleanSDKVersion = semver.parse(installedSdkVersion)?.version\n    if (!cleanSDKVersion) {\n      throw new Error(`Failed to parse installed SDK version: ${installedSdkVersion}`)\n    }\n\n    // Sanity might not be installed, but if it is, we want to auto update it.\n    const cleanSanityVersion = semver.parse(installedSanityVersion)?.version\n\n    const autoUpdatedPackages = [\n      {name: '@sanity/sdk', version: cleanSDKVersion},\n      {name: '@sanity/sdk-react', version: cleanSDKVersion},\n      ...(cleanSanityVersion ? [{name: 'sanity' as const, version: cleanSanityVersion}] : []),\n    ]\n    autoUpdatesImports = getAutoUpdatesImportMap(autoUpdatedPackages, {appId})\n    output.print(`${info} Building with auto-updates enabled`)\n\n    // note: we want to show this warning only if running `sanity build`\n    // since `sanity deploy` will prompt for appId if it's missing and tell the user to add it to sanity.cli.ts when done\n    // see deployAction.ts\n    if (args.groupOrCommand !== 'deploy' && !appId) {\n      warnAboutMissingAppId({\n        appType: 'app',\n        cliConfigPath,\n        output,\n        projectId: cliConfig?.api?.projectId,\n      })\n    }\n\n    // Check the versions\n    const result = await compareDependencyVersions(autoUpdatedPackages, workDir, {appId})\n\n    // If it is in unattended mode, we don't want to prompt\n    if (result?.length && !unattendedMode) {\n      const shouldContinue = await prompt.single({\n        type: 'confirm',\n        message: chalk.yellow(\n          `The following local package versions are different from the versions currently served at runtime.\\n` +\n            `When using auto updates, we recommend that you test locally with the same versions before deploying. \\n\\n` +\n            `${result.map((mod) => ` - ${mod.pkg} (local version: ${mod.installed}, runtime version: ${mod.remote})`).join('\\n')} \\n\\n` +\n            `Continue anyway?`,\n        ),\n        default: false,\n      })\n\n      if (!shouldContinue) {\n        return process.exit(0)\n      }\n    }\n  }\n\n  const envVarKeys = getSanityEnvVars()\n  if (envVarKeys.length > 0) {\n    output.print(\n      '\\nIncluding the following environment variables as part of the JavaScript bundle:',\n    )\n    envVarKeys.forEach((key) => output.print(`- ${key}`))\n    output.print('')\n  }\n\n  let shouldClean = true\n  if (outputDir !== defaultOutputDir && !unattendedMode) {\n    shouldClean = await prompt.single({\n      type: 'confirm',\n      message: `Do you want to delete the existing directory (${outputDir}) first?`,\n      default: true,\n    })\n  }\n\n  // Determine base path for built studio\n  let basePath = '/'\n  const envBasePath = process.env.SANITY_APP_BASEPATH\n  const configBasePath = cliConfig?.project?.basePath\n\n  // Allow `sanity deploy` to override base path\n  if (overrides?.basePath) {\n    basePath = overrides.basePath\n  } else if (envBasePath) {\n    // Environment variable (SANITY_APP_BASEPATH)\n    basePath = envBasePath\n  } else if (configBasePath) {\n    // `sanity.cli.ts`\n    basePath = configBasePath\n  }\n\n  if (envBasePath && configBasePath) {\n    output.warn(\n      `Overriding configured base path (${configBasePath}) with value from environment variable (${envBasePath})`,\n    )\n  }\n\n  let spin\n\n  if (shouldClean) {\n    timer.start('cleanOutputFolder')\n    spin = output.spinner('Clean output folder').start()\n    await rimraf(outputDir)\n    const cleanDuration = timer.end('cleanOutputFolder')\n    spin.text = `Clean output folder (${cleanDuration.toFixed()}ms)`\n    spin.succeed()\n  }\n\n  spin = output.spinner(`Build Sanity application`).start()\n\n  const trace = telemetry.trace(BuildTrace)\n  trace.start()\n\n  let importMap\n\n  if (autoUpdatesEnabled) {\n    importMap = {\n      imports: {\n        ...(await buildVendorDependencies({cwd: workDir, outputDir, basePath})),\n        ...autoUpdatesImports,\n      },\n    }\n  }\n\n  try {\n    timer.start('bundleStudio')\n\n    const bundle = await buildStaticFiles({\n      cwd: workDir,\n      outputDir,\n      basePath,\n      sourceMap: Boolean(flags['source-maps']),\n      minify: Boolean(flags.minify),\n      vite: cliConfig && 'vite' in cliConfig ? cliConfig.vite : undefined,\n      importMap,\n      reactCompiler:\n        cliConfig && 'reactCompiler' in cliConfig ? cliConfig.reactCompiler : undefined,\n      entry: cliConfig && 'app' in cliConfig ? cliConfig.app?.entry : undefined,\n      isApp: true,\n    })\n\n    trace.log({\n      outputSize: bundle.chunks\n        .flatMap((chunk) => chunk.modules.flatMap((mod) => mod.renderedLength))\n        .reduce((sum, n) => sum + n, 0),\n    })\n    const buildDuration = timer.end('bundleStudio')\n\n    spin.text = `Build Sanity application (${buildDuration.toFixed()}ms)`\n    spin.succeed()\n\n    trace.complete()\n    if (flags.stats) {\n      output.print('\\nLargest module files:')\n      output.print(formatModuleSizes(sortModulesBySize(bundle.chunks).slice(0, 15)))\n    }\n  } catch (err) {\n    spin.fail()\n    trace.error(err)\n    throw err\n  }\n\n  return {didCompile: true}\n}\n\nfunction getSanityEnvVars(env: Record<string, string | undefined> = process.env): string[] {\n  return Object.keys(env).filter((key) => key.toUpperCase().startsWith('SANITY_APP_'))\n}\n"],"names":["BuildTrace","defineTrace","name","version","description","buildSanityApp","args","context","overrides","timer","getTimer","output","prompt","workDir","cliConfig","telemetry","noopLogger","cliConfigPath","flags","extOptions","unattendedMode","Boolean","yes","y","defaultOutputDir","path","resolve","join","outputDir","argsWithoutOptions","autoUpdatesEnabled","shouldAutoUpdate","appId","getAppId","installedSdkVersion","readModuleVersion","installedSanityVersion","Error","autoUpdatesImports","cleanSDKVersion","semver","parse","cleanSanityVersion","autoUpdatedPackages","getAutoUpdatesImportMap","print","info","groupOrCommand","warnAboutMissingAppId","appType","projectId","api","result","compareDependencyVersions","length","single","type","message","chalk","yellow","map","mod","pkg","installed","remote","default","process","exit","envVarKeys","getSanityEnvVars","forEach","key","shouldClean","basePath","envBasePath","env","SANITY_APP_BASEPATH","configBasePath","project","warn","spin","start","spinner","rimraf","cleanDuration","end","text","toFixed","succeed","trace","importMap","imports","buildVendorDependencies","cwd","bundle","buildStaticFiles","sourceMap","minify","vite","undefined","reactCompiler","entry","app","isApp","log","outputSize","chunks","flatMap","chunk","modules","renderedLength","reduce","sum","n","buildDuration","complete","stats","formatModuleSizes","sortModulesBySize","slice","err","fail","error","didCompile","Object","keys","filter","toUpperCase","startsWith"],"mappings":"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"}