{"version":3,"file":"exportAssetsAction.js","sources":["../../src/_internal/cli/actions/media/exportAssetsAction.ts"],"sourcesContent":["import path from 'node:path'\n\nimport {type CliCommandAction} from '@sanity/cli'\nimport exportDataset from '@sanity/export'\n\nimport {type ProgressEvent} from '../../commands/dataset/exportDatasetCommand'\nimport {MINIMUM_API_VERSION} from './constants'\nimport {determineTargetMediaLibrary} from './lib/determineTargetMediaLibrary'\n\ninterface ExportAssetsFlags {\n  'media-library-id'?: string\n}\n\nconst DEFAULT_CONCURRENCY = 6\n\nconst exportAssetsAction: CliCommandAction<ExportAssetsFlags> = async (args, context) => {\n  const {apiClient, output, chalk} = context\n\n  const mediaLibraryId =\n    args.extOptions['media-library-id'] ?? (await determineTargetMediaLibrary(context))\n\n  const client = apiClient().withConfig({\n    apiVersion: MINIMUM_API_VERSION,\n    requestTagPrefix: 'sanity.mediaLibraryCli.export',\n  })\n\n  const outputPath = path.join(\n    process.cwd(),\n    `media-library-${mediaLibraryId}-${Date.now()}.tar.gz`,\n  )\n\n  output.print()\n  output.print(`Exporting from media library: ${chalk.bold(mediaLibraryId)}`)\n  output.print(`Exporting to path: ${chalk.bold(outputPath)}`)\n  output.print()\n\n  let currentStep = 'Beginning exportâ€¦'\n  let spinner = output.spinner(currentStep).start()\n\n  try {\n    await exportDataset({\n      client,\n      mediaLibraryId,\n      outputPath,\n      drafts: false,\n      types: ['sanity.asset'],\n      assetConcurrency: DEFAULT_CONCURRENCY,\n      mode: 'stream',\n      onProgress: (progress: ProgressEvent) => {\n        if (progress.step !== currentStep) {\n          spinner.succeed()\n          spinner = output.spinner(progress.step).start()\n        } else if (progress.step === currentStep && progress.update) {\n          spinner.text = `${progress.step} (${progress.current}/${progress.total})`\n        }\n        currentStep = progress.step\n      },\n      // The `assets.json` assets map is not required for Media Library archives, because the\n      // import process reads asset files directly from the archive.\n      assetsMap: false,\n      // The documents listed in `data.ndjson` are only used for recording aspect data. If there\n      // is no aspect data, the document can safely be omitted.\n      filterDocument: (doc: unknown) => {\n        if (typeof doc !== 'object' || doc === null || !('aspects' in doc)) {\n          return false\n        }\n\n        // Filter out video assets (we dont have access to the raw video file for now)\n        if ('assetType' in doc && doc.assetType === 'sanity.videoAsset') {\n          return false\n        }\n\n        return (\n          typeof doc.aspects === 'object' &&\n          doc.aspects !== null &&\n          Object.keys(doc.aspects).length !== 0\n        )\n      },\n      // Media Library archives only record asset aspect data. All other data can be safely\n      // ommitted.\n      transformDocument: (doc: unknown) => {\n        if (\n          typeof doc !== 'object' ||\n          doc === null ||\n          !('currentVersion' in doc) ||\n          !('aspects' in doc)\n        ) {\n          return doc\n        }\n\n        if (\n          typeof doc.currentVersion !== 'object' ||\n          doc.currentVersion === null ||\n          !('_ref' in doc.currentVersion) ||\n          typeof doc.currentVersion._ref !== 'string'\n        ) {\n          return doc\n        }\n\n        // Determine the asset's path inside the archive: either \"images\" or \"files\".\n        const pathPrefix = [doc.currentVersion._ref.split('-')[0], 's'].join('')\n\n        return {\n          filename: [pathPrefix, generateFilename(doc.currentVersion._ref)].join('/'),\n          aspects: doc.aspects,\n        }\n      },\n    })\n  } catch (error) {\n    spinner.fail(`Failed to export media library`)\n    throw error\n  }\n\n  spinner.succeed(`Exported media library to ${chalk.bold(outputPath)}`)\n}\n\nexport default exportAssetsAction\n\nfunction generateFilename(assetId: string): string {\n  const [, , asset, ext] = assetId.match(/^(image|file)-(.*?)(-[a-z]+)?$/) || []\n  const extension = (ext || 'bin').replace(/^-/, '')\n  return asset ? `${asset}.${extension}` : `${assetId}.bin`\n}\n"],"names":["DEFAULT_CONCURRENCY","exportAssetsAction","args","context","apiClient","output","chalk","mediaLibraryId","extOptions","determineTargetMediaLibrary","client","withConfig","apiVersion","MINIMUM_API_VERSION","requestTagPrefix","outputPath","path","join","process","cwd","Date","now","print","bold","currentStep","spinner","start","exportDataset","drafts","types","assetConcurrency","mode","onProgress","progress","step","succeed","update","text","current","total","assetsMap","filterDocument","doc","assetType","aspects","Object","keys","length","transformDocument","currentVersion","_ref","filename","split","generateFilename","error","fail","assetId","asset","ext","match","extension","replace"],"mappings":";;;;;;AAaA,MAAMA,sBAAsB,GAEtBC,qBAA0D,OAAOC,MAAMC,YAAY;AACvF,QAAM;AAAA,IAACC;AAAAA,IAAWC;AAAAA,IAAQC;AAAAA,EAAAA,IAASH,SAE7BI,iBACJL,KAAKM,WAAW,kBAAkB,KAAM,MAAMC,4BAAAA,4BAA4BN,OAAO,GAE7EO,SAASN,UAAAA,EAAYO,WAAW;AAAA,IACpCC,YAAYC,4BAAAA;AAAAA,IACZC,kBAAkB;AAAA,EAAA,CACnB,GAEKC,aAAaC,cAAAA,QAAKC,KACtBC,QAAQC,IAAAA,GACR,iBAAiBZ,cAAc,IAAIa,KAAKC,IAAAA,CAAK,SAC/C;AAEAhB,SAAOiB,SACPjB,OAAOiB,MAAM,iCAAiChB,MAAMiB,KAAKhB,cAAc,CAAC,EAAE,GAC1EF,OAAOiB,MAAM,sBAAsBhB,MAAMiB,KAAKR,UAAU,CAAC,EAAE,GAC3DV,OAAOiB,MAAAA;AAEP,MAAIE,cAAc,0BACdC,UAAUpB,OAAOoB,QAAQD,WAAW,EAAEE,MAAAA;AAE1C,MAAI;AACF,UAAMC,+BAAc;AAAA,MAClBjB;AAAAA,MACAH;AAAAA,MACAQ;AAAAA,MACAa,QAAQ;AAAA,MACRC,OAAO,CAAC,cAAc;AAAA,MACtBC,kBAAkB9B;AAAAA,MAClB+B,MAAM;AAAA,MACNC,YAAaC,CAAAA,aAA4B;AACnCA,iBAASC,SAASV,eACpBC,QAAQU,WACRV,UAAUpB,OAAOoB,QAAQQ,SAASC,IAAI,EAAER,MAAAA,KAC/BO,SAASC,SAASV,eAAeS,SAASG,WACnDX,QAAQY,OAAO,GAAGJ,SAASC,IAAI,KAAKD,SAASK,OAAO,IAAIL,SAASM,KAAK,MAExEf,cAAcS,SAASC;AAAAA,MACzB;AAAA;AAAA;AAAA,MAGAM,WAAW;AAAA;AAAA;AAAA,MAGXC,gBAAiBC,CAAAA,QACX,OAAOA,OAAQ,YAAYA,QAAQ,QAAQ,EAAE,aAAaA,QAK1D,eAAeA,OAAOA,IAAIC,cAAc,sBACnC,KAIP,OAAOD,IAAIE,WAAY,YACvBF,IAAIE,YAAY,QAChBC,OAAOC,KAAKJ,IAAIE,OAAO,EAAEG,WAAW;AAAA;AAAA;AAAA,MAKxCC,mBAAoBN,CAAAA,QAEhB,OAAOA,OAAQ,YACfA,QAAQ,QACR,EAAE,oBAAoBA,QACtB,EAAE,aAAaA,QAMf,OAAOA,IAAIO,kBAAmB,YAC9BP,IAAIO,mBAAmB,QACvB,EAAE,UAAUP,IAAIO,mBAChB,OAAOP,IAAIO,eAAeC,QAAS,WAE5BR,MAMF;AAAA,QACLS,UAAU,CAHO,CAACT,IAAIO,eAAeC,KAAKE,MAAM,GAAG,EAAE,CAAC,GAAG,GAAG,EAAEnC,KAAK,EAAE,GAG9CoC,iBAAiBX,IAAIO,eAAeC,IAAI,CAAC,EAAEjC,KAAK,GAAG;AAAA,QAC1E2B,SAASF,IAAIE;AAAAA,MAAAA;AAAAA,IACf,CAEH;AAAA,EACH,SAASU,OAAO;AACd7B,UAAAA,QAAQ8B,KAAK,gCAAgC,GACvCD;AAAAA,EACR;AAEA7B,UAAQU,QAAQ,6BAA6B7B,MAAMiB,KAAKR,UAAU,CAAC,EAAE;AACvE;AAIA,SAASsC,iBAAiBG,SAAyB;AACjD,QAAM,CAAA,EAAA,EAAKC,OAAOC,GAAG,IAAIF,QAAQG,MAAM,gCAAgC,KAAK,CAAA,GACtEC,aAAaF,OAAO,OAAOG,QAAQ,MAAM,EAAE;AACjD,SAAOJ,QAAQ,GAAGA,KAAK,IAAIG,SAAS,KAAK,GAAGJ,OAAO;AACrD;;"}