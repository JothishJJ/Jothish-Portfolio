{"version":3,"file":"validateAction.js","sources":["../../src/_internal/cli/actions/schema/formatSchemaValidation.ts","../../src/_internal/cli/actions/schema/validateAction.ts"],"sourcesContent":["import {isatty} from 'node:tty'\n\nimport {type SchemaValidationProblemGroup, type SchemaValidationProblemPath} from '@sanity/types'\nimport chalk from 'chalk'\nimport logSymbols from 'log-symbols'\n\nconst isTty = isatty(1)\n\nconst headers = {\n  error: isTty ? chalk.bold(chalk.bgRed(chalk.black(' ERROR '))) : chalk.red('[ERROR]'),\n  warning: isTty ? chalk.bold(chalk.bgYellow(chalk.black(' WARN '))) : chalk.yellow('[WARN]'),\n}\n\nconst severityValues = {error: 0, warning: 1}\n\nfunction formatPath(pathSegments: SchemaValidationProblemPath) {\n  const format = (\n    [curr, ...next]: SchemaValidationProblemPath,\n    mode: 'object' | 'array' = 'object',\n  ): string => {\n    if (!curr) return ''\n    if (curr.kind === 'property') return format(next, curr.name === 'of' ? 'array' : 'object')\n\n    const name = curr.name ? curr.name : `<anonymous_${curr.type}>`\n    return `${mode === 'array' ? `[${name}]` : `.${name}`}${format(next)}`\n  }\n\n  return format(pathSegments.slice(1)).slice(1) // removes the top-level type and leading `.`\n}\n\nexport function getAggregatedSeverity(\n  groupOrGroups: SchemaValidationProblemGroup | SchemaValidationProblemGroup[],\n): 'error' | 'warning' {\n  const groups = Array.isArray(groupOrGroups) ? groupOrGroups : [groupOrGroups]\n  return groups\n    .flatMap((group) => group.problems.map((problem) => problem.severity))\n    .find((severity) => severity === 'error')\n    ? 'error'\n    : 'warning'\n}\n\nexport function formatSchemaValidation(validation: SchemaValidationProblemGroup[]): string {\n  let unnamedTopLevelTypeCount = 0\n  const validationByType = Object.entries(\n    validation.reduce<Record<string, SchemaValidationProblemGroup[]>>((acc, next) => {\n      const [firstSegment] = next.path\n      if (!firstSegment) return acc\n      if (firstSegment.kind !== 'type') return acc\n\n      const topLevelType =\n        firstSegment.name || `<unnamed_${firstSegment.type}_type_${unnamedTopLevelTypeCount++}>`\n      const problems = acc[topLevelType] ?? []\n\n      problems.push(next)\n\n      acc[topLevelType] = problems\n      return acc\n    }, {}),\n  )\n\n  const formatted = validationByType\n    .sort((a, b) => {\n      const [aType, aGroups] = a\n      const [bType, bGroups] = b\n      const aValue = severityValues[getAggregatedSeverity(aGroups)]\n      const bValue = severityValues[getAggregatedSeverity(bGroups)]\n      if (aValue === bValue) return aType.localeCompare(bType, 'en-US')\n      return aValue - bValue\n    })\n    .map(([topLevelType, groups]) => {\n      const formattedTopLevelType = isTty\n        ? chalk.bgWhite(chalk.black(` ${topLevelType} `))\n        : `[${topLevelType}]`\n\n      const header = `${headers[getAggregatedSeverity(groups)]} ${formattedTopLevelType}`\n      const body = groups\n        .sort(\n          (a, b) =>\n            severityValues[getAggregatedSeverity(a)] - severityValues[getAggregatedSeverity(b)],\n        )\n        .map((group) => {\n          const formattedPath = `  ${chalk.bold(formatPath(group.path) || '(root)')}`\n          const formattedMessages = group.problems\n            .sort((a, b) => severityValues[a.severity] - severityValues[b.severity])\n            .map(({severity, message}) => `    ${logSymbols[severity]} ${message}`)\n            .join('\\n')\n\n          return `${formattedPath}\\n${formattedMessages}`\n        })\n        .join('\\n')\n\n      return `${header}\\n${body}`\n    })\n    .join('\\n\\n')\n\n  return formatted\n}\n","import path from 'node:path'\nimport {Worker} from 'node:worker_threads'\n\nimport {type CliCommandArguments, type CliCommandContext} from '@sanity/cli'\nimport logSymbols from 'log-symbols'\nimport readPkgUp from 'read-pkg-up'\n\nimport {\n  type ValidateSchemaWorkerData,\n  type ValidateSchemaWorkerResult,\n} from '../../threads/validateSchema'\nimport {formatSchemaValidation, getAggregatedSeverity} from './formatSchemaValidation'\n\ninterface ValidateFlags {\n  workspace?: string\n  format?: string\n  level?: 'error' | 'warning'\n}\n\nexport type SchemaValidationFormatter = (result: ValidateSchemaWorkerResult) => string\n\nexport default async function validateAction(\n  args: CliCommandArguments<ValidateFlags>,\n  {workDir, output}: CliCommandContext,\n): Promise<void> {\n  const flags = args.extOptions\n\n  const rootPkgPath = readPkgUp.sync({cwd: __dirname})?.path\n  if (!rootPkgPath) {\n    throw new Error('Could not find root directory for `sanity` package')\n  }\n\n  const workerPath = path.join(\n    path.dirname(rootPkgPath),\n    'lib',\n    '_internal',\n    'cli',\n    'threads',\n    'validateSchema.js',\n  )\n\n  const level = flags.level || 'warning'\n\n  if (level !== 'error' && level !== 'warning') {\n    throw new Error(`Invalid level. Available levels are 'error' and 'warning'.`)\n  }\n\n  const format = flags.format || 'pretty'\n\n  if (!['pretty', 'ndjson', 'json'].includes(format)) {\n    throw new Error(\n      `Did not recognize format '${flags.format}'. Available formats are 'pretty', 'ndjson', and 'json'.`,\n    )\n  }\n\n  let spinner\n\n  if (format === 'pretty') {\n    spinner = output\n      .spinner(\n        flags.workspace\n          ? `Validating schema from workspace '${flags.workspace}'…`\n          : 'Validating schema…',\n      )\n      .start()\n  }\n\n  const worker = new Worker(workerPath, {\n    workerData: {\n      workDir,\n      level,\n      workspace: flags.workspace,\n    } satisfies ValidateSchemaWorkerData,\n    env: process.env,\n  })\n\n  const {validation} = await new Promise<ValidateSchemaWorkerResult>((resolve, reject) => {\n    worker.addListener('message', resolve)\n    worker.addListener('error', reject)\n  })\n\n  const problems = validation.flatMap((group) => group.problems)\n  const errorCount = problems.filter((problem) => problem.severity === 'error').length\n  const warningCount = problems.filter((problem) => problem.severity === 'warning').length\n\n  const overallSeverity = getAggregatedSeverity(validation)\n\n  switch (format) {\n    case 'ndjson': {\n      for (const group of validation) {\n        output.print(JSON.stringify(group))\n      }\n      break\n    }\n    case 'json': {\n      output.print(JSON.stringify(validation))\n      break\n    }\n    default: {\n      spinner?.succeed('Validated schema')\n      output.print(`\\nValidation results:`)\n      output.print(\n        `${logSymbols.error} Errors:   ${errorCount.toLocaleString('en-US')} error${\n          errorCount === 1 ? '' : 's'\n        }`,\n      )\n      if (level !== 'error') {\n        output.print(\n          `${logSymbols.warning} Warnings: ${warningCount.toLocaleString('en-US')} warning${\n            warningCount === 1 ? '' : 's'\n          }`,\n        )\n      }\n      output.print()\n\n      output.print(formatSchemaValidation(validation))\n    }\n  }\n\n  process.exitCode = overallSeverity === 'error' ? 1 : 0\n}\n"],"names":["isTty","isatty","headers","error","chalk","bold","bgRed","black","red","warning","bgYellow","yellow","severityValues","formatPath","pathSegments","format","curr","next","mode","kind","name","type","slice","getAggregatedSeverity","groupOrGroups","Array","isArray","flatMap","group","problems","map","problem","severity","find","formatSchemaValidation","validation","unnamedTopLevelTypeCount","Object","entries","reduce","acc","firstSegment","path","topLevelType","push","sort","a","b","aType","aGroups","bType","bGroups","aValue","bValue","localeCompare","groups","formattedTopLevelType","bgWhite","header","body","formattedPath","formattedMessages","message","logSymbols","join","validateAction","args","workDir","output","flags","extOptions","rootPkgPath","readPkgUp","sync","cwd","__dirname","Error","workerPath","dirname","level","includes","spinner","workspace","start","worker","Worker","workerData","env","process","Promise","resolve","reject","addListener","errorCount","filter","length","warningCount","overallSeverity","print","JSON","stringify","succeed","toLocaleString","exitCode"],"mappings":"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"}