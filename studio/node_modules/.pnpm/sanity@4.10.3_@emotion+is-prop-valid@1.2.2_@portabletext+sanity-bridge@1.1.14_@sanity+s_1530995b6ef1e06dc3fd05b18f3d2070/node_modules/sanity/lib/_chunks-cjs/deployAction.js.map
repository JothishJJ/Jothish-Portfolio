{"version":3,"file":"deployAction.js","sources":["../../src/_internal/cli/actions/app/deployAction.ts"],"sourcesContent":["/* eslint-disable max-statements */\nimport path from 'node:path'\nimport zlib from 'node:zlib'\n\nimport {type CliCommandArguments, type CliCommandContext} from '@sanity/cli'\nimport tar from 'tar-fs'\n\nimport {getAppId} from '../../util/getAppId'\nimport {shouldAutoUpdate} from '../../util/shouldAutoUpdate'\nimport {\n  checkDir,\n  createDeployment,\n  debug,\n  dirIsEmptyOrNonExistent,\n  getInstalledSanityVersion,\n  getOrCreateApplication,\n  getOrCreateUserApplicationFromConfig,\n  type UserApplication,\n} from '../deploy/helpers'\nimport buildSanityApp, {type BuildSanityAppCommandFlags} from './buildAction'\n\nexport interface DeployAppActionFlags extends BuildSanityAppCommandFlags {\n  build?: boolean\n}\n\nexport default async function deployAppAction(\n  args: CliCommandArguments<DeployAppActionFlags>,\n  context: CliCommandContext,\n): Promise<void> {\n  const {apiClient, workDir, chalk, output, prompt, cliConfig, cliConfigPath} = context\n  const flags = {build: true, ...args.extOptions}\n  const customSourceDir = args.argsWithoutOptions[0]\n  const sourceDir = path.resolve(process.cwd(), customSourceDir || path.join(workDir, 'dist'))\n  // not really required yet, but will be required in the future\n  const isAutoUpdating = shouldAutoUpdate({flags, cliConfig})\n\n  const installedSanityVersion = await getInstalledSanityVersion()\n  const appId = getAppId({cliConfig, output})\n\n  const client = apiClient({\n    requireUser: true,\n    requireProject: false, // custom apps are not project-specific\n  }).withConfig({apiVersion: 'v2024-08-01'})\n\n  if (customSourceDir) {\n    let relativeOutput = path.relative(process.cwd(), sourceDir)\n    if (relativeOutput[0] !== '.') {\n      relativeOutput = `./${relativeOutput}`\n    }\n\n    const isEmpty = await dirIsEmptyOrNonExistent(sourceDir)\n    const shouldProceed =\n      isEmpty ||\n      (await prompt.single({\n        type: 'confirm',\n        message: `\"${relativeOutput}\" is not empty, do you want to proceed?`,\n        default: false,\n      }))\n\n    if (!shouldProceed) {\n      output.print('Cancelled.')\n      return\n    }\n\n    output.print(`Building to ${relativeOutput}\\n`)\n  }\n\n  // Check that the project exists\n  let spinner = output.spinner('Checking application info').start()\n\n  let userApplication: UserApplication\n\n  try {\n    const configParams = {\n      client,\n      context,\n      spinner,\n    }\n\n    // If the user has provided an appId in the config, use that\n    if (appId) {\n      userApplication = await getOrCreateUserApplicationFromConfig({\n        ...configParams,\n        appId,\n        appHost: undefined,\n      })\n    } else {\n      userApplication = await getOrCreateApplication(configParams)\n    }\n  } catch (err) {\n    if (err.message) {\n      output.error(chalk.red(err.message))\n      return\n    }\n\n    debug('Error creating user application', err)\n    throw err\n  }\n\n  // Always build the project, unless --no-build is passed\n  const shouldBuild = flags.build\n  if (shouldBuild) {\n    const buildArgs = {\n      ...args,\n      extOptions: flags,\n      argsWithoutOptions: [customSourceDir].filter(Boolean),\n    }\n    const {didCompile} = await buildSanityApp(buildArgs, context, {basePath: '/'})\n\n    if (!didCompile) {\n      return\n    }\n  }\n\n  // Ensure that the directory exists, is a directory and seems to have valid content\n  spinner = output.spinner('Verifying local content').start()\n  try {\n    await checkDir(sourceDir)\n    spinner.succeed()\n  } catch (err) {\n    spinner.fail()\n    debug('Error checking directory', err)\n    throw err\n  }\n\n  // Now create a tarball of the given directory\n  const parentDir = path.dirname(sourceDir)\n  const base = path.basename(sourceDir)\n  const tarball = tar.pack(parentDir, {entries: [base]}).pipe(zlib.createGzip())\n\n  spinner = output.spinner('Deploying...').start()\n  try {\n    await createDeployment({\n      client,\n      applicationId: userApplication.id,\n      version: installedSanityVersion,\n      isAutoUpdating,\n      tarball,\n      isSdkApp: true,\n    })\n\n    spinner.succeed()\n\n    // And let the user know we're done\n    output.print(`\\nSuccess! Application deployed`)\n\n    if (!appId) {\n      const example = `Example:\nexport default defineCliConfig({\n  //…\n  deployment: {\n    ${chalk.cyan`appId: '${userApplication.id}'`},\n  },\n  //…\n})`\n      output.print(`\\nAdd ${chalk.cyan(`appId: '${userApplication.id}'`)}`)\n      output.print(`to the \\`deployment\\` section in sanity.cli.js or sanity.cli.ts`)\n      output.print(`to avoid prompting for appId on next deploy.`)\n      output.print(`\\n${example}`)\n    }\n  } catch (err) {\n    spinner.fail()\n    debug('Error deploying application', err)\n    throw err\n  }\n}\n"],"names":["deployAppAction","args","context","apiClient","workDir","chalk","output","prompt","cliConfig","flags","build","extOptions","customSourceDir","argsWithoutOptions","sourceDir","path","resolve","process","cwd","join","isAutoUpdating","shouldAutoUpdate","installedSanityVersion","getInstalledSanityVersion","appId","getAppId","client","requireUser","requireProject","withConfig","apiVersion","relativeOutput","relative","dirIsEmptyOrNonExistent","single","type","message","default","print","spinner","start","userApplication","configParams","getOrCreateUserApplicationFromConfig","appHost","undefined","getOrCreateApplication","err","error","red","debug","buildArgs","filter","Boolean","didCompile","buildSanityApp","basePath","checkDir","succeed","fail","parentDir","dirname","base","basename","tarball","tar","pack","entries","pipe","zlib","createGzip","createDeployment","applicationId","id","version","isSdkApp","example","cyan"],"mappings":"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"}