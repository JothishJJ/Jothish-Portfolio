{"version":3,"file":"servers.js","sources":["../../src/_internal/cli/util/ensureTrailingSlash.ts","../../src/_internal/cli/util/servers.ts"],"sourcesContent":["/**\n * Ensures that the given path ends with a `/`, and does not add an\n * additional one if it already does\n *\n * @param path - The path to ensure has a trailing slash\n * @returns A path with a trailing slash\n * @internal\n */\nexport function ensureTrailingSlash(path: string): string {\n  return path.endsWith('/') ? path : `${path}/`\n}\n","import {type CliConfig} from '@sanity/cli'\n\nimport {ensureTrailingSlash} from './ensureTrailingSlash'\n\nexport function gracefulServerDeath(\n  command: 'start' | 'dev' | 'preview',\n  httpHost: string | undefined,\n  httpPort: number,\n  err: Error & {code?: string},\n): void {\n  if (err.code === 'EADDRINUSE') {\n    throw new Error(\n      `Port number is already in use, configure \\`server.port\\` in \\`sanity.cli.js\\` or pass \\`--port <somePort>\\` to \\`sanity ${command}\\``,\n    )\n  }\n\n  if (err.code === 'EACCES') {\n    const help =\n      httpPort < 1024\n        ? 'port numbers below 1024 requires root privileges'\n        : `do you have access to listen to the given host (${httpHost || '127.0.0.1'})?`\n\n    throw new Error(`The studio server does not have access to listen to given port - ${help}`)\n  }\n\n  throw err\n}\n\n/**\n * Resolves the shared configuration for the dev/preview server using:\n *\n * - CLI flags\n * - Environment variables\n * - User build config\n * - Default configuration\n */\nexport function getSharedServerConfig({\n  flags,\n  workDir,\n  cliConfig,\n}: {\n  flags: {host?: string; port?: string | number}\n  workDir: string\n  cliConfig?: CliConfig\n}): {\n  cwd: string\n  httpPort: number\n  httpHost: string\n  basePath: string\n  vite: CliConfig['vite']\n  entry?: string\n  isApp?: boolean\n} {\n  // Order of preference: CLI flags, environment variables, user build config, default config\n  const env = process.env\n\n  const httpHost =\n    flags.host || env.SANITY_STUDIO_SERVER_HOSTNAME || cliConfig?.server?.hostname || 'localhost'\n\n  const httpPort = toInt(\n    flags.port || env.SANITY_STUDIO_SERVER_PORT || cliConfig?.server?.port,\n    3333,\n  )\n\n  const basePath = ensureTrailingSlash(\n    env.SANITY_STUDIO_BASEPATH ?? (cliConfig?.project?.basePath || '/'),\n  )\n\n  const isApp = cliConfig && 'app' in cliConfig\n  const entry = cliConfig?.app?.entry\n\n  return {\n    cwd: workDir,\n    httpPort,\n    httpHost,\n    basePath,\n    vite: cliConfig?.vite,\n    entry,\n    isApp,\n  }\n}\n\nfunction toInt(value: string | number | undefined, defaultValue: number): number {\n  if (typeof value === 'undefined') {\n    return defaultValue\n  }\n\n  const intVal = parseInt(`${value}`, 10)\n  return Number.isFinite(intVal) ? intVal : defaultValue\n}\n"],"names":["ensureTrailingSlash","path","endsWith","gracefulServerDeath","command","httpHost","httpPort","err","code","Error","help","getSharedServerConfig","flags","workDir","cliConfig","env","process","host","SANITY_STUDIO_SERVER_HOSTNAME","server","hostname","toInt","port","SANITY_STUDIO_SERVER_PORT","basePath","SANITY_STUDIO_BASEPATH","project","isApp","entry","app","cwd","vite","value","defaultValue","intVal","parseInt","Number","isFinite"],"mappings":";AAQO,SAASA,oBAAoBC,MAAsB;AACxD,SAAOA,KAAKC,SAAS,GAAG,IAAID,OAAO,GAAGA,IAAI;AAC5C;ACNO,SAASE,oBACdC,SACAC,UACAC,UACAC,KACM;AACN,MAAIA,IAAIC,SAAS;AACf,UAAM,IAAIC,MACR,2HAA2HL,OAAO,IACpI;AAGF,MAAIG,IAAIC,SAAS,UAAU;AACzB,UAAME,OACJJ,WAAW,OACP,qDACA,mDAAmDD,YAAY,WAAW;AAEhF,UAAM,IAAII,MAAM,oEAAoEC,IAAI,EAAE;AAAA,EAC5F;AAEA,QAAMH;AACR;AAUO,SAASI,sBAAsB;AAAA,EACpCC;AAAAA,EACAC;AAAAA,EACAC;AAKF,GAQE;AAEA,QAAMC,MAAMC,QAAQD,KAEdV,WACJO,MAAMK,QAAQF,IAAIG,iCAAiCJ,WAAWK,QAAQC,YAAY,aAE9Ed,WAAWe,MACfT,MAAMU,QAAQP,IAAIQ,6BAA6BT,WAAWK,QAAQG,MAClE,IACF,GAEME,WAAWxB,oBACfe,IAAIU,2BAA2BX,WAAWY,SAASF,YAAY,IACjE,GAEMG,QAAQb,aAAa,SAASA,WAC9Bc,QAAQd,WAAWe,KAAKD;AAE9B,SAAO;AAAA,IACLE,KAAKjB;AAAAA,IACLP;AAAAA,IACAD;AAAAA,IACAmB;AAAAA,IACAO,MAAMjB,WAAWiB;AAAAA,IACjBH;AAAAA,IACAD;AAAAA,EAAAA;AAEJ;AAEA,SAASN,MAAMW,OAAoCC,cAA8B;AAC/E,MAAI,OAAOD,QAAU;AACnB,WAAOC;AAGT,QAAMC,SAASC,SAAS,GAAGH,KAAK,IAAI,EAAE;AACtC,SAAOI,OAAOC,SAASH,MAAM,IAAIA,SAASD;AAC5C;;;"}