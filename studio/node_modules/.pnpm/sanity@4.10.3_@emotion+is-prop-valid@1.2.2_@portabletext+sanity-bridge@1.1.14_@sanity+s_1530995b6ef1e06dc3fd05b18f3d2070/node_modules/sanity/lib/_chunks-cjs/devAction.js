"use strict";
var chalk = require("chalk"), helpers = require("yargs/helpers"), yargs = require("yargs/yargs"), devAction = require("./devAction2.js"), servers = require("./servers.js");
function _interopDefaultCompat(e) {
  return e && typeof e == "object" && "default" in e ? e : { default: e };
}
var chalk__default = /* @__PURE__ */ _interopDefaultCompat(chalk), yargs__default = /* @__PURE__ */ _interopDefaultCompat(yargs);
function parseCliFlags(args) {
  return yargs__default.default(helpers.hideBin(args.argv || process.argv).slice(1)).options("host", {
    type: "string"
  }).options("port", {
    type: "number"
  }).options("load-in-dashboard", {
    type: "boolean",
    default: !0
  }).argv;
}
async function startAppDevServer(args, context) {
  const flags = await parseCliFlags(args), {
    output,
    workDir,
    cliConfig
  } = context;
  flags.loadInDashboard || (output.warn("Apps cannot run without the Sanity dashboard"), output.warn("Starting dev server with the --load-in-dashboard flag set to true"));
  let organizationId;
  cliConfig && "app" in cliConfig && cliConfig.app?.organizationId && (organizationId = cliConfig.app.organizationId), organizationId || (output.error("Apps require an organization ID (orgId) specified in your sanity.cli.ts file"), process.exit(1));
  const config = devAction.getDevServerConfig({
    flags,
    workDir,
    cliConfig,
    output
  });
  try {
    output.print("Starting dev server");
    const {
      server
    } = await devAction.startDevServer({
      ...config,
      isApp: !0
    }), {
      port
    } = server.config.server, httpHost = config.httpHost || "localhost", dashboardAppUrl = await devAction.getDashboardAppURL({
      organizationId,
      httpHost,
      httpPort: port
    });
    output.print(`Dev server started on port ${port}`), output.print("View your app in the Sanity dashboard here:"), output.print(chalk__default.default.blue(chalk__default.default.underline(dashboardAppUrl)));
  } catch (err) {
    servers.gracefulServerDeath("dev", config.httpHost, config.httpPort, err);
  }
}
exports.default = startAppDevServer;
//# sourceMappingURL=devAction.js.map
