{"version":3,"file":"listSchemasAction.js","sources":["../../src/_internal/cli/actions/schema/listSchemasAction.ts"],"sourcesContent":["import {type CliCommandContext, type CliOutputter} from '@sanity/cli'\nimport chalk from 'chalk'\nimport sortBy from 'lodash/sortBy'\n\nimport {isDefined} from '../../../manifest/manifestTypeHelpers'\nimport {type CreateManifest, type StoredWorkspaceSchema} from '../../../manifest/manifestTypes'\nimport {type SchemaStoreActionResult, type SchemaStoreContext} from './schemaStoreTypes'\nimport {createManifestExtractor, ensureManifestExtractSatisfied} from './utils/mainfestExtractor'\nimport {createManifestReader} from './utils/manifestReader'\nimport {createSchemaApiClient} from './utils/schemaApiClient'\nimport {getProjectIdDatasetsOutString, projectIdDatasetPair} from './utils/schemaStoreOutStrings'\nimport {\n  parseListSchemasConfig,\n  SCHEMA_PERMISSION_HELP_TEXT,\n  type SchemaStoreCommonFlags,\n} from './utils/schemaStoreValidation'\nimport {uniqueProjectIdDataset} from './utils/uniqueProjectIdDataset'\n\nexport interface SchemaListFlags extends SchemaStoreCommonFlags {\n  json?: boolean\n  id?: string\n}\n\nclass DatasetError extends Error {\n  public projectId: string\n  public dataset: string\n  constructor(args: {projectId: string; dataset: string; options?: ErrorOptions}) {\n    super((args.options?.cause as {message?: string})?.message, args.options)\n    this.projectId = args.projectId\n    this.dataset = args.dataset\n    this.name = 'DatasetError'\n  }\n}\n\nexport default function listSchemasActionForCommand(\n  flags: SchemaListFlags,\n  context: CliCommandContext,\n): Promise<SchemaStoreActionResult> {\n  return listSchemasAction(flags, {\n    ...context,\n    manifestExtractor: createManifestExtractor(context),\n  })\n}\n\n/**\n * Lists stored schemas found in workspace datasets.\n *\n * Workspaces are determined by on-disk manifest file – not directly from sanity.config.\n * All schema store actions require a manifest to exist, so we regenerate it by default.\n * Manifest generation can be optionally disabled with --no-manifest-extract.\n * In this case the command uses and existing file or throws when missing.\n */\nexport async function listSchemasAction(\n  flags: SchemaListFlags,\n  context: SchemaStoreContext,\n): Promise<SchemaStoreActionResult> {\n  const {json, id, manifestDir, extractManifest} = parseListSchemasConfig(flags, context)\n  const {output, apiClient, jsonReader, manifestExtractor} = context\n\n  // prettier-ignore\n  if (!(await ensureManifestExtractSatisfied({schemaRequired: true, extractManifest, manifestDir,  manifestExtractor, output, telemetry: context.telemetry}))) {\n    return 'failure'\n  }\n  const {client} = createSchemaApiClient(apiClient)\n\n  const manifest = await createManifestReader({manifestDir, output, jsonReader}).getManifest()\n  const projectDatasets = uniqueProjectIdDataset(manifest.workspaces)\n\n  const schemaResults = await Promise.allSettled(\n    projectDatasets.map(async ({projectId, dataset}) => {\n      try {\n        const datasetClient = client.withConfig({projectId, dataset})\n        return id\n          ? await datasetClient.request<StoredWorkspaceSchema | undefined>({\n              method: 'GET',\n              url: `/projects/${projectId}/datasets/${dataset}/schemas/${id}`,\n            })\n          : await datasetClient.request<StoredWorkspaceSchema[] | undefined>({\n              method: 'GET',\n              url: `/projects/${projectId}/datasets/${dataset}/schemas`,\n            })\n      } catch (error) {\n        throw new DatasetError({projectId, dataset, options: {cause: error}})\n      }\n    }),\n  )\n\n  const schemas = schemaResults\n    .map((result) => {\n      if (result.status === 'fulfilled') return result.value\n\n      const error = result.reason\n      if (error instanceof DatasetError) {\n        if (\n          'cause' in error &&\n          error.cause &&\n          typeof error.cause === 'object' &&\n          'statusCode' in error.cause &&\n          error.cause.statusCode === 401\n        ) {\n          output.warn(\n            `↳ No permissions to read schema from ${projectIdDatasetPair(error)}. ${\n              SCHEMA_PERMISSION_HELP_TEXT\n            }:\\n  ${chalk.red(`${error.message}`)}`,\n          )\n          return []\n        }\n\n        const message = chalk.red(\n          `↳ Failed to fetch schema from ${projectIdDatasetPair(error)}:\\n  ${error.message}`,\n        )\n        output.error(message)\n      } else {\n        //hubris inc: given the try-catch wrapping all the full promise \"this should never happen\"\n        throw error\n      }\n      return []\n    })\n    .filter(isDefined)\n    .flat()\n\n  if (schemas.length === 0) {\n    const datasetString = getProjectIdDatasetsOutString(projectDatasets)\n    output.error(\n      id\n        ? `Schema for id \"${id}\" not found in ${datasetString}`\n        : `No schemas found in ${datasetString}`,\n    )\n    return 'failure'\n  }\n\n  if (json) {\n    output.print(`${JSON.stringify(id ? schemas[0] : schemas, null, 2)}`)\n  } else {\n    printSchemaList({schemas, output, manifest})\n  }\n  return 'success'\n}\n\nfunction printSchemaList({\n  schemas,\n  output,\n  manifest,\n}: {\n  schemas: StoredWorkspaceSchema[]\n  output: CliOutputter\n  manifest: CreateManifest\n}) {\n  const ordered = sortBy(\n    schemas\n      .map(({_createdAt: createdAt, _id: id, workspace}) => {\n        const workspaceData = manifest.workspaces.find((w) => w.name === workspace.name)\n        if (!workspaceData) return undefined\n        return [id, workspace.name, workspaceData.dataset, workspaceData.projectId, createdAt].map(\n          String,\n        )\n      })\n      .filter(isDefined),\n    ['createdAt'],\n  )\n  const headings = ['Id', 'Workspace', 'Dataset', 'ProjectId', 'CreatedAt']\n  const rows = ordered.reverse()\n\n  const maxWidths = rows.reduce(\n    (max, row) => row.map((current, index) => Math.max(current.length, max[index])),\n    headings.map((str) => str.length),\n  )\n\n  const rowToString = (row: string[]) =>\n    row.map((col, i) => `${col}`.padEnd(maxWidths[i])).join('   ')\n\n  output.print(chalk.cyan(rowToString(headings)))\n  rows.forEach((row) => output.print(rowToString(row)))\n}\n"],"names":["DatasetError","Error","constructor","args","options","cause","message","projectId","dataset","name","listSchemasActionForCommand","flags","context","listSchemasAction","manifestExtractor","createManifestExtractor","json","id","manifestDir","extractManifest","parseListSchemasConfig","output","apiClient","jsonReader","ensureManifestExtractSatisfied","schemaRequired","telemetry","client","createSchemaApiClient","manifest","createManifestReader","getManifest","projectDatasets","uniqueProjectIdDataset","workspaces","schemas","Promise","allSettled","map","datasetClient","withConfig","request","method","url","error","result","status","value","reason","statusCode","warn","projectIdDatasetPair","SCHEMA_PERMISSION_HELP_TEXT","chalk","red","filter","isDefined","flat","length","datasetString","getProjectIdDatasetsOutString","print","JSON","stringify","printSchemaList","ordered","sortBy","_createdAt","createdAt","_id","workspace","workspaceData","find","w","String","headings","rows","reverse","maxWidths","reduce","max","row","current","index","Math","str","rowToString","col","i","padEnd","join","cyan","forEach"],"mappings":"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"}