{"version":3,"file":"determineTargetMediaLibrary.js","sources":["../../src/_internal/cli/actions/media/constants.ts","../../src/_internal/cli/actions/media/lib/determineTargetMediaLibrary.ts"],"sourcesContent":["export const MINIMUM_API_VERSION = 'v2025-02-19'\nexport const ASPECT_FILE_EXTENSIONS = ['.ts', '.js']\n","import {CliCommandContext} from '@sanity/cli'\nimport {debug} from '../../../debug'\nimport {filter, firstValueFrom, groupBy, mergeMap, of, toArray, zip} from 'rxjs'\n\n/**\n * Fetch a list of available media libraries and present them to the user in a list prompt. The items\n * in the list prompt are grouped by organization id.\n */\nexport async function determineTargetMediaLibrary({\n  apiClient,\n  output,\n  prompt,\n}: CliCommandContext): Promise<string> {\n  const client = apiClient().withConfig({apiVersion: 'vX'})\n  const {projectId} = client.config()\n\n  // Note: a more user-friendly error is displayed by CLI code that is executed before this code.\n  // This function should never be executed if a project id is not defined.\n  if (typeof projectId === 'undefined') {\n    throw new Error('Project id is required')\n  }\n\n  debug('Fetching available media libraries')\n  const spinner = output.spinner('Fetching available media libraries').start()\n\n  const mediaLibrariesByOrganization = await firstValueFrom(\n    client.observable\n      .request<{\n        data: {status: 'active'; id: string; organizationId: string}[]\n      }>({\n        uri: `/media-libraries`,\n        query: {\n          projectId,\n        },\n      })\n      .pipe(\n        mergeMap((response) => response.data),\n        filter(({status}) => status === 'active'),\n        groupBy(({organizationId}) => organizationId),\n        mergeMap((group) => zip(of(group.key), group.pipe(toArray()))),\n        toArray(),\n      ),\n  )\n\n  spinner.succeed('[100%] Fetching available media libraries')\n\n  return prompt.single({\n    message: 'Select media library',\n    type: 'list',\n    choices: mediaLibrariesByOrganization.flatMap(([organizationId, mediaLibraries]) => [\n      new prompt.Separator(`Organization: ${organizationId}`),\n      ...mediaLibraries.map(({id}) => ({value: id, name: id})),\n    ]),\n  })\n}\n"],"names":["MINIMUM_API_VERSION","ASPECT_FILE_EXTENSIONS","determineTargetMediaLibrary","apiClient","output","prompt","client","withConfig","apiVersion","projectId","config","Error","debug","spinner","start","mediaLibrariesByOrganization","firstValueFrom","observable","request","uri","query","pipe","mergeMap","response","data","filter","status","groupBy","organizationId","group","zip","of","key","toArray","succeed","single","message","type","choices","flatMap","mediaLibraries","Separator","map","id","value","name"],"mappings":";;AAAO,MAAMA,sBAAsB,eACtBC,yBAAyB,CAAC,OAAO,KAAK;ACOnD,eAAsBC,4BAA4B;AAAA,EAChDC;AAAAA,EACAC;AAAAA,EACAC;AACiB,GAAoB;AACrC,QAAMC,SAASH,UAAAA,EAAYI,WAAW;AAAA,IAACC,YAAY;AAAA,EAAA,CAAK,GAClD;AAAA,IAACC;AAAAA,EAAAA,IAAaH,OAAOI,OAAAA;AAI3B,MAAI,OAAOD,YAAc;AACvB,UAAM,IAAIE,MAAM,wBAAwB;AAG1CC,YAAAA,MAAM,oCAAoC;AAC1C,QAAMC,UAAUT,OAAOS,QAAQ,oCAAoC,EAAEC,SAE/DC,+BAA+B,MAAMC,KAAAA,eACzCV,OAAOW,WACJC,QAEE;AAAA,IACDC,KAAK;AAAA,IACLC,OAAO;AAAA,MACLX;AAAAA,IAAAA;AAAAA,EACF,CACD,EACAY,KACCC,KAAAA,SAAUC,cAAaA,SAASC,IAAI,GACpCC,KAAAA,OAAO,CAAC;AAAA,IAACC;AAAAA,EAAAA,MAAYA,WAAW,QAAQ,GACxCC,KAAAA,QAAQ,CAAC;AAAA,IAACC;AAAAA,EAAAA,MAAoBA,cAAc,GAC5CN,KAAAA,SAAUO,CAAAA,UAAUC,KAAAA,IAAIC,KAAAA,GAAGF,MAAMG,GAAG,GAAGH,MAAMR,KAAKY,KAAAA,SAAS,CAAC,CAAC,GAC7DA,KAAAA,QAAAA,CACF,CACJ;AAEApB,SAAAA,QAAQqB,QAAQ,2CAA2C,GAEpD7B,OAAO8B,OAAO;AAAA,IACnBC,SAAS;AAAA,IACTC,MAAM;AAAA,IACNC,SAASvB,6BAA6BwB,QAAQ,CAAC,CAACX,gBAAgBY,cAAc,MAAM,CAClF,IAAInC,OAAOoC,UAAU,iBAAiBb,cAAc,EAAE,GACtD,GAAGY,eAAeE,IAAI,CAAC;AAAA,MAACC;AAAAA,IAAAA,OAAS;AAAA,MAACC,OAAOD;AAAAA,MAAIE,MAAMF;AAAAA,IAAAA,EAAI,CAAC,CACzD;AAAA,EAAA,CACF;AACH;;;;"}