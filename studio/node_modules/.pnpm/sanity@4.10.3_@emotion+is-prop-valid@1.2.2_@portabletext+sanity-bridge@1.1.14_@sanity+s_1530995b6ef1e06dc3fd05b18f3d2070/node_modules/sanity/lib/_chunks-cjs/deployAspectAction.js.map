{"version":3,"file":"deployAspectAction.js","sources":["../../src/_internal/cli/actions/media/deployAspectAction.ts"],"sourcesContent":["import fs from 'node:fs/promises'\nimport {EOL} from 'node:os'\nimport path from 'node:path'\n\nimport {type CliCommandAction, type CliCommandContext, type SanityClient} from '@sanity/cli'\nimport {validateMediaLibraryAssetAspect} from '@sanity/schema/_internal'\nimport {\n  isAssetAspect,\n  type MediaLibraryAssetAspectDocument,\n  type MultipleMutationResult,\n  type SchemaValidationProblem,\n} from '@sanity/types'\nimport {type Chalk} from 'chalk'\nimport {register} from 'esbuild-register/dist/node'\nimport pluralize from 'pluralize-esm'\nimport {\n  catchError,\n  filter,\n  finalize,\n  from,\n  groupBy,\n  map,\n  mergeMap,\n  type MonoTypeOperatorFunction,\n  type Observable,\n  of,\n  type OperatorFunction,\n  pipe,\n  scan,\n  switchMap,\n  takeLast,\n  tap,\n  toArray,\n  zip,\n} from 'rxjs'\n\nimport {ASPECT_FILE_EXTENSIONS, MINIMUM_API_VERSION} from './constants'\nimport {determineTargetMediaLibrary} from './lib/determineTargetMediaLibrary'\nimport {withMediaLibraryConfig} from './lib/withMediaLibraryConfig'\n\ninterface DeployAspectFlags {\n  'media-library-id'?: string\n  'aspect-id'?: string\n  'all'?: boolean\n}\n\ntype Result =\n  | {\n      status: 'failure'\n      reason: 'invalidAspect' | 'failedMutation'\n      aspects: AspectContainer[]\n      error?: unknown\n    }\n  | {\n      status: 'success'\n      aspects: AspectContainer[]\n    }\n\ntype Status = 'valid' | 'invalid'\n\ntype AspectsPair = [status: Status, aspects: AspectContainer[]]\n\ntype AspectContainer = {\n  filename: string\n  validationErrors: SchemaValidationProblem[][]\n} & (\n  | {\n      status: Extract<Status, 'valid'>\n      aspect: MediaLibraryAssetAspectDocument\n    }\n  | {\n      status: Extract<Status, 'invalid'>\n      aspect: unknown\n    }\n)\n\nconst deployAspectAction: CliCommandAction<DeployAspectFlags> = async (args, context) => {\n  const {output, apiClient, mediaLibrary} = withMediaLibraryConfig(context)\n  const [aspectId] = args.argsWithoutOptions\n  const all = args.extOptions.all ?? false\n\n  if (!all && typeof aspectId === 'undefined') {\n    output.error(\n      'Specify an aspect name, or use the `--all` option to deploy all aspect definitions.',\n    )\n    return\n  }\n\n  if (all && typeof aspectId !== 'undefined') {\n    output.error('Specified both an aspect name and `--all`.')\n    return\n  }\n\n  const mediaLibraryId =\n    args.extOptions['media-library-id'] ?? (await determineTargetMediaLibrary(context))\n\n  const client = apiClient().withConfig({\n    apiVersion: MINIMUM_API_VERSION,\n    requestTagPrefix: 'sanity.mediaLibraryCli',\n  })\n\n  importAspects({\n    aspectsPath: mediaLibrary.aspectsPath,\n    filterAspects: (entry) => {\n      if (all) {\n        return true\n      }\n\n      if (typeof entry === 'object' && entry !== null && '_id' in entry) {\n        return entry._id === aspectId\n      }\n\n      return false\n    },\n  })\n    .pipe(\n      mergeMap<AspectsPair, Observable<Result>>(([status, aspects]) => {\n        if (status === 'invalid') {\n          return of<Result>({\n            status: 'failure',\n            reason: 'invalidAspect',\n            aspects,\n          })\n        }\n\n        return of(aspects).pipe(\n          deployAspects({\n            client,\n            mediaLibraryId,\n            dryRun: false,\n          }),\n        )\n      }),\n      reportResult({context}),\n      reportUnfoundAspect({aspectId, context}),\n    )\n    .subscribe()\n}\n\nexport default deployAspectAction\n\nfunction importAspects({\n  aspectsPath,\n  filterAspects = () => true,\n}: {\n  aspectsPath: string\n  filterAspects?: (aspect: unknown) => boolean\n}): Observable<AspectsPair> {\n  let unregister: (() => void) | undefined\n\n  const entries = fs.readdir(aspectsPath, {\n    withFileTypes: true,\n  })\n\n  return from(entries).pipe(\n    tap({\n      subscribe() {\n        if (!__DEV__) {\n          unregister = register({\n            target: `node${process.version.slice(1)}`,\n            supported: {'dynamic-import': true},\n          }).unregister\n        }\n      },\n    }),\n    mergeMap((entry) => from(entry)),\n    filter((file) => file.isFile()),\n    filter((file) => ASPECT_FILE_EXTENSIONS.includes(path.extname(file.name))),\n    switchMap((file) => importAspect({aspectsPath, filename: file.name})),\n    map(([filename, maybeAspect]) => {\n      if (!isAssetAspect(maybeAspect)) {\n        return {\n          status: 'invalid' as const,\n          aspect: maybeAspect,\n          validationErrors: [],\n          filename,\n        }\n      }\n\n      const [valid, errors] = validateMediaLibraryAssetAspect(maybeAspect.definition)\n\n      if (!valid) {\n        return {\n          status: 'invalid' as const,\n          aspect: maybeAspect,\n          validationErrors: errors,\n          filename,\n        }\n      }\n\n      return {\n        status: 'valid' as const,\n        aspect: maybeAspect,\n        validationErrors: [],\n        filename,\n      }\n    }),\n    groupBy<AspectContainer, 'valid' | 'invalid'>((maybeAspect) => maybeAspect.status),\n    mergeMap(\n      (group) =>\n        zip(\n          of(group.key),\n          group.pipe(\n            filter(({aspect}) => filterAspects(aspect)),\n            toArray(),\n          ),\n        ) as Observable<AspectsPair>,\n    ),\n    finalize(() => unregister?.()),\n  )\n}\n\nfunction importAspect({\n  aspectsPath,\n  filename,\n}: {\n  aspectsPath: string\n  filename: string\n}): Observable<[filename: string, aspect: MediaLibraryAssetAspectDocument]> {\n  // eslint-disable-next-line import/no-dynamic-require\n  return of([filename, require(path.resolve(aspectsPath, filename)).default])\n}\n\nfunction deployAspects({\n  client,\n  dryRun,\n  mediaLibraryId,\n}: {\n  client: SanityClient\n  dryRun: boolean\n  mediaLibraryId: string\n}): OperatorFunction<AspectContainer[], Result> {\n  return pipe(\n    filter((aspects) => aspects.length !== 0),\n    switchMap((aspects) => {\n      return client.observable\n        .request<MultipleMutationResult>({\n          method: 'POST',\n          uri: `/media-libraries/${mediaLibraryId}/mutate`,\n          tag: 'deployAspects',\n          query: {\n            dryRun: String(dryRun),\n          },\n          body: {\n            mutations: aspects.map(({aspect}) => ({\n              createOrReplace: aspect,\n            })),\n          },\n        })\n        .pipe(\n          mergeMap(() =>\n            of<Result>({\n              status: 'success',\n              aspects,\n            }),\n          ),\n          catchError((error) =>\n            of<Result>({\n              status: 'failure',\n              reason: 'failedMutation',\n              error: error.message,\n              aspects,\n            }),\n          ),\n        )\n    }),\n  )\n}\n\nfunction reportResult({context}: {context: CliCommandContext}): MonoTypeOperatorFunction<Result> {\n  return tap((result) => {\n    const {output, chalk} = context\n\n    const list = formatAspectList({\n      aspects: result.aspects,\n      chalk,\n    })\n\n    if (result.status === 'success' && result.aspects.length !== 0) {\n      output.print()\n      output.success(\n        chalk.bold(\n          `Deployed ${result.aspects.length} ${pluralize('aspect', result.aspects.length)}`,\n        ),\n      )\n      output.print(list)\n    }\n\n    if (\n      result.status === 'failure' &&\n      result.aspects.length !== 0 &&\n      result.reason === 'invalidAspect'\n    ) {\n      output.print()\n      output.warn(\n        chalk.bold(\n          `Skipped ${result.aspects.length} invalid ${pluralize('aspect', result.aspects.length)}`,\n        ),\n      )\n      output.print(list)\n    }\n\n    if (\n      result.status === 'failure' &&\n      result.aspects.length !== 0 &&\n      result.reason === 'failedMutation'\n    ) {\n      output.print()\n      output.error(\n        chalk.bold(\n          `Failed to deploy ${result.aspects.length} ${pluralize('aspect', result.aspects.length)}`,\n        ),\n      )\n      output.print(list)\n      output.print()\n      output.print(chalk.red(result.error))\n    }\n  })\n}\n\nfunction reportUnfoundAspect({\n  aspectId,\n  context,\n}: {\n  context: CliCommandContext\n  aspectId?: string\n}): OperatorFunction<Result, AspectContainer[]> {\n  const {output, chalk} = context\n\n  return pipe(\n    scan<Result, AspectContainer[]>((aspects, result) => aspects.concat(result.aspects), []),\n    takeLast(1),\n    tap((aspects) => {\n      const aspectNotFound = aspects.length === 0 && aspectId\n      if (aspectNotFound) {\n        output.print()\n        output.error(`Could not find aspect: ${chalk.bold(aspectId)}`)\n      }\n    }),\n  )\n}\n\nfunction formatAspectList({aspects, chalk}: {aspects: AspectContainer[]; chalk: Chalk}): string {\n  return aspects\n    .map(({aspect, filename, validationErrors}) => {\n      const label =\n        typeof aspect === 'object' &&\n        aspect !== null &&\n        '_id' in aspect &&\n        typeof aspect._id !== 'undefined'\n          ? aspect._id\n          : 'Unnamed aspect'\n\n      const simplifiedErrors = validationErrors.flatMap((group) =>\n        group.map(({message}) => message),\n      )\n\n      const errorLabel = simplifiedErrors.length === 0 ? '' : ` ${chalk.bgRed(simplifiedErrors[0])}`\n\n      const remainingErrorsCount = simplifiedErrors.length - 1\n\n      const remainingErrorsLabel =\n        remainingErrorsCount > 0\n          ? chalk.italic(\n              ` and ${simplifiedErrors.length - 1} other ${pluralize('error', remainingErrorsCount)}`,\n            )\n          : ''\n\n      return `  - ${label} ${chalk.dim(filename)}${errorLabel}${remainingErrorsLabel}`\n    })\n    .join(EOL)\n}\n"],"names":["deployAspectAction","args","context","output","apiClient","mediaLibrary","withMediaLibraryConfig","aspectId","argsWithoutOptions","all","extOptions","error","mediaLibraryId","determineTargetMediaLibrary","client","withConfig","apiVersion","MINIMUM_API_VERSION","requestTagPrefix","importAspects","aspectsPath","filterAspects","entry","_id","pipe","mergeMap","status","aspects","of","reason","deployAspects","dryRun","reportResult","reportUnfoundAspect","subscribe","unregister","entries","fs","readdir","withFileTypes","from","tap","register","target","process","version","slice","supported","filter","file","isFile","ASPECT_FILE_EXTENSIONS","includes","path","extname","name","switchMap","importAspect","filename","map","maybeAspect","isAssetAspect","aspect","validationErrors","valid","errors","validateMediaLibraryAssetAspect","definition","groupBy","group","zip","key","toArray","finalize","require","resolve","default","length","observable","request","method","uri","tag","query","String","body","mutations","createOrReplace","catchError","message","result","chalk","list","formatAspectList","print","success","bold","pluralize","warn","red","scan","concat","takeLast","label","simplifiedErrors","flatMap","errorLabel","bgRed","remainingErrorsCount","remainingErrorsLabel","italic","dim","join","EOL"],"mappings":"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"}