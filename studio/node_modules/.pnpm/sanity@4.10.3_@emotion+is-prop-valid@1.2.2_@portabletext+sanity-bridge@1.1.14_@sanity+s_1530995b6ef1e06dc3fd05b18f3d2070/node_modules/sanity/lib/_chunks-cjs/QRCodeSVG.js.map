{"version":3,"file":"QRCodeSVG.js","sources":["../../src/presentation/preview/qrcodegen.ts","../../src/presentation/preview/QRCodeSVG.tsx"],"sourcesContent":["/**\n * \\@license QR Code generator library (TypeScript)\n * Copyright (c) Project Nayuki.\n * SPDX-License-Identifier: MIT\n */\n/* eslint-disable no-negated-condition,unicorn/prefer-string-slice,no-param-reassign,no-bitwise,max-params */\n\ntype bit = number\ntype byte = number\ntype int = number\n\n/*---- QR Code symbol class ----*/\n\n/*\n * A QR Code symbol, which is a type of two-dimension barcode.\n * Invented by Denso Wave and described in the ISO/IEC 18004 standard.\n * Instances of this class represent an immutable square grid of dark and light cells.\n * The class provides static factory functions to create a QR Code from text or binary data.\n * The class covers the QR Code Model 2 specification, supporting all versions (sizes)\n * from 1 to 40, all 4 error correction levels, and 4 character encoding modes.\n *\n * Ways to create a QR Code object:\n * - High level: Take the payload data and call QrCode.encodeText() or QrCode.encodeBinary().\n * - Mid level: Custom-make the list of segments and call QrCode.encodeSegments().\n * - Low level: Custom-make the array of data codeword bytes (including\n *   segment headers and final padding, excluding error correction codewords),\n *   supply the appropriate version number, and call the QrCode() constructor.\n * (Note that all ways require supplying the desired error correction level.)\n */\nexport class QrCode {\n  /*-- Static factory functions (high level) --*/\n\n  // Returns a QR Code representing the given Unicode text string at the given error correction level.\n  // As a conservative upper bound, this function is guaranteed to succeed for strings that have 738 or fewer\n  // Unicode code points (not UTF-16 code units) if the low error correction level is used. The smallest possible\n  // QR Code version is automatically chosen for the output. The ECC level of the result may be higher than the\n  // ecl argument if it can be done without increasing the version.\n  public static encodeText(text: string, ecl: Ecc): QrCode {\n    const segs: Array<QrSegment> = QrSegment.makeSegments(text)\n    return QrCode.encodeSegments(segs, ecl)\n  }\n\n  // Returns a QR Code representing the given binary data at the given error correction level.\n  // This function always encodes using the binary segment mode, not any text mode. The maximum number of\n  // bytes allowed is 2953. The smallest possible QR Code version is automatically chosen for the output.\n  // The ECC level of the result may be higher than the ecl argument if it can be done without increasing the version.\n  public static encodeBinary(data: Readonly<Array<byte>>, ecl: Ecc): QrCode {\n    const seg: QrSegment = QrSegment.makeBytes(data)\n    return QrCode.encodeSegments([seg], ecl)\n  }\n\n  /*-- Static factory functions (mid level) --*/\n\n  // Returns a QR Code representing the given segments with the given encoding parameters.\n  // The smallest possible QR Code version within the given range is automatically\n  // chosen for the output. Iff boostEcl is true, then the ECC level of the result\n  // may be higher than the ecl argument if it can be done without increasing the\n  // version. The mask number is either between 0 to 7 (inclusive) to force that\n  // mask, or -1 to automatically choose an appropriate mask (which may be slow).\n  // This function allows the user to create a custom sequence of segments that switches\n  // between modes (such as alphanumeric and byte) to encode text in less space.\n  // This is a mid-level API; the high-level API is encodeText() and encodeBinary().\n  public static encodeSegments(\n    segs: Readonly<Array<QrSegment>>,\n    ecl: Ecc,\n    minVersion: int = 1,\n    maxVersion: int = 40,\n    mask: int = -1,\n    boostEcl: boolean = true,\n  ): QrCode {\n    if (\n      !(\n        QrCode.MIN_VERSION <= minVersion &&\n        minVersion <= maxVersion &&\n        maxVersion <= QrCode.MAX_VERSION\n      ) ||\n      mask < -1 ||\n      mask > 7\n    )\n      throw new RangeError('Invalid value')\n\n    // Find the minimal version number to use\n    let version: int\n    let dataUsedBits: int\n    for (version = minVersion; ; version++) {\n      const dataCapacityBits: int = QrCode.getNumDataCodewords(version, ecl) * 8 // Number of data bits available\n      const usedBits: number = QrSegment.getTotalBits(segs, version)\n      if (usedBits <= dataCapacityBits) {\n        dataUsedBits = usedBits\n        break // This version number is found to be suitable\n      }\n      if (version >= maxVersion)\n        // All versions in the range could not fit the given data\n        throw new RangeError('Data too long')\n    }\n\n    // Increase the error correction level while the data still fits in the current version number\n    for (const newEcl of [Ecc.MEDIUM, Ecc.QUARTILE, Ecc.HIGH]) {\n      // From low to high\n      if (boostEcl && dataUsedBits <= QrCode.getNumDataCodewords(version, newEcl) * 8) ecl = newEcl\n    }\n\n    // Concatenate all segments to create the data bit string\n    const bb: Array<bit> = []\n    for (const seg of segs) {\n      appendBits(seg.mode.modeBits, 4, bb)\n      appendBits(seg.numChars, seg.mode.numCharCountBits(version), bb)\n      for (const b of seg.getData()) bb.push(b)\n    }\n    assert(bb.length == dataUsedBits)\n\n    // Add terminator and pad up to a byte if applicable\n    const dataCapacityBits: int = QrCode.getNumDataCodewords(version, ecl) * 8\n    assert(bb.length <= dataCapacityBits)\n    appendBits(0, Math.min(4, dataCapacityBits - bb.length), bb)\n    appendBits(0, (8 - (bb.length % 8)) % 8, bb)\n    assert(bb.length % 8 == 0)\n\n    // Pad with alternating bytes until data capacity is reached\n    for (let padByte = 0xec; bb.length < dataCapacityBits; padByte ^= 0xec ^ 0x11)\n      appendBits(padByte, 8, bb)\n\n    // Pack bits into bytes in big endian\n    const dataCodewords: Array<byte> = []\n    while (dataCodewords.length * 8 < bb.length) dataCodewords.push(0)\n    bb.forEach((b: bit, i: int) => (dataCodewords[i >>> 3] |= b << (7 - (i & 7))))\n\n    // Create the QR Code object\n    return new QrCode(version, ecl, dataCodewords, mask)\n  }\n\n  /*-- Fields --*/\n\n  // The width and height of this QR Code, measured in modules, between\n  // 21 and 177 (inclusive). This is equal to version * 4 + 17.\n  public readonly size: int\n\n  // The index of the mask pattern used in this QR Code, which is between 0 and 7 (inclusive).\n  // Even if a QR Code is created with automatic masking requested (mask = -1),\n  // the resulting object still has a mask value between 0 and 7.\n  public readonly mask: int\n\n  // The modules of this QR Code (false = light, true = dark).\n  // Immutable after constructor finishes. Accessed through getModule().\n  private readonly modules: Array<Array<boolean>> = []\n\n  // Indicates function modules that are not subjected to masking. Discarded when constructor finishes.\n  private readonly isFunction: Array<Array<boolean>> = []\n\n  // The version number of this QR Code, which is between 1 and 40 (inclusive).\n  // This determines the size of this barcode.\n  public readonly version: int\n\n  // The error correction level used in this QR Code.\n  public readonly errorCorrectionLevel: Ecc\n\n  /*-- Constructor (low level) and fields --*/\n\n  // Creates a new QR Code with the given version number,\n  // error correction level, data codeword bytes, and mask number.\n  // This is a low-level API that most users should not use directly.\n  // A mid-level API is the encodeSegments() function.\n  public constructor(\n    version: int,\n\n    errorCorrectionLevel: Ecc,\n\n    dataCodewords: Readonly<Array<byte>>,\n\n    msk: int,\n  ) {\n    this.version = version\n    this.errorCorrectionLevel = errorCorrectionLevel\n\n    // Check scalar arguments\n    if (version < QrCode.MIN_VERSION || version > QrCode.MAX_VERSION)\n      throw new RangeError('Version value out of range')\n    if (msk < -1 || msk > 7) throw new RangeError('Mask value out of range')\n    this.size = version * 4 + 17\n\n    // Initialize both grids to be size*size arrays of Boolean false\n    const row: Array<boolean> = []\n    for (let i = 0; i < this.size; i++) row.push(false)\n    for (let i = 0; i < this.size; i++) {\n      this.modules.push(row.slice()) // Initially all light\n      this.isFunction.push(row.slice())\n    }\n\n    // Compute ECC, draw modules\n    this.drawFunctionPatterns()\n    const allCodewords: Array<byte> = this.addEccAndInterleave(dataCodewords)\n    this.drawCodewords(allCodewords)\n\n    // Do masking\n    if (msk == -1) {\n      // Automatically choose best mask\n      let minPenalty: int = 1000000000\n      for (let i = 0; i < 8; i++) {\n        this.applyMask(i)\n        this.drawFormatBits(i)\n        const penalty: int = this.getPenaltyScore()\n        if (penalty < minPenalty) {\n          msk = i\n          minPenalty = penalty\n        }\n        this.applyMask(i) // Undoes the mask due to XOR\n      }\n    }\n    assert(0 <= msk && msk <= 7)\n    this.mask = msk\n    this.applyMask(msk) // Apply the final choice of mask\n    this.drawFormatBits(msk) // Overwrite old format bits\n\n    this.isFunction = []\n  }\n\n  /*-- Accessor methods --*/\n\n  // Returns the color of the module (pixel) at the given coordinates, which is false\n  // for light or true for dark. The top left corner has the coordinates (x=0, y=0).\n  // If the given coordinates are out of bounds, then false (light) is returned.\n  public getModule(x: int, y: int): boolean {\n    return 0 <= x && x < this.size && 0 <= y && y < this.size && this.modules[y][x]\n  }\n\n  // Modified to expose modules for easy access\n  public getModules(): boolean[][] {\n    return this.modules\n  }\n\n  /*-- Private helper methods for constructor: Drawing function modules --*/\n\n  // Reads this object's version field, and draws and marks all function modules.\n  private drawFunctionPatterns(): void {\n    // Draw horizontal and vertical timing patterns\n    for (let i = 0; i < this.size; i++) {\n      this.setFunctionModule(6, i, i % 2 == 0)\n      this.setFunctionModule(i, 6, i % 2 == 0)\n    }\n\n    // Draw 3 finder patterns (all corners except bottom right; overwrites some timing modules)\n    this.drawFinderPattern(3, 3)\n    this.drawFinderPattern(this.size - 4, 3)\n    this.drawFinderPattern(3, this.size - 4)\n\n    // Draw numerous alignment patterns\n    const alignPatPos: Array<int> = this.getAlignmentPatternPositions()\n    const numAlign: int = alignPatPos.length\n    for (let i = 0; i < numAlign; i++) {\n      for (let j = 0; j < numAlign; j++) {\n        // Don't draw on the three finder corners\n        if (!((i == 0 && j == 0) || (i == 0 && j == numAlign - 1) || (i == numAlign - 1 && j == 0)))\n          this.drawAlignmentPattern(alignPatPos[i], alignPatPos[j])\n      }\n    }\n\n    // Draw configuration data\n    this.drawFormatBits(0) // Dummy mask value; overwritten later in the constructor\n    this.drawVersion()\n  }\n\n  // Draws two copies of the format bits (with its own error correction code)\n  // based on the given mask and this object's error correction level field.\n  private drawFormatBits(mask: int): void {\n    // Calculate error correction code and pack bits\n    const data: int = (this.errorCorrectionLevel.formatBits << 3) | mask // errCorrLvl is uint2, mask is uint3\n    let rem: int = data\n    for (let i = 0; i < 10; i++) rem = (rem << 1) ^ ((rem >>> 9) * 0x537)\n    const bits = ((data << 10) | rem) ^ 0x5412 // uint15\n    assert(bits >>> 15 == 0)\n\n    // Draw first copy\n    for (let i = 0; i <= 5; i++) this.setFunctionModule(8, i, getBit(bits, i))\n    this.setFunctionModule(8, 7, getBit(bits, 6))\n    this.setFunctionModule(8, 8, getBit(bits, 7))\n    this.setFunctionModule(7, 8, getBit(bits, 8))\n    for (let i = 9; i < 15; i++) this.setFunctionModule(14 - i, 8, getBit(bits, i))\n\n    // Draw second copy\n    for (let i = 0; i < 8; i++) this.setFunctionModule(this.size - 1 - i, 8, getBit(bits, i))\n    for (let i = 8; i < 15; i++) this.setFunctionModule(8, this.size - 15 + i, getBit(bits, i))\n    this.setFunctionModule(8, this.size - 8, true) // Always dark\n  }\n\n  // Draws two copies of the version bits (with its own error correction code),\n  // based on this object's version field, iff 7 <= version <= 40.\n  private drawVersion(): void {\n    if (this.version < 7) return\n\n    // Calculate error correction code and pack bits\n    let rem: int = this.version // version is uint6, in the range [7, 40]\n    for (let i = 0; i < 12; i++) rem = (rem << 1) ^ ((rem >>> 11) * 0x1f25)\n    const bits: int = (this.version << 12) | rem // uint18\n    assert(bits >>> 18 == 0)\n\n    // Draw two copies\n    for (let i = 0; i < 18; i++) {\n      const color: boolean = getBit(bits, i)\n      const a: int = this.size - 11 + (i % 3)\n      const b: int = Math.floor(i / 3)\n      this.setFunctionModule(a, b, color)\n      this.setFunctionModule(b, a, color)\n    }\n  }\n\n  // Draws a 9*9 finder pattern including the border separator,\n  // with the center module at (x, y). Modules can be out of bounds.\n  private drawFinderPattern(x: int, y: int): void {\n    for (let dy = -4; dy <= 4; dy++) {\n      for (let dx = -4; dx <= 4; dx++) {\n        const dist: int = Math.max(Math.abs(dx), Math.abs(dy)) // Chebyshev/infinity norm\n        const xx: int = x + dx\n        const yy: int = y + dy\n        if (0 <= xx && xx < this.size && 0 <= yy && yy < this.size)\n          this.setFunctionModule(xx, yy, dist != 2 && dist != 4)\n      }\n    }\n  }\n\n  // Draws a 5*5 alignment pattern, with the center module\n  // at (x, y). All modules must be in bounds.\n  private drawAlignmentPattern(x: int, y: int): void {\n    for (let dy = -2; dy <= 2; dy++) {\n      for (let dx = -2; dx <= 2; dx++)\n        this.setFunctionModule(x + dx, y + dy, Math.max(Math.abs(dx), Math.abs(dy)) != 1)\n    }\n  }\n\n  // Sets the color of a module and marks it as a function module.\n  // Only used by the constructor. Coordinates must be in bounds.\n  private setFunctionModule(x: int, y: int, isDark: boolean): void {\n    this.modules[y][x] = isDark\n    this.isFunction[y][x] = true\n  }\n\n  /*-- Private helper methods for constructor: Codewords and masking --*/\n\n  // Returns a new byte string representing the given data with the appropriate error correction\n  // codewords appended to it, based on this object's version and error correction level.\n  private addEccAndInterleave(data: Readonly<Array<byte>>): Array<byte> {\n    const ver: int = this.version\n    const ecl: Ecc = this.errorCorrectionLevel\n    if (data.length != QrCode.getNumDataCodewords(ver, ecl))\n      throw new RangeError('Invalid argument')\n\n    // Calculate parameter numbers\n    const numBlocks: int = QrCode.NUM_ERROR_CORRECTION_BLOCKS[ecl.ordinal][ver]\n    const blockEccLen: int = QrCode.ECC_CODEWORDS_PER_BLOCK[ecl.ordinal][ver]\n    const rawCodewords: int = Math.floor(QrCode.getNumRawDataModules(ver) / 8)\n    const numShortBlocks: int = numBlocks - (rawCodewords % numBlocks)\n    const shortBlockLen: int = Math.floor(rawCodewords / numBlocks)\n\n    // Split data into blocks and append ECC to each block\n    const blocks: Array<Array<byte>> = []\n    const rsDiv: Array<byte> = QrCode.reedSolomonComputeDivisor(blockEccLen)\n    for (let i = 0, k = 0; i < numBlocks; i++) {\n      const dat: Array<byte> = data.slice(\n        k,\n        k + shortBlockLen - blockEccLen + (i < numShortBlocks ? 0 : 1),\n      )\n      k += dat.length\n      const ecc: Array<byte> = QrCode.reedSolomonComputeRemainder(dat, rsDiv)\n      if (i < numShortBlocks) dat.push(0)\n      blocks.push(dat.concat(ecc))\n    }\n\n    // Interleave (not concatenate) the bytes from every block into a single sequence\n    const result: Array<byte> = []\n    for (let i = 0; i < blocks[0].length; i++) {\n      blocks.forEach((block, j) => {\n        // Skip the padding byte in short blocks\n        if (i != shortBlockLen - blockEccLen || j >= numShortBlocks) result.push(block[i])\n      })\n    }\n    assert(result.length == rawCodewords)\n    return result\n  }\n\n  // Draws the given sequence of 8-bit codewords (data and error correction) onto the entire\n  // data area of this QR Code. Function modules need to be marked off before this is called.\n  private drawCodewords(data: Readonly<Array<byte>>): void {\n    if (data.length != Math.floor(QrCode.getNumRawDataModules(this.version) / 8))\n      throw new RangeError('Invalid argument')\n    let i: int = 0 // Bit index into the data\n    // Do the funny zigzag scan\n    for (let right = this.size - 1; right >= 1; right -= 2) {\n      // Index of right column in each column pair\n      if (right == 6) right = 5\n      for (let vert = 0; vert < this.size; vert++) {\n        // Vertical counter\n        for (let j = 0; j < 2; j++) {\n          const x: int = right - j // Actual x coordinate\n          const upward: boolean = ((right + 1) & 2) == 0\n          const y: int = upward ? this.size - 1 - vert : vert // Actual y coordinate\n          if (!this.isFunction[y][x] && i < data.length * 8) {\n            this.modules[y][x] = getBit(data[i >>> 3], 7 - (i & 7))\n            i++\n          }\n          // If this QR Code has any remainder bits (0 to 7), they were assigned as\n          // 0/false/light by the constructor and are left unchanged by this method\n        }\n      }\n    }\n    assert(i == data.length * 8)\n  }\n\n  // XORs the codeword modules in this QR Code with the given mask pattern.\n  // The function modules must be marked and the codeword bits must be drawn\n  // before masking. Due to the arithmetic of XOR, calling applyMask() with\n  // the same mask value a second time will undo the mask. A final well-formed\n  // QR Code needs exactly one (not zero, two, etc.) mask applied.\n  private applyMask(mask: int): void {\n    if (mask < 0 || mask > 7) throw new RangeError('Mask value out of range')\n    for (let y = 0; y < this.size; y++) {\n      for (let x = 0; x < this.size; x++) {\n        let invert: boolean\n        switch (mask) {\n          case 0:\n            invert = (x + y) % 2 == 0\n            break\n          case 1:\n            invert = y % 2 == 0\n            break\n          case 2:\n            invert = x % 3 == 0\n            break\n          case 3:\n            invert = (x + y) % 3 == 0\n            break\n          case 4:\n            invert = (Math.floor(x / 3) + Math.floor(y / 2)) % 2 == 0\n            break\n          case 5:\n            invert = ((x * y) % 2) + ((x * y) % 3) == 0\n            break\n          case 6:\n            invert = (((x * y) % 2) + ((x * y) % 3)) % 2 == 0\n            break\n          case 7:\n            invert = (((x + y) % 2) + ((x * y) % 3)) % 2 == 0\n            break\n          default:\n            throw new Error('Unreachable')\n        }\n        if (!this.isFunction[y][x] && invert) this.modules[y][x] = !this.modules[y][x]\n      }\n    }\n  }\n\n  // Calculates and returns the penalty score based on state of this QR Code's current modules.\n  // This is used by the automatic mask choice algorithm to find the mask pattern that yields the lowest score.\n  private getPenaltyScore(): int {\n    let result: int = 0\n\n    // Adjacent modules in row having same color, and finder-like patterns\n    for (let y = 0; y < this.size; y++) {\n      let runColor = false\n      let runX = 0\n      const runHistory = [0, 0, 0, 0, 0, 0, 0]\n      for (let x = 0; x < this.size; x++) {\n        if (this.modules[y][x] == runColor) {\n          runX++\n          if (runX == 5) result += QrCode.PENALTY_N1\n          else if (runX > 5) result++\n        } else {\n          this.finderPenaltyAddHistory(runX, runHistory)\n          if (!runColor) result += this.finderPenaltyCountPatterns(runHistory) * QrCode.PENALTY_N3\n          runColor = this.modules[y][x]\n          runX = 1\n        }\n      }\n      result += this.finderPenaltyTerminateAndCount(runColor, runX, runHistory) * QrCode.PENALTY_N3\n    }\n    // Adjacent modules in column having same color, and finder-like patterns\n    for (let x = 0; x < this.size; x++) {\n      let runColor = false\n      let runY = 0\n      const runHistory = [0, 0, 0, 0, 0, 0, 0]\n      for (let y = 0; y < this.size; y++) {\n        if (this.modules[y][x] == runColor) {\n          runY++\n          if (runY == 5) result += QrCode.PENALTY_N1\n          else if (runY > 5) result++\n        } else {\n          this.finderPenaltyAddHistory(runY, runHistory)\n          if (!runColor) result += this.finderPenaltyCountPatterns(runHistory) * QrCode.PENALTY_N3\n          runColor = this.modules[y][x]\n          runY = 1\n        }\n      }\n      result += this.finderPenaltyTerminateAndCount(runColor, runY, runHistory) * QrCode.PENALTY_N3\n    }\n\n    // 2*2 blocks of modules having same color\n    for (let y = 0; y < this.size - 1; y++) {\n      for (let x = 0; x < this.size - 1; x++) {\n        const color: boolean = this.modules[y][x]\n        if (\n          color == this.modules[y][x + 1] &&\n          color == this.modules[y + 1][x] &&\n          color == this.modules[y + 1][x + 1]\n        )\n          result += QrCode.PENALTY_N2\n      }\n    }\n\n    // Balance of dark and light modules\n    let dark: int = 0\n    for (const row of this.modules) dark = row.reduce((sum, color) => sum + (color ? 1 : 0), dark)\n    const total: int = this.size * this.size // Note that size is odd, so dark/total != 1/2\n    // Compute the smallest integer k >= 0 such that (45-5k)% <= dark/total <= (55+5k)%\n    const k: int = Math.ceil(Math.abs(dark * 20 - total * 10) / total) - 1\n    assert(0 <= k && k <= 9)\n    result += k * QrCode.PENALTY_N4\n    assert(0 <= result && result <= 2568888) // Non-tight upper bound based on default values of PENALTY_N1, ..., N4\n    return result\n  }\n\n  /*-- Private helper functions --*/\n\n  // Returns an ascending list of positions of alignment patterns for this version number.\n  // Each position is in the range [0,177), and are used on both the x and y axes.\n  // This could be implemented as lookup table of 40 variable-length lists of integers.\n  private getAlignmentPatternPositions(): Array<int> {\n    if (this.version == 1) return []\n\n    const numAlign: int = Math.floor(this.version / 7) + 2\n    const step: int =\n      this.version == 32 ? 26 : Math.ceil((this.version * 4 + 4) / (numAlign * 2 - 2)) * 2\n    const result: Array<int> = [6]\n    for (let pos = this.size - 7; result.length < numAlign; pos -= step) result.splice(1, 0, pos)\n    return result\n  }\n\n  // Returns the number of data bits that can be stored in a QR Code of the given version number, after\n  // all function modules are excluded. This includes remainder bits, so it might not be a multiple of 8.\n  // The result is in the range [208, 29648]. This could be implemented as a 40-entry lookup table.\n  private static getNumRawDataModules(ver: int): int {\n    if (ver < QrCode.MIN_VERSION || ver > QrCode.MAX_VERSION)\n      throw new RangeError('Version number out of range')\n    let result: int = (16 * ver + 128) * ver + 64\n    if (ver >= 2) {\n      const numAlign: int = Math.floor(ver / 7) + 2\n      result -= (25 * numAlign - 10) * numAlign - 55\n      if (ver >= 7) result -= 36\n    }\n    assert(208 <= result && result <= 29648)\n    return result\n  }\n\n  // Returns the number of 8-bit data (i.e. not error correction) codewords contained in any\n  // QR Code of the given version number and error correction level, with remainder bits discarded.\n  // This stateless pure function could be implemented as a (40*4)-cell lookup table.\n  private static getNumDataCodewords(ver: int, ecl: Ecc): int {\n    return (\n      Math.floor(QrCode.getNumRawDataModules(ver) / 8) -\n      QrCode.ECC_CODEWORDS_PER_BLOCK[ecl.ordinal][ver] *\n        QrCode.NUM_ERROR_CORRECTION_BLOCKS[ecl.ordinal][ver]\n    )\n  }\n\n  // Returns a Reed-Solomon ECC generator polynomial for the given degree. This could be\n  // implemented as a lookup table over all possible parameter values, instead of as an algorithm.\n  private static reedSolomonComputeDivisor(degree: int): Array<byte> {\n    if (degree < 1 || degree > 255) throw new RangeError('Degree out of range')\n    // Polynomial coefficients are stored from highest to lowest power, excluding the leading term which is always 1.\n    // For example the polynomial x^3 + 255x^2 + 8x + 93 is stored as the uint8 array [255, 8, 93].\n    const result: Array<byte> = []\n    for (let i = 0; i < degree - 1; i++) result.push(0)\n    result.push(1) // Start off with the monomial x^0\n\n    // Compute the product polynomial (x - r^0) * (x - r^1) * (x - r^2) * ... * (x - r^{degree-1}),\n    // and drop the highest monomial term which is always 1x^degree.\n    // Note that r = 0x02, which is a generator element of this field GF(2^8/0x11D).\n    let root = 1\n    for (let i = 0; i < degree; i++) {\n      // Multiply the current product by (x - r^i)\n      for (let j = 0; j < result.length; j++) {\n        result[j] = QrCode.reedSolomonMultiply(result[j], root)\n        if (j + 1 < result.length) result[j] ^= result[j + 1]\n      }\n      root = QrCode.reedSolomonMultiply(root, 0x02)\n    }\n    return result\n  }\n\n  // Returns the Reed-Solomon error correction codeword for the given data and divisor polynomials.\n  private static reedSolomonComputeRemainder(\n    data: Readonly<Array<byte>>,\n    divisor: Readonly<Array<byte>>,\n  ): Array<byte> {\n    const result: Array<byte> = divisor.map((_) => 0)\n    for (const b of data) {\n      // Polynomial division\n      const factor: byte = b ^ (result.shift() as byte)\n      result.push(0)\n      divisor.forEach((coef, i) => (result[i] ^= QrCode.reedSolomonMultiply(coef, factor)))\n    }\n    return result\n  }\n\n  // Returns the product of the two given field elements modulo GF(2^8/0x11D). The arguments and result\n  // are unsigned 8-bit integers. This could be implemented as a lookup table of 256*256 entries of uint8.\n  private static reedSolomonMultiply(x: byte, y: byte): byte {\n    if (x >>> 8 != 0 || y >>> 8 != 0) throw new RangeError('Byte out of range')\n    // Russian peasant multiplication\n    let z: int = 0\n    for (let i = 7; i >= 0; i--) {\n      z = (z << 1) ^ ((z >>> 7) * 0x11d)\n      z ^= ((y >>> i) & 1) * x\n    }\n    assert(z >>> 8 == 0)\n    return z as byte\n  }\n\n  // Can only be called immediately after a light run is added, and\n  // returns either 0, 1, or 2. A helper function for getPenaltyScore().\n  private finderPenaltyCountPatterns(runHistory: Readonly<Array<int>>): int {\n    const n: int = runHistory[1]\n    assert(n <= this.size * 3)\n    const core: boolean =\n      n > 0 &&\n      runHistory[2] == n &&\n      runHistory[3] == n * 3 &&\n      runHistory[4] == n &&\n      runHistory[5] == n\n    return (\n      (core && runHistory[0] >= n * 4 && runHistory[6] >= n ? 1 : 0) +\n      (core && runHistory[6] >= n * 4 && runHistory[0] >= n ? 1 : 0)\n    )\n  }\n\n  // Must be called at the end of a line (row or column) of modules. A helper function for getPenaltyScore().\n  private finderPenaltyTerminateAndCount(\n    currentRunColor: boolean,\n    currentRunLength: int,\n    runHistory: Array<int>,\n  ): int {\n    if (currentRunColor) {\n      // Terminate dark run\n      this.finderPenaltyAddHistory(currentRunLength, runHistory)\n      currentRunLength = 0\n    }\n    currentRunLength += this.size // Add light border to final run\n    this.finderPenaltyAddHistory(currentRunLength, runHistory)\n    return this.finderPenaltyCountPatterns(runHistory)\n  }\n\n  // Pushes the given value to the front and drops the last value. A helper function for getPenaltyScore().\n  private finderPenaltyAddHistory(currentRunLength: int, runHistory: Array<int>): void {\n    if (runHistory[0] == 0) currentRunLength += this.size // Add light border to initial run\n    runHistory.pop()\n    runHistory.unshift(currentRunLength)\n  }\n\n  /*-- Constants and tables --*/\n\n  // The minimum version number supported in the QR Code Model 2 standard.\n  public static readonly MIN_VERSION: int = 1\n  // The maximum version number supported in the QR Code Model 2 standard.\n  public static readonly MAX_VERSION: int = 40\n\n  // For use in getPenaltyScore(), when evaluating which mask is best.\n  private static readonly PENALTY_N1: int = 3\n  private static readonly PENALTY_N2: int = 3\n  private static readonly PENALTY_N3: int = 40\n  private static readonly PENALTY_N4: int = 10\n\n  private static readonly ECC_CODEWORDS_PER_BLOCK: Array<Array<int>> = [\n    // Version: (note that index 0 is for padding, and is set to an illegal value)\n    //0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40    Error correction level\n    [\n      -1, 7, 10, 15, 20, 26, 18, 20, 24, 30, 18, 20, 24, 26, 30, 22, 24, 28, 30, 28, 28, 28, 28, 30,\n      30, 26, 28, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30,\n    ], // Low\n    [\n      -1, 10, 16, 26, 18, 24, 16, 18, 22, 22, 26, 30, 22, 22, 24, 24, 28, 28, 26, 26, 26, 26, 28,\n      28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28,\n    ], // Medium\n    [\n      -1, 13, 22, 18, 26, 18, 24, 18, 22, 20, 24, 28, 26, 24, 20, 30, 24, 28, 28, 26, 30, 28, 30,\n      30, 30, 30, 28, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30,\n    ], // Quartile\n    [\n      -1, 17, 28, 22, 16, 22, 28, 26, 26, 24, 28, 24, 28, 22, 24, 24, 30, 28, 28, 26, 28, 30, 24,\n      30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30,\n    ], // High\n  ]\n\n  private static readonly NUM_ERROR_CORRECTION_BLOCKS: Array<Array<int>> = [\n    // Version: (note that index 0 is for padding, and is set to an illegal value)\n    //0, 1, 2, 3, 4, 5, 6, 7, 8, 9,10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40    Error correction level\n    [\n      -1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 4, 4, 4, 4, 4, 6, 6, 6, 6, 7, 8, 8, 9, 9, 10, 12, 12, 12, 13,\n      14, 15, 16, 17, 18, 19, 19, 20, 21, 22, 24, 25,\n    ], // Low\n    [\n      -1, 1, 1, 1, 2, 2, 4, 4, 4, 5, 5, 5, 8, 9, 9, 10, 10, 11, 13, 14, 16, 17, 17, 18, 20, 21, 23,\n      25, 26, 28, 29, 31, 33, 35, 37, 38, 40, 43, 45, 47, 49,\n    ], // Medium\n    [\n      -1, 1, 1, 2, 2, 4, 4, 6, 6, 8, 8, 8, 10, 12, 16, 12, 17, 16, 18, 21, 20, 23, 23, 25, 27, 29,\n      34, 34, 35, 38, 40, 43, 45, 48, 51, 53, 56, 59, 62, 65, 68,\n    ], // Quartile\n    [\n      -1, 1, 1, 2, 4, 4, 4, 5, 6, 8, 8, 11, 11, 16, 16, 18, 16, 19, 21, 25, 25, 25, 34, 30, 32, 35,\n      37, 40, 42, 45, 48, 51, 54, 57, 60, 63, 66, 70, 74, 77, 81,\n    ], // High\n  ]\n}\n\n// Appends the given number of low-order bits of the given value\n// to the given buffer. Requires 0 <= len <= 31 and 0 <= val < 2^len.\nfunction appendBits(val: int, len: int, bb: Array<bit>): void {\n  if (len < 0 || len > 31 || val >>> len != 0) throw new RangeError('Value out of range')\n  for (\n    let i = len - 1;\n    i >= 0;\n    i-- // Append bit by bit\n  )\n    bb.push((val >>> i) & 1)\n}\n\n// Returns true iff the i'th bit of x is set to 1.\nfunction getBit(x: int, i: int): boolean {\n  return ((x >>> i) & 1) != 0\n}\n\n// Throws an exception if the given condition is false.\nfunction assert(cond: boolean): void {\n  if (!cond) throw new Error('Assertion error')\n}\n\n/*---- Data segment class ----*/\n\n/*\n * A segment of character/binary/control data in a QR Code symbol.\n * Instances of this class are immutable.\n * The mid-level way to create a segment is to take the payload data\n * and call a static factory function such as QrSegment.makeNumeric().\n * The low-level way to create a segment is to custom-make the bit buffer\n * and call the QrSegment() constructor with appropriate values.\n * This segment class imposes no length restrictions, but QR Codes have restrictions.\n * Even in the most favorable conditions, a QR Code can only hold 7089 characters of data.\n * Any segment longer than this is meaningless for the purpose of generating QR Codes.\n */\n\nexport class QrSegment {\n  /*-- Static factory functions (mid level) --*/\n\n  // Returns a segment representing the given binary data encoded in\n  // byte mode. All input byte arrays are acceptable. Any text string\n  // can be converted to UTF-8 bytes and encoded as a byte mode segment.\n  public static makeBytes(data: Readonly<Array<byte>>): QrSegment {\n    const bb: Array<bit> = []\n    for (const b of data) appendBits(b, 8, bb)\n    return new QrSegment(Mode.BYTE, data.length, bb)\n  }\n\n  // Returns a segment representing the given string of decimal digits encoded in numeric mode.\n  public static makeNumeric(digits: string): QrSegment {\n    if (!QrSegment.isNumeric(digits)) throw new RangeError('String contains non-numeric characters')\n    const bb: Array<bit> = []\n    for (let i = 0; i < digits.length; ) {\n      // Consume up to 3 digits per iteration\n      const n: int = Math.min(digits.length - i, 3)\n      appendBits(parseInt(digits.substring(i, i + n), 10), n * 3 + 1, bb)\n      i += n\n    }\n    return new QrSegment(Mode.NUMERIC, digits.length, bb)\n  }\n\n  // Returns a segment representing the given text string encoded in alphanumeric mode.\n  // The characters allowed are: 0 to 9, A to Z (uppercase only), space,\n  // dollar, percent, asterisk, plus, hyphen, period, slash, colon.\n  public static makeAlphanumeric(text: string): QrSegment {\n    if (!QrSegment.isAlphanumeric(text))\n      throw new RangeError('String contains unencodable characters in alphanumeric mode')\n    const bb: Array<bit> = []\n    let i: int\n    for (i = 0; i + 2 <= text.length; i += 2) {\n      // Process groups of 2\n      let temp: int = QrSegment.ALPHANUMERIC_CHARSET.indexOf(text.charAt(i)) * 45\n      temp += QrSegment.ALPHANUMERIC_CHARSET.indexOf(text.charAt(i + 1))\n      appendBits(temp, 11, bb)\n    }\n    if (i < text.length)\n      // 1 character remaining\n      appendBits(QrSegment.ALPHANUMERIC_CHARSET.indexOf(text.charAt(i)), 6, bb)\n    return new QrSegment(Mode.ALPHANUMERIC, text.length, bb)\n  }\n\n  // Returns a new mutable list of zero or more segments to represent the given Unicode text string.\n  // The result may use various segment modes and switch modes to optimize the length of the bit stream.\n  public static makeSegments(text: string): Array<QrSegment> {\n    // Select the most efficient segment encoding automatically\n    if (text == '') return []\n    else if (QrSegment.isNumeric(text)) return [QrSegment.makeNumeric(text)]\n    else if (QrSegment.isAlphanumeric(text)) return [QrSegment.makeAlphanumeric(text)]\n    return [QrSegment.makeBytes(QrSegment.toUtf8ByteArray(text))]\n  }\n\n  // Returns a segment representing an Extended Channel Interpretation\n  // (ECI) designator with the given assignment value.\n  public static makeEci(assignVal: int): QrSegment {\n    const bb: Array<bit> = []\n    if (assignVal < 0) throw new RangeError('ECI assignment value out of range')\n    else if (assignVal < 1 << 7) appendBits(assignVal, 8, bb)\n    else if (assignVal < 1 << 14) {\n      appendBits(0b10, 2, bb)\n      appendBits(assignVal, 14, bb)\n    } else if (assignVal < 1000000) {\n      appendBits(0b110, 3, bb)\n      appendBits(assignVal, 21, bb)\n    } else throw new RangeError('ECI assignment value out of range')\n    return new QrSegment(Mode.ECI, 0, bb)\n  }\n\n  // Tests whether the given string can be encoded as a segment in numeric mode.\n  // A string is encodable iff each character is in the range 0 to 9.\n  public static isNumeric(text: string): boolean {\n    return QrSegment.NUMERIC_REGEX.test(text)\n  }\n\n  // Tests whether the given string can be encoded as a segment in alphanumeric mode.\n  // A string is encodable iff each character is in the following set: 0 to 9, A to Z\n  // (uppercase only), space, dollar, percent, asterisk, plus, hyphen, period, slash, colon.\n  public static isAlphanumeric(text: string): boolean {\n    return QrSegment.ALPHANUMERIC_REGEX.test(text)\n  }\n\n  // The mode indicator of this segment.\n  public readonly mode: Mode\n  // The length of this segment's unencoded data. Measured in characters for\n  // numeric/alphanumeric/kanji mode, bytes for byte mode, and 0 for ECI mode.\n  // Always zero or positive. Not the same as the data's bit length.\n  public readonly numChars: int\n  // The data bits of this segment. Accessed through getData().\n  private readonly bitData: Array<bit>\n\n  /*-- Constructor (low level) and fields --*/\n\n  // Creates a new QR Code segment with the given attributes and data.\n  // The character count (numChars) must agree with the mode and the bit buffer length,\n  // but the constraint isn't checked. The given bit buffer is cloned and stored.\n  public constructor(\n    mode: Mode,\n\n    numChars: int,\n\n    bitData: Array<bit>,\n  ) {\n    this.mode = mode\n    this.numChars = numChars\n\n    if (numChars < 0) throw new RangeError('Invalid argument')\n    this.bitData = bitData.slice() // Make defensive copy\n  }\n\n  /*-- Methods --*/\n\n  // Returns a new copy of the data bits of this segment.\n  public getData(): Array<bit> {\n    return this.bitData.slice() // Make defensive copy\n  }\n\n  // (Package-private) Calculates and returns the number of bits needed to encode the given segments at\n  // the given version. The result is infinity if a segment has too many characters to fit its length field.\n  public static getTotalBits(segs: Readonly<Array<QrSegment>>, version: int): number {\n    let result: number = 0\n    for (const seg of segs) {\n      const ccbits: int = seg.mode.numCharCountBits(version)\n      if (seg.numChars >= 1 << ccbits) return Infinity // The segment's length doesn't fit the field's bit width\n      result += 4 + ccbits + seg.bitData.length\n    }\n    return result\n  }\n\n  // Returns a new array of bytes representing the given string encoded in UTF-8.\n  private static toUtf8ByteArray(str: string): Array<byte> {\n    str = encodeURI(str)\n    const result: Array<byte> = []\n    for (let i = 0; i < str.length; i++) {\n      if (str.charAt(i) != '%') result.push(str.charCodeAt(i))\n      else {\n        result.push(parseInt(str.substring(i + 1, i + 3), 16))\n        i += 2\n      }\n    }\n    return result\n  }\n\n  /*-- Constants --*/\n\n  // Describes precisely all strings that are encodable in numeric mode.\n  private static readonly NUMERIC_REGEX: RegExp = /^[0-9]*$/\n\n  // Describes precisely all strings that are encodable in alphanumeric mode.\n  private static readonly ALPHANUMERIC_REGEX: RegExp = /^[A-Z0-9 $%*+./:-]*$/\n\n  // The set of all legal characters in alphanumeric mode,\n  // where each character value maps to the index in the string.\n  private static readonly ALPHANUMERIC_CHARSET: string =\n    '0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ $%*+-./:'\n}\n\n/*\n * The error correction level in a QR Code symbol. Immutable.\n */\nexport class Ecc {\n  /*-- Constants --*/\n\n  public static readonly LOW = new Ecc(0, 1) // The QR Code can tolerate about  7% erroneous codewords\n  public static readonly MEDIUM = new Ecc(1, 0) // The QR Code can tolerate about 15% erroneous codewords\n  public static readonly QUARTILE = new Ecc(2, 3) // The QR Code can tolerate about 25% erroneous codewords\n  public static readonly HIGH = new Ecc(3, 2) // The QR Code can tolerate about 30% erroneous codewords\n\n  // In the range 0 to 3 (unsigned 2-bit integer).\n  public readonly ordinal: int\n  // (Package-private) In the range 0 to 3 (unsigned 2-bit integer).\n  public readonly formatBits: int\n\n  /*-- Constructor and fields --*/\n\n  private constructor(ordinal: int, formatBits: int) {\n    this.ordinal = ordinal\n    this.formatBits = formatBits\n  }\n}\n\n/*\n * Describes how a segment's data bits are interpreted. Immutable.\n */\nexport class Mode {\n  /*-- Constants --*/\n\n  public static readonly NUMERIC = new Mode(0x1, [10, 12, 14])\n  public static readonly ALPHANUMERIC = new Mode(0x2, [9, 11, 13])\n  public static readonly BYTE = new Mode(0x4, [8, 16, 16])\n  public static readonly KANJI = new Mode(0x8, [8, 10, 12])\n  public static readonly ECI = new Mode(0x7, [0, 0, 0])\n\n  // The mode indicator bits, which is a uint4 value (range 0 to 15).\n  public readonly modeBits: int\n  // Number of character count bits for three different version ranges.\n  private readonly numBitsCharCount: [int, int, int]\n\n  /*-- Constructor and fields --*/\n\n  private constructor(modeBits: int, numBitsCharCount: [int, int, int]) {\n    this.modeBits = modeBits\n    this.numBitsCharCount = numBitsCharCount\n  }\n\n  /*-- Method --*/\n\n  // (Package-private) Returns the bit width of the character count field for a segment in\n  // this mode in a QR Code at the given version number. The result is in the range [0, 16].\n  public numCharCountBits(ver: int): int {\n    return this.numBitsCharCount[Math.floor((ver + 7) / 17)]\n  }\n}\n","/**\n * This component is a fork of the `qrcode.react` package, original licensing can be found below.\n * \\@license qrcode.react\n * Copyright (c) Paul O'Shannessy\n * SPDX-License-Identifier: ISC\n */\n\n/* eslint-disable @typescript-eslint/no-shadow,no-eq-null,prefer-arrow-callback */\n\nimport {motion} from 'framer-motion'\nimport {memo, useMemo} from 'react'\n\nimport {Ecc, QrCode, QrSegment} from './qrcodegen'\n\ntype Modules = Array<Array<boolean>>\ntype Excavation = {x: number; y: number; w: number; h: number}\ntype ErrorCorrectionLevel = 'L' | 'M' | 'Q' | 'H'\n\ntype ERROR_LEVEL_MAPPED_TYPE = {\n  [index in ErrorCorrectionLevel]: Ecc\n}\n\nconst ERROR_LEVEL_MAP: ERROR_LEVEL_MAPPED_TYPE = {\n  L: Ecc.LOW,\n  M: Ecc.MEDIUM,\n  Q: Ecc.QUARTILE,\n  H: Ecc.HIGH,\n} as const\n\ntype QRProps = {\n  /**\n   * The value to encode into the QR Code.\n   */\n  value: string\n  /**\n   * The size, in pixels, to render the QR Code.\n   * @defaultValue 128\n   */\n  size?: number\n  /**\n   * The Error Correction Level to use.\n   * @see https://www.qrcode.com/en/about/error_correction.html\n   * @defaultValue L\n   */\n  level?: ErrorCorrectionLevel\n  /**\n   * @defaultValue #000000\n   */\n  color?: string\n  /**\n   * The title to assign to the QR Code. Used for accessibility reasons.\n   */\n  title?: string\n  /**\n   * The minimum version used when encoding the QR Code. Valid values are 1-40\n   * with higher values resulting in more complex QR Codes. The optimal\n   * (lowest) version is determined for the `value` provided, using `minVersion`\n   * as the lower bound.\n   * @defaultValue 1\n   */\n  minVersion?: number\n  logoSize?: number\n}\n\nconst DEFAULT_SIZE = 128\nconst DEFAULT_LEVEL: ErrorCorrectionLevel = 'L'\nconst DEFAULT_FGCOLOR = '#000000'\nconst DEFAULT_INCLUDEMARGIN = false\nconst DEFAULT_MINVERSION = 1\n\nconst SPEC_MARGIN_SIZE = 4\nconst DEFAULT_MARGIN_SIZE = 0\n\nfunction generatePath(modules: Modules, margin: number = 0): string {\n  const ops: Array<string> = []\n  modules.forEach(function (row, y) {\n    let start: number | null = null\n    row.forEach(function (cell, x) {\n      if (!cell && start !== null) {\n        // M0 0h7v1H0z injects the space with the move and drops the comma,\n        // saving a char per operation\n        ops.push(`M${start + margin} ${y + margin}h${x - start}v1H${start + margin}z`)\n        start = null\n        return\n      }\n\n      // end of row, clean up or skip\n      if (x === row.length - 1) {\n        if (!cell) {\n          // We would have closed the op above already so this can only mean\n          // 2+ light modules in a row.\n          return\n        }\n        if (start === null) {\n          // Just a single dark module.\n          ops.push(`M${x + margin},${y + margin} h1v1H${x + margin}z`)\n        } else {\n          // Otherwise finish the current line.\n          ops.push(`M${start + margin},${y + margin} h${x + 1 - start}v1H${start + margin}z`)\n        }\n        return\n      }\n\n      if (cell && start === null) {\n        start = x\n      }\n    })\n  })\n  return ops.join('')\n}\n\n// We could just do this in generatePath, except that we want to support\n// non-Path2D canvas, so we need to keep it an explicit step.\nfunction excavateModules(modules: Modules, excavation: Excavation): Modules {\n  return modules.slice().map((row, y) => {\n    if (y < excavation.y || y >= excavation.y + excavation.h) {\n      return row\n    }\n    return row.map((cell, x) => {\n      if (x < excavation.x || x >= excavation.x + excavation.w) {\n        return cell\n      }\n      return false\n    })\n  })\n}\n\nfunction getImageSettings(\n  cells: Modules,\n  size: number,\n  margin: number,\n  logoSize?: number,\n): null | {\n  x: number\n  y: number\n  h: number\n  w: number\n  excavation: Excavation | null\n} {\n  if (!logoSize) {\n    return null\n  }\n  const numCells = cells.length + margin * 2\n  const scale = numCells / size\n  const w = logoSize * scale\n  const h = logoSize * scale\n  const x = cells.length / 2 - w / 2\n  const y = cells.length / 2 - h / 2\n\n  const floorX = Math.floor(x)\n  const floorY = Math.floor(y)\n  const ceilW = Math.ceil(w + x - floorX)\n  const ceilH = Math.ceil(h + y - floorY)\n  const excavation = {x: floorX, y: floorY, w: ceilW, h: ceilH}\n\n  return {x, y, h, w, excavation}\n}\n\nfunction getMarginSize(includeMargin: boolean, marginSize?: number): number {\n  if (marginSize != null) {\n    return Math.max(Math.floor(marginSize), 0)\n  }\n  return includeMargin ? SPEC_MARGIN_SIZE : DEFAULT_MARGIN_SIZE\n}\n\nfunction useQRCode({\n  value,\n  level,\n  minVersion,\n  includeMargin,\n  marginSize,\n  logoSize,\n  size,\n}: {\n  value: string\n  level: ErrorCorrectionLevel\n  minVersion: number\n  includeMargin: boolean\n  marginSize?: number\n  logoSize?: number\n  size: number\n}) {\n  const qrcode = useMemo(() => {\n    const segments = QrSegment.makeSegments(value)\n    return QrCode.encodeSegments(segments, ERROR_LEVEL_MAP[level], minVersion)\n  }, [value, level, minVersion])\n\n  const {cells, margin, numCells, calculatedImageSettings} = useMemo(() => {\n    const cells = qrcode.getModules()\n\n    const margin = getMarginSize(includeMargin, marginSize)\n    const numCells = cells.length + margin * 2\n    const calculatedImageSettings = getImageSettings(cells, size, margin, logoSize)\n    return {\n      cells,\n      margin,\n      numCells,\n      calculatedImageSettings,\n    }\n  }, [qrcode, size, logoSize, includeMargin, marginSize])\n\n  return {\n    qrcode,\n    margin,\n    cells,\n    numCells,\n    calculatedImageSettings,\n  }\n}\n\nfunction QRCodeSVGComponent(props: QRProps) {\n  const {\n    value,\n    size = DEFAULT_SIZE,\n    level = DEFAULT_LEVEL,\n    color = DEFAULT_FGCOLOR,\n    minVersion = DEFAULT_MINVERSION,\n    title,\n    logoSize,\n  } = props\n  const marginSize: number | undefined = undefined\n\n  const {margin, cells, numCells, calculatedImageSettings} = useQRCode({\n    value,\n    level,\n    minVersion,\n    includeMargin: DEFAULT_INCLUDEMARGIN,\n    marginSize,\n    logoSize,\n    size,\n  })\n\n  const cellsToDraw = useMemo(\n    () =>\n      logoSize && calculatedImageSettings?.excavation\n        ? excavateModules(cells, calculatedImageSettings.excavation)\n        : cells,\n    [calculatedImageSettings?.excavation, cells, logoSize],\n  )\n\n  // Drawing strategy: instead of a rect per module, we're going to create a\n  // single path for the dark modules and layer that on top of a light rect,\n  // for a total of 2 DOM nodes. We pay a bit more in string concat but that's\n  // way faster than DOM ops.\n  // For level 1, 441 nodes -> 2\n  // For level 40, 31329 -> 2\n  const fgPath = generatePath(cellsToDraw, margin)\n\n  return (\n    <svg height={size} width={size} viewBox={`0 0 ${numCells} ${numCells}`} role=\"img\">\n      {!!title && <title>{title}</title>}\n      <motion.path\n        fill={color}\n        d={fgPath}\n        shapeRendering=\"crispEdges\"\n        initial={{opacity: 0}}\n        animate={{opacity: 2}}\n        exit={{opacity: -1}}\n      />\n    </svg>\n  )\n}\nconst QRCodeSVG = memo(QRCodeSVGComponent)\nQRCodeSVG.displayName = 'Memo(QRCodeSVG)'\n\nexport default QRCodeSVG\n"],"names":["QrCode","encodeText","text","ecl","segs","QrSegment","makeSegments","encodeSegments","encodeBinary","data","seg","makeBytes","minVersion","maxVersion","mask","boostEcl","MIN_VERSION","MAX_VERSION","RangeError","version","dataUsedBits","dataCapacityBits","getNumDataCodewords","usedBits","getTotalBits","newEcl","Ecc","MEDIUM","QUARTILE","HIGH","bb","appendBits","mode","modeBits","numChars","numCharCountBits","b","getData","push","assert","length","Math","min","padByte","dataCodewords","forEach","i","modules","isFunction","constructor","errorCorrectionLevel","msk","size","row","slice","drawFunctionPatterns","allCodewords","addEccAndInterleave","drawCodewords","minPenalty","applyMask","drawFormatBits","penalty","getPenaltyScore","getModule","x","y","getModules","setFunctionModule","drawFinderPattern","alignPatPos","getAlignmentPatternPositions","numAlign","j","drawAlignmentPattern","drawVersion","formatBits","rem","bits","getBit","color","a","floor","dy","dx","dist","max","abs","xx","yy","isDark","ver","numBlocks","NUM_ERROR_CORRECTION_BLOCKS","ordinal","blockEccLen","ECC_CODEWORDS_PER_BLOCK","rawCodewords","getNumRawDataModules","numShortBlocks","shortBlockLen","blocks","rsDiv","reedSolomonComputeDivisor","k","dat","ecc","reedSolomonComputeRemainder","concat","result","block","right","vert","invert","Error","runColor","runX","runHistory","PENALTY_N1","finderPenaltyAddHistory","finderPenaltyCountPatterns","PENALTY_N3","finderPenaltyTerminateAndCount","runY","PENALTY_N2","dark","reduce","sum","total","ceil","PENALTY_N4","step","pos","splice","degree","root","reedSolomonMultiply","divisor","map","_","factor","shift","coef","z","n","core","currentRunColor","currentRunLength","pop","unshift","val","len","cond","Mode","BYTE","makeNumeric","digits","isNumeric","parseInt","substring","NUMERIC","makeAlphanumeric","isAlphanumeric","temp","ALPHANUMERIC_CHARSET","indexOf","charAt","ALPHANUMERIC","toUtf8ByteArray","makeEci","assignVal","ECI","NUMERIC_REGEX","test","ALPHANUMERIC_REGEX","bitData","ccbits","Infinity","str","encodeURI","charCodeAt","LOW","KANJI","numBitsCharCount","ERROR_LEVEL_MAP","L","M","Q","H","DEFAULT_SIZE","DEFAULT_LEVEL","DEFAULT_FGCOLOR","DEFAULT_INCLUDEMARGIN","DEFAULT_MINVERSION","SPEC_MARGIN_SIZE","DEFAULT_MARGIN_SIZE","generatePath","margin","ops","start","cell","join","excavateModules","excavation","h","w","getImageSettings","cells","logoSize","scale","floorX","floorY","ceilW","ceilH","getMarginSize","includeMargin","marginSize","useQRCode","value","level","qrcode","useMemo","segments","numCells","calculatedImageSettings","QRCodeSVGComponent","props","title","undefined","cellsToDraw","fgPath","jsxs","jsx","motion","opacity","QRCodeSVG","memo","displayName"],"mappings":"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"}