{"version":3,"file":"deleteApiAction.js","sources":["../../src/_internal/cli/actions/graphql/deleteApiAction.ts"],"sourcesContent":["import {type CliCommandArguments, type CliCommandContext} from '@sanity/cli'\nimport {type SanityClient} from '@sanity/client'\nimport {hideBin} from 'yargs/helpers'\nimport yargs from 'yargs/yargs'\n\nimport {getGraphQLAPIs} from './getGraphQLAPIs'\n\nexport interface DeleteGraphQLApiFlags {\n  project?: string\n  dataset?: string\n  tag?: string\n  force?: boolean\n}\n\nfunction parseCliFlags(args: {argv?: string[]}) {\n  return yargs(hideBin(args.argv || process.argv).slice(2))\n    .option('api', {type: 'string'})\n    .option('project', {type: 'string'})\n    .option('dataset', {type: 'string'})\n    .option('tag', {type: 'string', default: 'default'})\n    .option('force', {type: 'boolean'}).argv\n}\n\nexport default async function deleteGraphQLApi(\n  args: CliCommandArguments<DeleteGraphQLApiFlags>,\n  context: CliCommandContext,\n): Promise<void> {\n  // Reparsing CLI flags for better control of binary flags\n  const flags = await parseCliFlags(args)\n  const {apiClient, output, prompt} = context\n\n  // Use explicitly defined flags where possible\n  let projectId = flags.project\n  let dataset = flags.dataset\n  let tag = flags.tag\n\n  // If specifying --api, use it for the flags not provided\n  if (flags.api) {\n    const apiDefs = await getGraphQLAPIs(context)\n    const apiDef = apiDefs.find((def) => def.id === flags.api)\n    if (!apiDef) {\n      throw new Error(`GraphQL API \"${flags.api}\" not found`)\n    }\n\n    if (projectId) {\n      output.warn(`Both --api and --project specified, using --project ${projectId}`)\n    } else {\n      projectId = apiDef.projectId\n    }\n\n    if (dataset) {\n      output.warn(`Both --api and --dataset specified, using --dataset ${dataset}`)\n    } else {\n      dataset = apiDef.dataset\n    }\n\n    if (tag && apiDef.tag) {\n      output.warn(`Both --api and --tag specified, using --tag ${tag}`)\n    } else {\n      tag = apiDef.tag || 'default'\n    }\n  }\n\n  // If neither --api nor --project/dataset is specified, use the CLI config for values\n  let client: SanityClient\n  if (!projectId || !dataset) {\n    client = apiClient({\n      requireUser: true,\n      requireProject: true,\n    }).config({apiVersion: '2023-08-01'})\n\n    projectId = projectId || client.config().projectId\n    dataset = dataset || client.config().dataset\n  } else {\n    client = apiClient({requireProject: false, requireUser: true}).config({projectId, dataset})\n  }\n\n  const confirmMessage =\n    tag === 'default'\n      ? `Are you absolutely sure you want to delete the current GraphQL API connected to the \"${dataset}\" dataset in project ${projectId}?`\n      : `Are you absolutely sure you want to delete the GraphQL API connected to the \"${dataset}\" dataset in project ${projectId}, tagged \"${tag}\"?`\n\n  const confirmedDelete =\n    flags.force ||\n    (await prompt.single({\n      type: 'confirm',\n      message: confirmMessage,\n      default: false,\n    }))\n\n  if (!confirmedDelete) {\n    return\n  }\n\n  if (projectId !== client.config().projectId) {\n    client = client.clone().config({projectId})\n  }\n\n  try {\n    await client.request({\n      url: `/apis/graphql/${dataset}/${tag}`,\n      method: 'DELETE',\n    })\n  } catch (err) {\n    throw err\n  }\n\n  output.print('GraphQL API deleted')\n}\n"],"names":["parseCliFlags","args","yargs","hideBin","argv","process","slice","option","type","default","deleteGraphQLApi","context","flags","apiClient","output","prompt","projectId","project","dataset","tag","api","apiDef","getGraphQLAPIs","find","def","id","Error","warn","client","requireUser","requireProject","config","apiVersion","confirmMessage","force","single","message","clone","request","url","method","err","print"],"mappings":";;;;;;AAcA,SAASA,cAAcC,MAAyB;AAC9C,SAAOC,uBAAMC,QAAAA,QAAQF,KAAKG,QAAQC,QAAQD,IAAI,EAAEE,MAAM,CAAC,CAAC,EACrDC,OAAO,OAAO;AAAA,IAACC,MAAM;AAAA,EAAA,CAAS,EAC9BD,OAAO,WAAW;AAAA,IAACC,MAAM;AAAA,EAAA,CAAS,EAClCD,OAAO,WAAW;AAAA,IAACC,MAAM;AAAA,EAAA,CAAS,EAClCD,OAAO,OAAO;AAAA,IAACC,MAAM;AAAA,IAAUC,SAAS;AAAA,EAAA,CAAU,EAClDF,OAAO,SAAS;AAAA,IAACC,MAAM;AAAA,EAAA,CAAU,EAAEJ;AACxC;AAEA,eAA8BM,iBAC5BT,MACAU,SACe;AAEf,QAAMC,QAAQ,MAAMZ,cAAcC,IAAI,GAChC;AAAA,IAACY;AAAAA,IAAWC;AAAAA,IAAQC;AAAAA,EAAAA,IAAUJ;AAGpC,MAAIK,YAAYJ,MAAMK,SAClBC,UAAUN,MAAMM,SAChBC,MAAMP,MAAMO;AAGhB,MAAIP,MAAMQ,KAAK;AAEb,UAAMC,UADU,MAAMC,eAAAA,eAAeX,OAAO,GACrBY,KAAMC,CAAAA,QAAQA,IAAIC,OAAOb,MAAMQ,GAAG;AACzD,QAAI,CAACC;AACH,YAAM,IAAIK,MAAM,gBAAgBd,MAAMQ,GAAG,aAAa;AAGpDJ,gBACFF,OAAOa,KAAK,uDAAuDX,SAAS,EAAE,IAE9EA,YAAYK,OAAOL,WAGjBE,UACFJ,OAAOa,KAAK,uDAAuDT,OAAO,EAAE,IAE5EA,UAAUG,OAAOH,SAGfC,OAAOE,OAAOF,MAChBL,OAAOa,KAAK,+CAA+CR,GAAG,EAAE,IAEhEA,MAAME,OAAOF,OAAO;AAAA,EAExB;AAGA,MAAIS;AACA,GAACZ,aAAa,CAACE,WACjBU,SAASf,UAAU;AAAA,IACjBgB,aAAa;AAAA,IACbC,gBAAgB;AAAA,EAAA,CACjB,EAAEC,OAAO;AAAA,IAACC,YAAY;AAAA,EAAA,CAAa,GAEpChB,YAAYA,aAAaY,OAAOG,OAAAA,EAASf,WACzCE,UAAUA,WAAWU,OAAOG,OAAAA,EAASb,WAErCU,SAASf,UAAU;AAAA,IAACiB,gBAAgB;AAAA,IAAOD,aAAa;AAAA,EAAA,CAAK,EAAEE,OAAO;AAAA,IAACf;AAAAA,IAAWE;AAAAA,EAAAA,CAAQ;AAG5F,QAAMe,iBACJd,QAAQ,YACJ,wFAAwFD,OAAO,wBAAwBF,SAAS,MAChI,gFAAgFE,OAAO,wBAAwBF,SAAS,aAAaG,GAAG;AAU9I,MAPEP,MAAMsB,SACL,MAAMnB,OAAOoB,OAAO;AAAA,IACnB3B,MAAM;AAAA,IACN4B,SAASH;AAAAA,IACTxB,SAAS;AAAA,EAAA,CACV,GAMH;AAAIO,kBAAcY,OAAOG,SAASf,cAChCY,SAASA,OAAOS,MAAAA,EAAQN,OAAO;AAAA,MAACf;AAAAA,IAAAA,CAAU;AAG5C,QAAI;AACF,YAAMY,OAAOU,QAAQ;AAAA,QACnBC,KAAK,iBAAiBrB,OAAO,IAAIC,GAAG;AAAA,QACpCqB,QAAQ;AAAA,MAAA,CACT;AAAA,IACH,SAASC,KAAK;AACZ,YAAMA;AAAAA,IACR;AAEA3B,WAAO4B,MAAM,qBAAqB;AAAA,EAAA;AACpC;;"}