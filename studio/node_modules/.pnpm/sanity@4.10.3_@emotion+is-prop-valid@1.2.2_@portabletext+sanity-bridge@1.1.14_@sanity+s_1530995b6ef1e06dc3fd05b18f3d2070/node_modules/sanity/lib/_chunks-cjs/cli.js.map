{"version":3,"file":"cli.js","sources":["../../src/_internal/cli/server/getStudioEnvironmentVariables.ts"],"sourcesContent":["import {loadEnv} from '@sanity/cli'\n\nconst envPrefix = 'SANITY_STUDIO_'\nconst appEnvPrefix = 'SANITY_APP_'\n\n/**\n * The params for the `getStudioEnvironmentVariables` function that gets Studio focused environment variables.\n *\n * @public\n */\nexport interface StudioEnvVariablesOptions {\n  /**\n   * When specified adds a prefix to the environment variable keys,\n   * eg: `getStudioEnvironmentVariables({prefix: 'process.env.'})`\n   */\n  prefix?: string\n  /**\n   * When specified includes environment variables from dotenv files (`.env`), in the same way the studio does.\n   * A `mode` must be specified, usually `development`\n   * or `production`, which will load the corresponding `.env.development` or `.env.production`.\n   * To specify where to look for the dotenv files, specify `options.envFile.envDir`.\n   */\n  envFile?: {mode: string; envDir?: string} | false\n  /**\n   * When specified, JSON-encodes the values, which is handy if you want to pass\n   * this to a bundlers hardcoded defines, such as Vite's `define` or Webpack's `DefinePlugin`.\n   */\n  jsonEncode?: boolean\n}\n\n/**\n * Get environment variables prefixed with SANITY_STUDIO_, as an object.\n *\n * @param options - Options for the environment variable loading\n *  {@link StudioEnvVariablesOptions}\n * @returns Object of studio environment variables\n *\n * @example\n * ```tsx\n * getStudioEnvironmentVariables({prefix: 'process.env.', jsonEncode: true})\n * ```\n *\n * @public\n */\nexport function getStudioEnvironmentVariables(\n  options: StudioEnvVariablesOptions = {},\n): Record<string, string> {\n  const {prefix = '', envFile = false, jsonEncode = false} = options\n  const fullEnv = envFile\n    ? {...process.env, ...loadEnv(envFile.mode, envFile.envDir || process.cwd(), [envPrefix])}\n    : process.env\n\n  const studioEnv: Record<string, string> = {}\n  for (const key in fullEnv) {\n    if (key.startsWith(envPrefix)) {\n      studioEnv[`${prefix}${key}`] = jsonEncode\n        ? JSON.stringify(fullEnv[key] || '')\n        : fullEnv[key] || ''\n    }\n  }\n  return studioEnv\n}\n\n/**\n * Get environment variables prefixed with SANITY_APP_, as an object.\n *\n * @param options - Options for the environment variable loading\n *  {@link StudioEnvVariablesOptions}\n * @returns Object of app environment variables\n *\n * @internal\n */\nexport function getAppEnvironmentVariables(\n  options: StudioEnvVariablesOptions = {},\n): Record<string, string> {\n  const {prefix = '', envFile = false, jsonEncode = false} = options\n  const fullEnv = envFile\n    ? {...process.env, ...loadEnv(envFile.mode, envFile.envDir || process.cwd(), [envPrefix])}\n    : process.env\n\n  const appEnv: Record<string, string> = {}\n  for (const key in fullEnv) {\n    if (key.startsWith(appEnvPrefix)) {\n      appEnv[`${prefix}${key}`] = jsonEncode\n        ? JSON.stringify(fullEnv[key] || '')\n        : fullEnv[key] || ''\n    }\n  }\n  return appEnv\n}\n"],"names":["envPrefix","appEnvPrefix","getStudioEnvironmentVariables","options","prefix","envFile","jsonEncode","fullEnv","process","env","loadEnv","mode","envDir","cwd","studioEnv","key","startsWith","JSON","stringify","getAppEnvironmentVariables","appEnv"],"mappings":";;AAEA,MAAMA,YAAY,kBACZC,eAAe;AAyCd,SAASC,8BACdC,UAAqC,IACb;AACxB,QAAM;AAAA,IAACC,SAAS;AAAA,IAAIC,UAAU;AAAA,IAAOC,aAAa;AAAA,EAAA,IAASH,SACrDI,UAAUF,UACZ;AAAA,IAAC,GAAGG,QAAQC;AAAAA,IAAK,GAAGC,IAAAA,QAAQL,QAAQM,MAAMN,QAAQO,UAAUJ,QAAQK,OAAO,CAACb,SAAS,CAAC;AAAA,EAAA,IACtFQ,QAAQC,KAENK,YAAoC,CAAA;AAC1C,aAAWC,OAAOR;AACZQ,QAAIC,WAAWhB,SAAS,MAC1Bc,UAAU,GAAGV,MAAM,GAAGW,GAAG,EAAE,IAAIT,aAC3BW,KAAKC,UAAUX,QAAQQ,GAAG,KAAK,EAAE,IACjCR,QAAQQ,GAAG,KAAK;AAGxB,SAAOD;AACT;AAWO,SAASK,2BACdhB,UAAqC,IACb;AACxB,QAAM;AAAA,IAACC,SAAS;AAAA,IAAIC,UAAU;AAAA,IAAOC,aAAa;AAAA,EAAA,IAASH,SACrDI,UAAUF,UACZ;AAAA,IAAC,GAAGG,QAAQC;AAAAA,IAAK,GAAGC,IAAAA,QAAQL,QAAQM,MAAMN,QAAQO,UAAUJ,QAAQK,OAAO,CAACb,SAAS,CAAC;AAAA,EAAA,IACtFQ,QAAQC,KAENW,SAAiC,CAAA;AACvC,aAAWL,OAAOR;AACZQ,QAAIC,WAAWf,YAAY,MAC7BmB,OAAO,GAAGhB,MAAM,GAAGW,GAAG,EAAE,IAAIT,aACxBW,KAAKC,UAAUX,QAAQQ,GAAG,KAAK,EAAE,IACjCR,QAAQQ,GAAG,KAAK;AAGxB,SAAOK;AACT;;;"}