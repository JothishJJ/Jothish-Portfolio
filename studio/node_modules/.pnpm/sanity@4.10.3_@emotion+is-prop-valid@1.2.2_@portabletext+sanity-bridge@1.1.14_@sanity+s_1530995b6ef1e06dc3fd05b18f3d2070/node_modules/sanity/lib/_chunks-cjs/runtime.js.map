{"version":3,"file":"runtime.js","sources":["../../src/_internal/cli/server/debug.ts","../../src/_internal/cli/server/createExternalFromImportMap.ts","../../src/_internal/cli/server/getBrowserAliases.ts","../../src/_internal/cli/server/helpers.ts","../../src/_internal/cli/server/sanityMonorepo.ts","../../src/_internal/cli/server/components/Favicons.tsx","../../src/_internal/cli/server/components/globalErrorHandler/GlobalErrorHandler.tsx","../../src/_internal/cli/server/components/NoJavascript.tsx","../../src/_internal/cli/server/components/BasicDocument.tsx","../../src/_internal/cli/server/components/DefaultDocument.tsx","../../src/_internal/cli/server/constants.ts","../../src/_internal/cli/server/renderDocument.tsx","../../src/_internal/cli/server/vite/plugin-sanity-build-entries.ts","../../src/_internal/cli/server/webManifest.ts","../../src/_internal/cli/server/vite/plugin-sanity-favicons.ts","../../src/_internal/cli/server/vite/plugin-sanity-runtime-rewrite.ts","../../src/_internal/cli/server/getViteConfig.ts","../../src/_internal/cli/server/getEntryModule.ts","../../src/_internal/cli/server/sanityConfig.ts","../../src/_internal/cli/server/runtime.ts"],"sourcesContent":["import debugIt from 'debug'\n\nexport const debug = debugIt('sanity:server')\n","import {escapeRegExp} from 'lodash'\n\ntype ImportMap = {imports?: Record<string, string>}\n\n/**\n * Generates a Rollup `external` configuration array based on the provided\n * import map. We derive externals from the import map because this ensures that\n * modules listed in the import map are not bundled into the Rollup output so\n * the browser can load these bare specifiers according to the import map.\n */\nexport function createExternalFromImportMap({imports = {}}: ImportMap = {}): (string | RegExp)[] {\n  return Object.keys(imports).map((specifier) =>\n    specifier.endsWith('/') ? new RegExp(`^${escapeRegExp(specifier)}.+`) : specifier,\n  )\n}\n","import path from 'node:path'\n\nimport {escapeRegExp} from 'lodash'\nimport resolve from 'resolve.exports'\nimport {type Alias} from 'vite'\n\n/**\n * The following are the specifiers that are expected/allowed to be used within\n * a built Sanity studio in the browser. These are used in combination with\n * `resolve.exports` to determine the final entry point locations for each allowed specifier.\n *\n * There is also a corresponding test for this file that expects these to be\n * included in the `sanity` package.json. That test is meant to keep this list\n * in sync in the event we add another package subpath.\n *\n * @internal\n */\nexport const browserCompatibleSanityPackageSpecifiers = [\n  'sanity',\n  'sanity/_createContext',\n  'sanity/_singletons',\n  'sanity/desk',\n  'sanity/presentation',\n  'sanity/router',\n  'sanity/structure',\n  'sanity/media-library',\n  'sanity/package.json',\n]\n\n/**\n * These conditions should align with the conditions present in the\n * `package.json` of the `'sanity'` module. they are given to `resolve.exports`\n * in order to determine the correct entrypoint for the browser-compatible\n * package specifiers listed above.\n */\nconst conditions = ['import', 'browser', 'default']\n\n// locate the entry points for each subpath the Sanity module exports\nexport function getSanityPkgExportAliases(sanityPkgPath: string) {\n  // Load the package.json of the Sanity package\n  // eslint-disable-next-line import/no-dynamic-require\n  const pkg = require(sanityPkgPath)\n  const dirname = path.dirname(sanityPkgPath)\n\n  // Resolve the entry points for each allowed specifier\n  const unifiedSanityAliases = browserCompatibleSanityPackageSpecifiers.reduce<Alias[]>(\n    (acc, next) => {\n      // Resolve the export path for the specifier using resolve.exports\n      const dest = resolve.exports(pkg, next, {browser: true, conditions})?.[0]\n      if (!dest) return acc\n\n      // Map the specifier to its resolved path\n      acc.push({\n        find: new RegExp(`^${escapeRegExp(next)}$`),\n        replacement: path.resolve(dirname, dest),\n      })\n      return acc\n    },\n    [],\n  )\n\n  // Return the aliases configuration for external projects\n  return unifiedSanityAliases\n}\n","import path from 'node:path'\n\nimport readPkgUp from 'read-pkg-up'\nimport resolveFrom from 'resolve-from'\n\n/**\n * Given a module name such as \"styled-components\", will resolve the _module path_,\n * eg if require.resolve(`styled-components`) resolves to:\n *   `/some/node_modules/styled-components/lib/cjs/styled.js`\n * this function will instead return\n *   `/some/node_modules/styled-components`\n *\n * This is done in order for aliases to be pointing to the right module in terms of\n * _file-system location_, without pointing to a specific commonjs/browser/module variant\n *\n * @internal\n */\nexport async function getModulePath(mod: string, fromDir: string): Promise<string> {\n  const modulePath = resolveFrom(fromDir, mod)\n  const pkg = await readPkgUp({cwd: path.dirname(modulePath)})\n\n  return pkg ? path.dirname(pkg.path) : modulePath\n}\n\n/**\n * @internal\n */\nexport function isRecord(value: unknown): value is Record<string, unknown> {\n  return Boolean(value) && typeof value === 'object' && !Array.isArray(value)\n}\n\n/**\n * Ensures that the given path both starts and ends with a single slash\n *\n * @internal\n */\nexport function normalizeBasePath(pathName: string): string {\n  return `/${pathName}/`.replace(/^\\/+/, '/').replace(/\\/+$/, '/')\n}\n","import path from 'node:path'\n\nimport readPkgUp from 'read-pkg-up'\n\n/**\n * @internal\n */\nexport interface SanityMonorepo {\n  path: string\n}\n\nexport async function getMonorepoAliases(monorepoPath: string) {\n  const {default: aliases} = await import('@repo/dev-aliases')\n  return Object.fromEntries(\n    Object.entries(aliases).map(([pkgName, pkgPath]) => {\n      return [pkgName, path.resolve(monorepoPath, path.join('packages', pkgPath))]\n    }),\n  )\n}\n\n/**\n * Load information about the `sanity-io/sanity` monorepo (if applicable)\n *\n * @internal\n */\nexport async function loadSanityMonorepo(cwd: string): Promise<SanityMonorepo | undefined> {\n  let p = cwd\n\n  while (p !== '/') {\n    const readResult = await readPkgUp({cwd: p})\n\n    if (!readResult) {\n      return undefined\n    }\n\n    if (readResult.packageJson.isSanityMonorepo) {\n      return {path: path.dirname(readResult.path)}\n    }\n\n    p = path.dirname(path.dirname(readResult.path))\n  }\n\n  return undefined\n}\n","import {type JSX} from 'react'\n\nexport function Favicons(): JSX.Element {\n  const base = '/static'\n  return (\n    <>\n      <link rel=\"icon\" href={`${base}/favicon.ico`} sizes=\"any\" />\n      <link rel=\"icon\" href={`${base}/favicon.svg`} type=\"image/svg+xml\" />\n      <link rel=\"apple-touch-icon\" href={`${base}/apple-touch-icon.png`} />\n      <link rel=\"manifest\" href={`${base}/manifest.webmanifest`} />\n    </>\n  )\n}\n","import {type JSX} from 'react'\n\nconst errorHandlerScript = `\n;(function () {\n  // The error channel is provided so that error handling can be delegated to a view component.\n  // If there is a subscriber to the error channel at the time the error happens, the error will be pushed to the subscriber instead of handled here.\n  var errorChannel = (function () {\n    var subscribers = Object.create(null)\n    var nextId = 0\n    function subscribe(subscriber) {\n      var id = nextId++\n      subscribers[id] = subscriber\n      return function unsubscribe() {\n        delete subscribers[id]\n      }\n    }\n\n    function publish(event) {\n      for (var id in subscribers) {\n        if (Object.hasOwn(subscribers, id)) {\n          subscribers[id](event)\n        }\n      }\n    }\n    return {\n      subscribers,\n      publish,\n      subscribe\n    }\n  })()\n\n  // NOTE: Store the error channel instance in the global scope so that the Studio application can\n  // access it and subscribe to errors.\n  window.__sanityErrorChannel = {\n    subscribe: errorChannel.subscribe\n  }\n\n  function _handleError(event) {\n    // If there are error channel subscribers, then we assume they will own error rendering,\n    // and we defer to them (no console error).\n    if (Object.keys(errorChannel.subscribers).length > 0) {\n      errorChannel.publish(event)\n    } else {\n      _renderErrorOverlay(event)\n    }\n  }\n\n  var ERROR_BOX_STYLE = [\n    'background: #fff',\n    'border-radius: 6px',\n    'box-sizing: border-box',\n    'color: #121923',\n    'flex: 1',\n    \"font-family: -apple-system,BlinkMacSystemFont,'Segoe UI',Roboto,'Helvetica Neue','Liberation Sans',Helvetica,Arial,system-ui,sans-serif\",\n    'font-size: 16px',\n    'line-height: 21px',\n    'margin: 0 auto',\n    'max-width: 960px',\n    'max-height: 90dvh',\n    'overflow: auto',\n    'padding: 20px',\n    'width: 100%',\n  ].join(';')\n\n  var ERROR_CODE_STYLE = [\n    'color: #972E2A',\n    \"font-family: -apple-system-ui-monospace, 'SF Mono', Menlo, Monaco, Consolas, monospace\",\n    'font-size: 13px',\n    'line-height: 17px',\n    'margin: 0',\n  ].join(';')\n\n  function _renderErrorOverlay(event) {\n    var errorElement = document.querySelector('#__sanityError') || document.createElement('div')\n    var error = event.error\n    var colno = event.colno\n    var lineno = event.lineno\n    var filename = event.filename\n\n    errorElement.id = '__sanityError'\n    errorElement.innerHTML = [\n      '<div style=\"' + ERROR_BOX_STYLE + '\">',\n      '<div style=\"font-weight: 700;\">Uncaught error: ' + error.message + '</div>',\n      '<div style=\"color: #515E72; font-size: 13px; line-height: 17px; margin: 10px 0;\">' +\n        filename +\n        ':' +\n        lineno +\n        ':' +\n        colno +\n        '</div>',\n      '<pre style=\"' + ERROR_CODE_STYLE + '\">' + error.stack + '</pre>',\n      '</div>',\n    ].join('')\n\n    errorElement.style.position = 'fixed'\n    errorElement.style.zIndex = 1000000\n    errorElement.style.top = 0\n    errorElement.style.left = 0\n    errorElement.style.right = 0\n    errorElement.style.bottom = 0\n    errorElement.style.padding = '20px'\n    errorElement.style.background = 'rgba(16,17,18,0.66)'\n    errorElement.style.display = 'flex'\n    errorElement.style.alignItems = 'center'\n    errorElement.style.justifyContent = 'center'\n\n    document.body.appendChild(errorElement)\n  }\n\n  // Error listener\n  window.addEventListener('error', (event) => {\n    _handleError({\n      type: 'error',\n      error: event.error,\n      lineno: event.lineno,\n      colno: event.colno,\n      filename: event.filename\n    })\n  })\n\n  // Error listener\n  window.addEventListener('unhandledrejection', (event) => {\n    _handleError({\n      type: 'rejection',\n      error: event.reason\n    })\n  })\n})()\n`\n\n/** @internal */\nexport function GlobalErrorHandler(): JSX.Element {\n  // eslint-disable-next-line react/no-danger\n  return <script dangerouslySetInnerHTML={{__html: errorHandlerScript}} />\n}\n","import {type JSX} from 'react'\n\n/* eslint-disable i18next/no-literal-string */\nconst NoJsStyles = `\n.sanity-app-no-js__root {\n  position: absolute;\n  top: 0;\n  right: 0;\n  left: 0;\n  bottom: 0;\n  background: #fff;\n}\n\n.sanity-app-no-js__content {\n  position: absolute;\n  top: 50%;\n  left: 50%;\n  transform: translate(-50%, -50%);\n  text-align: center;\n  font-family: helvetica, arial, sans-serif;\n}\n`\n\n/** @internal */\nexport function NoJavascript(): JSX.Element {\n  return (\n    <noscript>\n      <div className=\"sanity-app-no-js__root\">\n        <div className=\"sanity-app-no-js__content\">\n          <style type=\"text/css\">{NoJsStyles}</style>\n          <h1>JavaScript disabled</h1>\n          <p>\n            Please <a href=\"https://www.enable-javascript.com/\">enable JavaScript</a> in your\n            browser and reload the page to proceed.\n          </p>\n        </div>\n      </div>\n    </noscript>\n  )\n}\n","/**\n * App HTML Document, this is in the _internal package\n * to avoid importing styled-components from sanity pacakge\n */\n\n/* eslint-disable i18next/no-literal-string  -- title is literal for now */\nimport {type JSX} from 'react'\n\nimport {Favicons} from './Favicons'\nimport {GlobalErrorHandler} from './globalErrorHandler/GlobalErrorHandler'\nimport {NoJavascript} from './NoJavascript'\n\n/**\n * @internal\n */\nexport interface BasicDocumentProps {\n  entryPath: string\n  css?: string[]\n  // Currently unused, but kept for potential future use\n  // eslint-disable-next-line react/no-unused-prop-types\n  basePath?: string\n}\n\nconst EMPTY_ARRAY: never[] = []\n\n/**\n * This is the equivalent of DefaultDocument for non-studio apps.\n * @internal\n */\nexport function BasicDocument(props: BasicDocumentProps): JSX.Element {\n  const {entryPath, css = EMPTY_ARRAY} = props\n\n  return (\n    <html lang=\"en\">\n      <head>\n        <meta charSet=\"utf-8\" />\n        <meta name=\"viewport\" content=\"width=device-width, initial-scale=1, viewport-fit=cover\" />\n        <meta name=\"robots\" content=\"noindex\" />\n        <meta name=\"referrer\" content=\"same-origin\" />\n\n        <Favicons />\n        <title>Sanity Custom App</title>\n        <GlobalErrorHandler />\n\n        {css.map((href) => (\n          <link key={href} rel=\"stylesheet\" href={href} />\n        ))}\n      </head>\n      <body>\n        <div id=\"root\" />\n        <script type=\"module\" src={entryPath} />\n        <NoJavascript />\n      </body>\n    </html>\n  )\n}\n","/* eslint-disable i18next/no-literal-string */\n\nimport {Favicons} from './Favicons'\nimport {GlobalErrorHandler} from './globalErrorHandler/GlobalErrorHandler'\nimport {NoJavascript} from './NoJavascript'\n\nconst globalStyles = `\n  @font-face {\n    font-family: Inter;\n    font-style: normal;\n    font-weight: 400;\n    font-display: swap;\n    src: url(\"https://studio-static.sanity.io/Inter-Regular.woff2\") format(\"woff2\");\n  }\n  @font-face {\n    font-family: Inter;\n    font-style: italic;\n    font-weight: 400;\n    font-display: swap;\n    src: url(\"https://studio-static.sanity.io/Inter-Italic.woff2\") format(\"woff2\");\n  }\n  @font-face {\n    font-family: Inter;\n    font-style: normal;\n    font-weight: 500;\n    font-display: swap;\n    src: url(\"https://studio-static.sanity.io/Inter-Medium.woff2\") format(\"woff2\");\n  }\n  @font-face {\n    font-family: Inter;\n    font-style: italic;\n    font-weight: 500;\n    font-display: swap;\n    src: url(\"https://studio-static.sanity.io/Inter-MediumItalic.woff2\") format(\"woff2\");\n  }\n  @font-face {\n    font-family: Inter;\n    font-style: normal;\n    font-weight: 600;\n    font-display: swap;\n    src: url(\"https://studio-static.sanity.io/Inter-SemiBold.woff2\") format(\"woff2\");\n  }\n  @font-face {\n    font-family: Inter;\n    font-style: italic;\n    font-weight: 600;\n    font-display: swap;\n    src: url(\"https://studio-static.sanity.io/Inter-SemiBoldItalic.woff2\") format(\"woff2\");\n  }\n  @font-face {\n    font-family: Inter;\n    font-style: normal;\n    font-weight: 700;\n    font-display: swap;\n    src: url(\"https://studio-static.sanity.io/Inter-Bold.woff2\") format(\"woff2\");\n  }\n  @font-face {\n    font-family: Inter;\n    font-style: italic;\n    font-weight: 700;\n    font-display: swap;\n    src: url(\"https://studio-static.sanity.io/Inter-BoldItalic.woff2\") format(\"woff2\");\n  }\n  @font-face {\n    font-family: Inter;\n    font-style: normal;\n    font-weight: 800;\n    font-display: swap;\n    src: url(\"https://studio-static.sanity.io/Inter-ExtraBold.woff2\") format(\"woff2\");\n  }\n  @font-face {\n    font-family: Inter;\n    font-style: italic;\n    font-weight: 800;\n    font-display: swap;\n    src: url(\"https://studio-static.sanity.io/Inter-ExtraBoldItalic.woff2\") format(\"woff2\");\n  }\n  @font-face {\n    font-family: Inter;\n    font-style: normal;\n    font-weight: 900;\n    font-display: swap;\n    src: url(\"https://studio-static.sanity.io/Inter-Black.woff2\") format(\"woff2\");\n  }\n  @font-face {\n    font-family: Inter;\n    font-style: italic;\n    font-weight: 900;\n    font-display: swap;\n    src: url(\"https://studio-static.sanity.io/Inter-BlackItalic.woff2\") format(\"woff2\");\n  }\n  html {\n    @media (prefers-color-scheme: dark) {\n      background-color: #13141b;\n    }\n    @media (prefers-color-scheme: light) {\n      background-color: #ffffff;\n    }\n  }\n  html,\n  body,\n  #sanity {\n    height: 100%;\n  }\n  body {\n    margin: 0;\n    -webkit-font-smoothing: antialiased;\n  }\n`\n\n/**\n * @hidden\n * @beta\n */\nexport interface DefaultDocumentProps {\n  entryPath: string\n  css?: string[]\n\n  // Currently unused, but kept for potential future use\n  // eslint-disable-next-line react/no-unused-prop-types\n  basePath?: string\n}\n\nconst EMPTY_ARRAY: never[] = []\n\n/**\n * @internal\n */\nexport function DefaultDocument(props: DefaultDocumentProps): React.JSX.Element {\n  const {entryPath, css = EMPTY_ARRAY} = props\n\n  return (\n    <html lang=\"en\">\n      <head>\n        <meta charSet=\"utf-8\" />\n        <meta\n          name=\"viewport\"\n          content=\"width=device-width, initial-scale=1, maximum-scale=1, viewport-fit=cover\"\n        />\n        <meta name=\"robots\" content=\"noindex\" />\n        <meta name=\"referrer\" content=\"same-origin\" />\n\n        <Favicons />\n\n        <title>Sanity Studio</title>\n\n        <GlobalErrorHandler />\n\n        {css.map((href) => (\n          <link key={href} rel=\"stylesheet\" href={href} />\n        ))}\n        {/* eslint-disable-next-line react/no-danger */}\n        <style dangerouslySetInnerHTML={{__html: globalStyles}} />\n      </head>\n      <body>\n        <div id=\"sanity\" />\n        <script type=\"module\" src={entryPath} />\n        <NoJavascript />\n      </body>\n    </html>\n  )\n}\n","/**\n * This script takes the import map from the `#__imports` script tag,\n * modifies relevant URLs that match the sanity-cdn hostname by replacing\n * the existing timestamp in the sanity-cdn URLs with a new runtime timestamp,\n * and injects the modified import map back into the HTML.\n *\n * This will be injected into the HTML of the user's bundle.\n *\n * Note that this is in a separate constants file to prevent \"Cannot access\n * before initialization\" errors.\n */\nexport const TIMESTAMPED_IMPORTMAP_INJECTOR_SCRIPT = `<script>\n  // auto-generated script to add import map with timestamp\n  const importsJson = document.getElementById('__imports')?.textContent;\n  const { imports = {}, ...rest } = importsJson ? JSON.parse(importsJson) : {};\n  const importMapEl = document.createElement('script');\n  importMapEl.type = 'importmap';\n  const newTimestamp = \\`/t\\${Math.floor(Date.now() / 1000)}\\`;\n  importMapEl.textContent = JSON.stringify({\n    imports: Object.fromEntries(\n      Object.entries(imports).map(([specifier, path]) => {\n        try {\n          const url = new URL(path);\n          if (/^sanity-cdn\\\\.[a-zA-Z]+$/.test(url.hostname)) {\n            url.pathname = url.pathname.replace(/\\\\/t\\\\d+/, newTimestamp);\n          }\n          return [specifier, url.toString()];\n        } catch {\n          return [specifier, path];\n        }\n      })\n    ),\n    ...rest,\n  });\n  document.head.appendChild(importMapEl);\n</script>`\n","/**\n * Looks for and imports (in preferred order):\n *   - src/_document.js\n *   - src/_document.tsx\n *\n * Then renders using ReactDOM to a string, which is sent back to the parent\n * process over the worker `postMessage` channel.\n */\nimport fs from 'node:fs'\nimport path from 'node:path'\nimport {isMainThread, parentPort, Worker, workerData} from 'node:worker_threads'\n\nimport chalk from 'chalk'\nimport importFresh from 'import-fresh'\nimport {parse as parseHtml} from 'node-html-parser'\nimport {renderToStaticMarkup} from 'react-dom/server'\n\nimport {BasicDocument} from './components/BasicDocument'\nimport {DefaultDocument} from './components/DefaultDocument'\nimport {TIMESTAMPED_IMPORTMAP_INJECTOR_SCRIPT} from './constants'\nimport {debug as serverDebug} from './debug'\nimport {getMonorepoAliases, type SanityMonorepo} from './sanityMonorepo'\n\nconst debug = serverDebug.extend('renderDocument')\n\n// Don't use threads in the jest world\n// eslint-disable-next-line turbo/no-undeclared-env-vars\nconst useThreads = typeof process.env.JEST_WORKER_ID === 'undefined'\nconst hasWarnedAbout = new Set<string>()\n\nconst defaultProps = {\n  entryPath: './.sanity/runtime/app.js',\n}\n\nconst autoGeneratedWarning = `\nThis file is auto-generated from \"sanity dev\".\nModifications to this file are automatically discarded.\n`.trim()\n\ninterface DocumentProps {\n  basePath: string\n  entryPath?: string\n  css?: string[]\n}\n\ninterface RenderDocumentOptions {\n  monorepo?: SanityMonorepo\n  studioRootPath: string\n  props?: DocumentProps\n  importMap?: {\n    imports?: Record<string, string>\n  }\n  isApp?: boolean\n}\n\nexport function renderDocument(options: RenderDocumentOptions): Promise<string> {\n  return new Promise((resolve, reject) => {\n    if (!useThreads) {\n      resolve(\n        getDocumentHtml(options.studioRootPath, options.props, options.importMap, options.isApp),\n      )\n      return\n    }\n\n    debug('Starting worker thread for %s', __filename)\n    const worker = new Worker(__filename, {\n      execArgv: __DEV__ ? ['-r', `${__dirname}/esbuild-register.js`] : undefined,\n      workerData: {...options, dev: __DEV__, shouldWarn: true},\n      env: process.env,\n    })\n\n    worker.on('message', (msg) => {\n      if (msg.type === 'warning') {\n        if (hasWarnedAbout.has(msg.warnKey)) {\n          return\n        }\n\n        if (Array.isArray(msg.message)) {\n          msg.message.forEach((warning: string) =>\n            console.warn(`${chalk.yellow('[warn]')} ${warning}`),\n          )\n        } else {\n          console.warn(`${chalk.yellow('[warn]')} ${msg.message}`)\n        }\n\n        hasWarnedAbout.add(msg.warnKey)\n        return\n      }\n\n      if (msg.type === 'error') {\n        debug('Error from worker: %s', msg.error || 'Unknown error')\n        reject(new Error(msg.error || 'Document rendering worker stopped with an unknown error'))\n        return\n      }\n\n      if (msg.type === 'result') {\n        debug('Document HTML rendered, %d bytes', msg.html.length)\n        resolve(msg.html)\n      }\n    })\n    worker.on('error', (err) => {\n      debug('Worker errored: %s', err.message)\n      reject(err)\n    })\n    worker.on('exit', (code) => {\n      if (code !== 0) {\n        debug('Worker stopped with code %d', code)\n        reject(new Error(`Document rendering worker stopped with exit code ${code}`))\n      }\n    })\n  })\n}\n\nexport function decorateIndexWithAutoGeneratedWarning(template: string): string {\n  return template.replace(/<head/, `\\n<!--\\n${autoGeneratedWarning}\\n-->\\n<head`)\n}\n\n/**\n * Decorates the given HTML template with a script\n * tag that loads the bridge component to communicate\n * with core-ui.\n */\nexport function decorateIndexWithBridgeScript(template: string): string {\n  const sanityEnv = process.env.SANITY_INTERNAL_ENV || 'production'\n\n  /**\n   * The URL to the bridge script is determined by the\n   * `SANITY_INTERNAL_ENV` environment variable. So if you deploy\n   * a studio to the staging ENV then you'll get the correct script.\n   */\n  const scriptURL =\n    sanityEnv === 'production'\n      ? 'https://core.sanity-cdn.com/bridge.js'\n      : 'https://core.sanity-cdn.work/bridge.js'\n\n  return template.replace(\n    '</head>',\n    `<script src=\"${scriptURL}\" async type=\"module\" data-sanity-core></script>\\n</head>`,\n  )\n}\n\nexport function getPossibleDocumentComponentLocations(studioRootPath: string): string[] {\n  return [path.join(studioRootPath, '_document.js'), path.join(studioRootPath, '_document.tsx')]\n}\n\n/**\n * Adds a base path to a URL if necessary, and returns the resulting URL.\n * @param url - The URL to prefix with a base path.\n * @param basePath - The base path to prefix the URL with. Default value is `/`.\n * @returns The resulting URL with the base path.\n * @internal\n */\nexport function _prefixUrlWithBasePath(url: string, basePath: string): string {\n  // Normalize basePath by adding a leading slash if it's missing.\n  const normalizedBasePath = basePath.startsWith('/') ? basePath : `/${basePath}`\n\n  // If the URL starts with a slash, append it to the basePath, removing any trailing slash if present.\n  if (url.startsWith('/')) {\n    if (normalizedBasePath.endsWith('/')) {\n      return `${normalizedBasePath.slice(0, -1)}${url}`\n    }\n    return `${normalizedBasePath}${url}`\n  }\n\n  // If the URL doesn't start with a slash, append it to the basePath with a slash in between.\n  if (normalizedBasePath.endsWith('/')) {\n    return `${normalizedBasePath}${url}`\n  }\n  return `${normalizedBasePath}/${url}`\n}\n\nif (!isMainThread && parentPort) {\n  renderDocumentFromWorkerData()\n}\n\nasync function renderDocumentFromWorkerData() {\n  if (!parentPort || !workerData) {\n    throw new Error('Must be used as a Worker with a valid options object in worker data')\n  }\n\n  const {monorepo, studioRootPath, props, importMap, isApp}: RenderDocumentOptions =\n    workerData || {}\n\n  if (workerData?.dev) {\n    // Define `__DEV__` in the worker thread as well\n    // oxlint-disable-next-line no-explicit-any\n    ;(global as any).__DEV__ = true\n  }\n\n  if (typeof studioRootPath !== 'string') {\n    parentPort.postMessage({type: 'error', message: 'Missing/invalid `studioRootPath` option'})\n    return\n  }\n\n  if (props && typeof props !== 'object') {\n    parentPort.postMessage({type: 'error', message: '`props` must be an object if provided'})\n    return\n  }\n\n  // Require hook #1\n  // Alias monorepo modules\n  debug('Registering potential aliases')\n  if (monorepo) {\n    require('module-alias').addAliases(getMonorepoAliases(monorepo.path))\n  }\n\n  // Require hook #2\n  // Use `esbuild` to allow JSX/TypeScript and modern JS features\n  debug('Registering esbuild for node %s', process.version)\n  const {unregister} = __DEV__\n    ? {unregister: () => undefined}\n    : require('esbuild-register/dist/node').register({\n        target: `node${process.version.slice(1)}`,\n        supported: {'dynamic-import': true},\n        jsx: 'automatic',\n        extensions: ['.jsx', '.ts', '.tsx', '.mjs'],\n      })\n\n  // Require hook #3\n  // Same as above, but we don't want to enforce a .jsx extension for anything with JSX\n  debug('Registering esbuild for .js files using jsx loader')\n  const {unregister: unregisterJs} = __DEV__\n    ? {unregister: () => undefined}\n    : require('esbuild-register/dist/node').register({\n        target: `node${process.version.slice(1)}`,\n        supported: {'dynamic-import': true},\n        extensions: ['.js'],\n        jsx: 'automatic',\n        loader: 'jsx',\n      })\n\n  const html = getDocumentHtml(studioRootPath, props, importMap, isApp)\n\n  parentPort.postMessage({type: 'result', html})\n\n  // Be polite and clean up after esbuild-register\n  unregister()\n  unregisterJs()\n}\n\nfunction getDocumentHtml(\n  studioRootPath: string,\n  props?: DocumentProps,\n  importMap?: {imports?: Record<string, string>},\n  isApp?: boolean,\n): string {\n  const Document = getDocumentComponent(studioRootPath, isApp)\n\n  // NOTE: Validate the list of CSS paths so implementers of `_document.tsx` don't have to\n  // - If the path is not a full URL, check if it starts with `/`\n  //   - If not, then prepend a `/` to the string\n  const css = props?.css?.map((url) => {\n    try {\n      // If the URL is absolute, we don't need to prefix it\n      return new URL(url).toString()\n    } catch {\n      return _prefixUrlWithBasePath(url, props.basePath)\n    }\n  })\n\n  debug('Rendering document component using React')\n  const result = addTimestampedImportMapScriptToHtml(\n    renderToStaticMarkup(<Document {...defaultProps} {...props} css={css} />),\n    importMap,\n  )\n\n  return `<!DOCTYPE html>${result}`\n}\n\n/**\n * @internal\n */\nexport function addTimestampedImportMapScriptToHtml(\n  html: string,\n  importMap?: {imports?: Record<string, string>},\n): string {\n  if (!importMap) return html\n\n  let root = parseHtml(html)\n  let htmlEl = root.querySelector('html')\n  if (!htmlEl) {\n    const oldRoot = root\n    root = parseHtml('<html></html>')\n    htmlEl = root.querySelector('html')!\n    htmlEl.appendChild(oldRoot)\n  }\n\n  let headEl = htmlEl.querySelector('head')\n\n  if (!headEl) {\n    htmlEl.insertAdjacentHTML('afterbegin', '<head></head>')\n    headEl = root.querySelector('head')!\n  }\n\n  headEl.insertAdjacentHTML(\n    'beforeend',\n    `<script type=\"application/json\" id=\"__imports\">${JSON.stringify(importMap)}</script>`,\n  )\n  headEl.insertAdjacentHTML('beforeend', TIMESTAMPED_IMPORTMAP_INJECTOR_SCRIPT)\n  return root.outerHTML\n}\n\nfunction getDocumentComponent(studioRootPath: string, isApp?: boolean) {\n  debug('Loading default document component from `sanity` module')\n\n  const Document = isApp ? BasicDocument : DefaultDocument\n\n  debug('Attempting to load user-defined document component from %s', studioRootPath)\n  const userDefined = tryLoadDocumentComponent(studioRootPath)\n\n  if (!userDefined) {\n    debug('Using default document component')\n    return Document\n  }\n\n  debug('Found user defined document component at %s', userDefined.path)\n\n  const DocumentComp = userDefined.component.default || userDefined.component // CommonJS\n  if (typeof DocumentComp === 'function') {\n    debug('User defined document component is a function, assuming valid')\n    return DocumentComp\n  }\n\n  debug('User defined document component did not have a default export')\n  const userExports = Object.keys(userDefined.component).join(', ') || 'None'\n  const relativePath = path.relative(process.cwd(), userDefined.path)\n  const typeHint =\n    typeof userDefined.component.default === 'undefined'\n      ? ''\n      : ` (type was ${typeof userDefined.component.default})`\n\n  const warnKey = `${relativePath}/${userDefined.modified}`\n\n  parentPort?.postMessage({\n    type: 'warning',\n    message: [\n      `${relativePath} did not have a default export that is a React component${typeHint}`,\n      `Named exports/properties found: ${userExports}`.trim(),\n      `Using default document component from \"sanity\".`,\n    ],\n    warnKey,\n  })\n\n  return DefaultDocument\n}\n\nfunction tryLoadDocumentComponent(studioRootPath: string) {\n  const locations = getPossibleDocumentComponentLocations(studioRootPath)\n\n  for (const componentPath of locations) {\n    debug('Trying to load document component from %s', componentPath)\n    try {\n      return {\n        component: importFresh<any>(componentPath),\n        path: componentPath,\n        modified: Math.floor(fs.statSync(componentPath)?.mtimeMs),\n      }\n    } catch (err) {\n      // Allow \"not found\" errors\n      if (err.code !== 'MODULE_NOT_FOUND') {\n        debug('Failed to load document component: %s', err.message)\n        throw err\n      }\n\n      debug('Document component not found at %s', componentPath)\n    }\n  }\n\n  return null\n}\n","import {type ChunkMetadata, type Plugin} from 'vite'\n\nimport {decorateIndexWithBridgeScript, renderDocument} from '../renderDocument'\nimport {type SanityMonorepo} from '../sanityMonorepo'\n\ninterface ViteOutputBundle {\n  [fileName: string]: ViteRenderedChunk | ViteRenderedAsset\n}\n\ninterface ViteRenderedAsset {\n  type: 'asset'\n}\n\ninterface ViteRenderedChunk {\n  type: 'chunk'\n  name: string\n  fileName: string\n  facadeModuleId: string | null\n  code: string\n  imports: string[]\n  viteMetadata: ChunkMetadata\n  isEntry: boolean\n}\n\nconst entryChunkId = '.sanity/runtime/app.js'\n\nexport function sanityBuildEntries(options: {\n  cwd: string\n  monorepo: SanityMonorepo | undefined\n  basePath: string\n  importMap?: {imports?: Record<string, string>}\n  isApp?: boolean\n}): Plugin {\n  const {cwd, monorepo, basePath, importMap, isApp} = options\n\n  return {\n    name: 'sanity/server/build-entries',\n    apply: 'build',\n\n    buildStart() {\n      this.emitFile({\n        type: 'chunk',\n        id: entryChunkId,\n        name: 'sanity',\n      })\n    },\n\n    async generateBundle(_options, outputBundle) {\n      const bundle = outputBundle as unknown as ViteOutputBundle\n      const entryFile = Object.values(bundle).find(\n        (file) =>\n          file.type === 'chunk' &&\n          file.name === 'sanity' &&\n          file.facadeModuleId?.endsWith(entryChunkId),\n      )\n\n      if (!entryFile) {\n        throw new Error(`Failed to find entry file in bundle (${entryChunkId})`)\n      }\n\n      if (entryFile.type !== 'chunk') {\n        throw new Error('Entry file is not a chunk')\n      }\n\n      const entryFileName = entryFile.fileName\n      const entryPath = [basePath.replace(/\\/+$/, ''), entryFileName].join('/')\n\n      let css: string[] = []\n      if (entryFile.viteMetadata?.importedCss) {\n        // Check all the top-level imports of the entryPoint to see if they have\n        // static CSS assets that need loading\n        css = [...entryFile.viteMetadata.importedCss]\n        for (const key of entryFile.imports) {\n          // Traverse all CSS assets that isn't loaded by the runtime and\n          // need <link> tags in the HTML template\n          const entry = bundle[key]\n          const importedCss =\n            entry && entry.type === 'chunk' ? entry.viteMetadata.importedCss : undefined\n\n          if (importedCss) {\n            css.push(...importedCss)\n          }\n        }\n      }\n\n      this.emitFile({\n        type: 'asset',\n        fileName: 'index.html',\n        source: decorateIndexWithBridgeScript(\n          await renderDocument({\n            monorepo,\n            studioRootPath: cwd,\n            importMap,\n            props: {\n              basePath,\n              entryPath,\n              css,\n            },\n            isApp,\n          }),\n        ),\n      })\n    },\n  }\n}\n","export interface WebManifest {\n  icons: {\n    src: string\n    type: string\n    sizes: string\n  }[]\n}\n\nexport function generateWebManifest(basePath: string): WebManifest {\n  return {\n    icons: [\n      {src: `${basePath}/favicon-96.png`, type: 'image/png', sizes: '96x96'},\n      {src: `${basePath}/favicon-192.png`, type: 'image/png', sizes: '192x192'},\n      {src: `${basePath}/favicon-512.png`, type: 'image/png', sizes: '512x512'},\n    ],\n  }\n}\n","import fs from 'node:fs/promises'\nimport path from 'node:path'\n\nimport {type Plugin} from 'vite'\n\nimport {generateWebManifest} from '../webManifest'\n\nconst mimeTypes: Record<string, string | undefined> = {\n  '.ico': 'image/x-icon',\n  '.svg': 'image/svg+xml',\n  '.png': 'image/png',\n}\n\n/**\n * Fallback favicons plugin for Sanity.\n *\n * If a favicon is not found in the static folder, this plugin will serve the default\n * Sanity favicons from the npm bundle. If a custom `favicon.ico` is found in the static\n * folder, it will also be served for a root `/favicon.ico` request.\n *\n * @param options - Options for the plugin\n * @returns A Vite plugin\n * @internal\n */\nexport function sanityFaviconsPlugin({\n  defaultFaviconsPath,\n  customFaviconsPath,\n  staticUrlPath,\n}: {\n  defaultFaviconsPath: string\n  customFaviconsPath: string\n  staticUrlPath: string\n}): Plugin {\n  const cache: {favicons?: string[]} = {}\n\n  async function getFavicons(): Promise<string[]> {\n    if (cache.favicons) {\n      return cache.favicons\n    }\n\n    cache.favicons = await fs.readdir(defaultFaviconsPath)\n    return cache.favicons\n  }\n\n  async function hasCustomFavicon(fileName: string): Promise<boolean> {\n    try {\n      await fs.access(path.join(customFaviconsPath, fileName))\n      return true\n    } catch (err) {\n      return false\n    }\n  }\n\n  return {\n    name: 'sanity/server/sanity-favicons',\n    apply: 'serve',\n    configureServer(viteDevServer) {\n      const webManifest = JSON.stringify(generateWebManifest(staticUrlPath), null, 2)\n      const webManifestPath = `${staticUrlPath}/manifest.webmanifest`\n\n      viteDevServer.middlewares.use(async (req, res, next) => {\n        if (req.url?.endsWith(webManifestPath)) {\n          res.writeHead(200, 'OK', {'content-type': 'application/manifest+json'})\n          res.write(webManifest)\n          res.end()\n          return\n        }\n\n        const parsedUrl =\n          ((req as any)._parsedUrl as URL) || new URL(req.url || '/', 'http://localhost:3333')\n\n        const pathName = parsedUrl.pathname || ''\n        const fileName = path.basename(pathName || '')\n        const icons = await getFavicons()\n        const isIconRequest =\n          pathName.startsWith('/favicon.ico') ||\n          (icons.includes(fileName) && pathName.includes(staticUrlPath))\n\n        if (!isIconRequest) {\n          next()\n          return\n        }\n\n        const faviconPath = (await hasCustomFavicon(fileName))\n          ? path.join(customFaviconsPath, fileName)\n          : path.join(defaultFaviconsPath, fileName)\n\n        const mimeType = mimeTypes[path.extname(fileName)] || 'application/octet-stream'\n        res.writeHead(200, 'OK', {'content-type': mimeType})\n        res.write(await fs.readFile(faviconPath))\n        res.end()\n      })\n    },\n  }\n}\n","import {type Plugin} from 'vite'\n\nexport function sanityRuntimeRewritePlugin(): Plugin {\n  return {\n    name: 'sanity/server/sanity-runtime-rewrite',\n    apply: 'serve',\n    configureServer(viteDevServer) {\n      return () => {\n        viteDevServer.middlewares.use((req, res, next) => {\n          if (req.url === '/index.html') {\n            req.url = '/.sanity/runtime/index.html'\n          }\n\n          next()\n        })\n      }\n    },\n  }\n}\n","import path from 'node:path'\n\nimport {type ReactCompilerConfig, type UserViteConfig} from '@sanity/cli'\nimport debug from 'debug'\nimport readPkgUp from 'read-pkg-up'\nimport {type ConfigEnv, type InlineConfig, type Rollup} from 'vite'\n\nimport {createExternalFromImportMap} from './createExternalFromImportMap'\nimport {getSanityPkgExportAliases} from './getBrowserAliases'\nimport {\n  getAppEnvironmentVariables,\n  getStudioEnvironmentVariables,\n} from './getStudioEnvironmentVariables'\nimport {normalizeBasePath} from './helpers'\nimport {getMonorepoAliases, loadSanityMonorepo} from './sanityMonorepo'\nimport {sanityBuildEntries} from './vite/plugin-sanity-build-entries'\nimport {sanityFaviconsPlugin} from './vite/plugin-sanity-favicons'\nimport {sanityRuntimeRewritePlugin} from './vite/plugin-sanity-runtime-rewrite'\n\nexport interface ViteOptions {\n  /**\n   * Root path of the studio/sanity app\n   */\n  cwd: string\n\n  /**\n   * Base path (eg under where to serve the app - `/studio` or similar)\n   * Will be normalized to ensure it starts and ends with a `/`\n   */\n  basePath?: string\n\n  /**\n   * Output directory (eg where to place the built files, if any)\n   */\n  outputDir?: string\n\n  /**\n   * Whether or not to enable source maps\n   */\n  sourceMap?: boolean\n\n  /**\n   * Whether or not to minify the output (only used in `mode: 'production'`)\n   */\n  minify?: boolean\n\n  /**\n   * HTTP development server configuration\n   */\n  server?: {port?: number; host?: string}\n\n  /**\n   * Mode to run vite in - eg development or production\n   */\n  mode: 'development' | 'production'\n\n  importMap?: {imports?: Record<string, string>}\n  reactCompiler: ReactCompilerConfig | undefined\n  isApp?: boolean\n}\n\n/**\n * Get a configuration object for Vite based on the passed options\n *\n * @internal Only meant for consumption inside of Sanity modules, do not depend on this externally\n */\nexport async function getViteConfig(options: ViteOptions): Promise<InlineConfig> {\n  const {\n    cwd,\n    mode,\n    outputDir,\n    // default to `true` when `mode=development`\n    sourceMap = options.mode === 'development',\n    server,\n    minify,\n    basePath: rawBasePath = '/',\n    importMap,\n    reactCompiler,\n    isApp,\n  } = options\n\n  const monorepo = await loadSanityMonorepo(cwd)\n  const basePath = normalizeBasePath(rawBasePath)\n\n  const sanityPkgPath = (await readPkgUp({cwd: __dirname}))?.path\n  if (!sanityPkgPath) {\n    throw new Error('Unable to resolve `sanity` module root')\n  }\n\n  const customFaviconsPath = path.join(cwd, 'static')\n  const defaultFaviconsPath = path.join(path.dirname(sanityPkgPath), 'static', 'favicons')\n  const staticPath = `${basePath}static`\n\n  const {default: viteReact} = await import('@vitejs/plugin-react')\n\n  const envVars = isApp\n    ? getAppEnvironmentVariables({prefix: 'process.env.', jsonEncode: true})\n    : getStudioEnvironmentVariables({prefix: 'process.env.', jsonEncode: true})\n\n  const viteConfig: InlineConfig = {\n    // Define a custom cache directory so that sanity's vite cache\n    // does not conflict with any potential local vite projects\n    cacheDir: 'node_modules/.sanity/vite',\n    root: cwd,\n    base: basePath,\n    build: {\n      outDir: outputDir || path.resolve(cwd, 'dist'),\n      sourcemap: sourceMap,\n    },\n    server: {\n      host: server?.host,\n      port: server?.port || 3333,\n      // Only enable strict port for studio,\n      // since apps can run on any port\n      strictPort: isApp ? false : true,\n\n      /**\n       * Significantly speed up startup time,\n       * and most importantly eliminates the `new dependencies optimized: foobar. optimized dependencies changed. reloading`\n       * types of initial reload loops that otherwise happen as vite discovers deps that need to be optimized.\n       * This option starts the traversal up front, and warms up the dep tree required to render the userland sanity.config.ts file,\n       * and thus avoids frustrating reload loops.\n       */\n      warmup: {\n        clientFiles: ['./.sanity/runtime/app.js'],\n      },\n    },\n    configFile: false,\n    mode,\n    plugins: [\n      viteReact(\n        reactCompiler ? {babel: {plugins: [['babel-plugin-react-compiler', reactCompiler]]}} : {},\n      ),\n      sanityFaviconsPlugin({defaultFaviconsPath, customFaviconsPath, staticUrlPath: staticPath}),\n      sanityRuntimeRewritePlugin(),\n      sanityBuildEntries({basePath, cwd, monorepo, importMap, isApp}),\n    ],\n    envPrefix: isApp ? 'SANITY_APP_' : 'SANITY_STUDIO_',\n    logLevel: mode === 'production' ? 'silent' : 'info',\n    resolve: {\n      alias: monorepo?.path\n        ? await getMonorepoAliases(monorepo.path)\n        : getSanityPkgExportAliases(sanityPkgPath),\n      dedupe: ['styled-components'],\n    },\n    define: {\n      '__SANITY_STAGING__': process.env.SANITY_INTERNAL_ENV === 'staging',\n      'process.env.MODE': JSON.stringify(mode),\n      /**\n       * Yes, double negatives are confusing.\n       * The default value of `SC_DISABLE_SPEEDY` is `process.env.NODE_ENV === 'production'`: https://github.com/styled-components/styled-components/blob/99c02f52d69e8e509c0bf012cadee7f8e819a6dd/packages/styled-components/src/constants.ts#L34\n       * Which means that in production, use the much faster way of inserting CSS rules, based on the CSSStyleSheet API (https://developer.mozilla.org/en-US/docs/Web/API/CSSStyleSheet/insertRule)\n       * while in dev mode, use the slower way of inserting CSS rules, which appends text nodes to the `<style>` tag: https://github.com/styled-components/styled-components/blob/99c02f52d69e8e509c0bf012cadee7f8e819a6dd/packages/styled-components/src/sheet/Tag.ts#L74-L76\n       * There are historical reasons for this, primarily that browsers initially did not support editing CSS rules in the DevTools inspector if `CSSStyleSheet.insetRule` were used.\n       * However, that's no longer the case (since Chrome 81 back in April 2020: https://developer.chrome.com/docs/css-ui/css-in-js), the latest version of FireFox also supports it,\n       * and there is no longer any reason to use the much slower method in dev mode.\n       */\n      'process.env.SC_DISABLE_SPEEDY': JSON.stringify('false'),\n      ...envVars,\n    },\n  }\n\n  if (mode === 'production') {\n    viteConfig.build = {\n      ...viteConfig.build,\n\n      assetsDir: 'static',\n      minify: minify ? 'esbuild' : false,\n      emptyOutDir: false, // Rely on CLI to do this\n\n      rollupOptions: {\n        onwarn: onRollupWarn,\n        external: createExternalFromImportMap(importMap),\n        input: {\n          sanity: path.join(cwd, '.sanity', 'runtime', 'app.js'),\n        },\n      },\n    }\n  }\n\n  return viteConfig\n}\n\nfunction onRollupWarn(warning: Rollup.RollupLog, warn: Rollup.LoggingFunction) {\n  if (suppressUnusedImport(warning)) {\n    return\n  }\n\n  warn(warning)\n}\n\nfunction suppressUnusedImport(warning: Rollup.RollupLog & {ids?: string[]}): boolean {\n  if (warning.code !== 'UNUSED_EXTERNAL_IMPORT') return false\n\n  // Suppress:\n  // ```\n  // \"useDebugValue\" is imported from external module \"react\"…\n  // ```\n  if (warning.names?.includes('useDebugValue')) {\n    warning.names = warning.names.filter((n) => n !== 'useDebugValue')\n    if (warning.names.length === 0) return true\n  }\n\n  // If some library does something unexpected, we suppress since it isn't actionable\n  if (warning.ids?.every((id) => id.includes('/node_modules/'))) return true\n\n  return false\n}\n\n/**\n * Ensure Sanity entry chunk is always loaded\n *\n * @param config - User-modified configuration\n * @returns Merged configuration\n * @internal\n */\nexport async function finalizeViteConfig(config: InlineConfig): Promise<InlineConfig> {\n  if (typeof config.build?.rollupOptions?.input !== 'object') {\n    throw new Error(\n      'Vite config must contain `build.rollupOptions.input`, and it must be an object',\n    )\n  }\n\n  if (!config.root) {\n    throw new Error(\n      'Vite config must contain `root` property, and must point to the Sanity root directory',\n    )\n  }\n\n  const {mergeConfig} = await import('vite')\n  return mergeConfig(config, {\n    build: {\n      rollupOptions: {\n        input: {\n          sanity: path.join(config.root, '.sanity', 'runtime', 'app.js'),\n        },\n      },\n    },\n  })\n}\n\n/**\n * Merge user-provided Vite configuration object or function\n *\n * @param defaultConfig - Default configuration object\n * @param userConfig - User-provided configuration object or function\n * @returns Merged configuration\n * @internal\n */\nexport async function extendViteConfigWithUserConfig(\n  env: ConfigEnv,\n  defaultConfig: InlineConfig,\n  userConfig: UserViteConfig,\n): Promise<InlineConfig> {\n  let config = defaultConfig\n\n  if (typeof userConfig === 'function') {\n    debug('Extending vite config using user-specified function')\n    config = await userConfig(config, env)\n  } else if (typeof userConfig === 'object') {\n    debug('Merging vite config using user-specified object')\n    const {mergeConfig} = await import('vite')\n    config = mergeConfig(config, userConfig)\n  }\n\n  return config\n}\n","/**\n * The import order here is significant.\n * The `import studioConfig from %STUDIO_CONFIG_LOCATION%` line should always come first,\n * otherwise it's impossible to setup tooling like React Scan which requires userland to import a dependency\n * _before_ any `import from 'react'` happens.\n */\nconst entryModule = `\n// This file is auto-generated on 'sanity dev'\n// Modifications to this file are automatically discarded\nimport studioConfig from %STUDIO_CONFIG_LOCATION%\nimport {renderStudio} from \"sanity\"\n\nrenderStudio(\n  document.getElementById(\"sanity\"),\n  studioConfig,\n  {reactStrictMode: %STUDIO_REACT_STRICT_MODE%, basePath: %STUDIO_BASE_PATH%}\n)\n`\n\nconst noConfigEntryModule = `\n// This file is auto-generated on 'sanity dev'\n// Modifications to this file are automatically discarded\nimport {renderStudio} from \"sanity\"\n\nconst studioConfig = {missingConfigFile: true}\n\nrenderStudio(\n  document.getElementById(\"sanity\"),\n  studioConfig,\n  {reactStrictMode: %STUDIO_REACT_STRICT_MODE%, basePath: %STUDIO_BASE_PATH%}\n)\n`\n\nconst appEntryModule = `\n// This file is auto-generated on 'sanity dev'\n// Modifications to this file are automatically discarded\nimport {createRoot} from 'react-dom/client'\nimport {createElement} from 'react'\nimport App from %ENTRY%\n\nconst root = createRoot(document.getElementById('root'))\nconst element = createElement(App)\nroot.render(element)\n`\n\nexport function getEntryModule(options: {\n  reactStrictMode: boolean\n  relativeConfigLocation: string | null\n  basePath?: string\n  entry?: string\n  isApp?: boolean\n}): string {\n  const {reactStrictMode, relativeConfigLocation, basePath, entry, isApp} = options\n\n  if (isApp) {\n    return appEntryModule.replace(/%ENTRY%/, JSON.stringify(entry || './src/App'))\n  }\n\n  const sourceModule = relativeConfigLocation ? entryModule : noConfigEntryModule\n\n  return sourceModule\n    .replace(/%STUDIO_REACT_STRICT_MODE%/, JSON.stringify(Boolean(reactStrictMode)))\n    .replace(/%STUDIO_CONFIG_LOCATION%/, JSON.stringify(relativeConfigLocation))\n    .replace(/%STUDIO_BASE_PATH%/, JSON.stringify(basePath || '/'))\n}\n","import fs from 'node:fs/promises'\nimport path from 'node:path'\n\nimport {debug as serverDebug} from './debug'\n\nconst debug = serverDebug.extend('config')\n\n/**\n * Resolves the path to the studio configuration file with the following extensions,\n * in preferred order: '.mjs', '.js', '.ts', '.jsx', '.tsx' (aligns with vite)\n *\n * Falls back to the default studio configuration exported by `sanity` if none is found\n *\n * @internal\n */\nexport async function getSanityStudioConfigPath(studioRootPath: string): Promise<string | null> {\n  const configPaths = [\n    path.join(studioRootPath, 'sanity.config.mjs'),\n    path.join(studioRootPath, 'sanity.config.js'),\n    path.join(studioRootPath, 'sanity.config.ts'),\n    path.join(studioRootPath, 'sanity.config.jsx'),\n    path.join(studioRootPath, 'sanity.config.tsx'),\n  ]\n\n  debug('Looking for configuration file in %d possible locations', configPaths.length)\n  const configs = await Promise.all(\n    configPaths.map(async (configPath) => ({\n      path: configPath,\n      exists: await fileExists(configPath),\n    })),\n  )\n\n  const availableConfigs = configs.filter((config) => config.exists)\n  debug('Found %d available configuration files', availableConfigs.length)\n\n  // No config file exists?\n  if (availableConfigs.length === 0) {\n    console.warn('No `sanity.config.js`/`sanity.config.ts` found - using default studio config')\n    return null\n  }\n\n  if (availableConfigs.length > 1) {\n    console.warn('Found multiple potential studio configs:')\n    availableConfigs.forEach((config) => console.warn(` - ${config.path}`))\n    console.warn(`Using ${availableConfigs[0].path}`)\n  }\n\n  return availableConfigs[0].path\n}\n\n/**\n * Asynchronously checks if a file exists. This is prone to race conditions,\n * as the file can exist/not exist by the time this resolves, but in this\n * case this is an acceptable trade-off. Best effort, and all that.\n */\nfunction fileExists(filePath: string): Promise<boolean> {\n  return fs.stat(filePath).then(\n    () => true,\n    () => false,\n  )\n}\n","import fs from 'node:fs/promises'\nimport path from 'node:path'\n\nimport chokidar from 'chokidar'\n\nimport {debug as serverDebug} from './debug'\nimport {getEntryModule} from './getEntryModule'\nimport {\n  decorateIndexWithAutoGeneratedWarning,\n  decorateIndexWithBridgeScript,\n  getPossibleDocumentComponentLocations,\n  renderDocument,\n} from './renderDocument'\nimport {getSanityStudioConfigPath} from './sanityConfig'\nimport {loadSanityMonorepo} from './sanityMonorepo'\n\nconst debug = serverDebug.extend('runtime')\n\nexport interface RuntimeOptions {\n  cwd: string\n  reactStrictMode: boolean\n  watch: boolean\n  basePath?: string\n  entry?: string\n  isApp?: boolean\n}\n\n/**\n * Generates the `.sanity/runtime` directory, and optionally watches for custom\n * document files, rebuilding when they change\n *\n * @param options - Current working directory (Sanity root dir), and whether or not to watch\n * @internal\n */\nexport async function writeSanityRuntime({\n  cwd,\n  reactStrictMode,\n  watch,\n  basePath,\n  entry,\n  isApp,\n}: RuntimeOptions): Promise<void> {\n  debug('Resolving Sanity monorepo information')\n  const monorepo = await loadSanityMonorepo(cwd)\n  const runtimeDir = path.join(cwd, '.sanity', 'runtime')\n\n  debug('Making runtime directory')\n  await fs.mkdir(runtimeDir, {recursive: true})\n\n  async function renderAndWriteDocument() {\n    debug('Rendering document template')\n    const indexHtml = decorateIndexWithBridgeScript(\n      decorateIndexWithAutoGeneratedWarning(\n        await renderDocument({\n          studioRootPath: cwd,\n          monorepo,\n          props: {\n            entryPath: `/${path.relative(cwd, path.join(runtimeDir, 'app.js'))}`,\n            basePath: basePath || '/',\n          },\n          isApp,\n        }),\n      ),\n    )\n\n    debug('Writing index.html to runtime directory')\n    await fs.writeFile(path.join(runtimeDir, 'index.html'), indexHtml)\n  }\n\n  if (watch) {\n    chokidar\n      .watch(getPossibleDocumentComponentLocations(cwd))\n      .on('all', () => renderAndWriteDocument())\n  }\n\n  await renderAndWriteDocument()\n\n  debug('Writing app.js to runtime directory')\n  let relativeConfigLocation: string | null = null\n  if (!isApp) {\n    const studioConfigPath = await getSanityStudioConfigPath(cwd)\n    relativeConfigLocation = studioConfigPath ? path.relative(runtimeDir, studioConfigPath) : null\n  }\n\n  const relativeEntry = cwd ? path.resolve(cwd, entry || './src/App') : entry\n  const appJsContent = getEntryModule({\n    reactStrictMode,\n    relativeConfigLocation,\n    basePath,\n    entry: relativeEntry,\n    isApp,\n  })\n  await fs.writeFile(path.join(runtimeDir, 'app.js'), appJsContent)\n}\n"],"names":["debug","debugIt","createExternalFromImportMap","imports","Object","keys","map","specifier","endsWith","RegExp","escapeRegExp","browserCompatibleSanityPackageSpecifiers","conditions","getSanityPkgExportAliases","sanityPkgPath","pkg","require","dirname","path","reduce","acc","next","dest","resolve","exports","browser","push","find","replacement","normalizeBasePath","pathName","replace","getMonorepoAliases","monorepoPath","default","aliases","fromEntries","entries","pkgName","pkgPath","join","loadSanityMonorepo","cwd","p","readResult","readPkgUp","packageJson","isSanityMonorepo","Favicons","$","_c","t0","Symbol","for","jsxs","Fragment","jsx","errorHandlerScript","GlobalErrorHandler","__html","NoJsStyles","NoJavascript","t1","t2","EMPTY_ARRAY","BasicDocument","props","entryPath","css","undefined","t3","t4","t5","t6","t7","t8","_temp","t9","t10","t11","t12","t13","t14","href","globalStyles","DefaultDocument","t15","TIMESTAMPED_IMPORTMAP_INJECTOR_SCRIPT","serverDebug","extend","useThreads","process","env","JEST_WORKER_ID","hasWarnedAbout","Set","defaultProps","autoGeneratedWarning","trim","renderDocument","options","Promise","reject","getDocumentHtml","studioRootPath","importMap","isApp","__filename","worker","Worker","execArgv","workerData","dev","shouldWarn","on","msg","type","has","warnKey","Array","isArray","message","forEach","warning","console","warn","chalk","yellow","add","error","Error","html","length","err","code","decorateIndexWithAutoGeneratedWarning","template","decorateIndexWithBridgeScript","scriptURL","SANITY_INTERNAL_ENV","getPossibleDocumentComponentLocations","_prefixUrlWithBasePath","url","basePath","normalizedBasePath","startsWith","slice","isMainThread","parentPort","renderDocumentFromWorkerData","monorepo","global","__DEV__","postMessage","addAliases","version","unregister","register","target","supported","extensions","unregisterJs","loader","Document","getDocumentComponent","URL","toString","addTimestampedImportMapScriptToHtml","renderToStaticMarkup","root","parseHtml","htmlEl","querySelector","oldRoot","appendChild","headEl","insertAdjacentHTML","JSON","stringify","outerHTML","userDefined","tryLoadDocumentComponent","DocumentComp","component","userExports","relativePath","relative","typeHint","modified","locations","componentPath","importFresh","Math","floor","fs","statSync","mtimeMs","entryChunkId","sanityBuildEntries","name","apply","buildStart","emitFile","id","generateBundle","_options","outputBundle","bundle","entryFile","values","file","facadeModuleId","entryFileName","fileName","viteMetadata","importedCss","key","entry","source","generateWebManifest","icons","src","sizes","mimeTypes","sanityFaviconsPlugin","defaultFaviconsPath","customFaviconsPath","staticUrlPath","cache","getFavicons","favicons","readdir","hasCustomFavicon","access","configureServer","viteDevServer","webManifest","webManifestPath","middlewares","use","req","res","writeHead","write","end","_parsedUrl","pathname","basename","includes","faviconPath","mimeType","extname","readFile","sanityRuntimeRewritePlugin","getViteConfig","mode","outputDir","sourceMap","server","minify","rawBasePath","reactCompiler","__dirname","staticPath","viteReact","envVars","getAppEnvironmentVariables","prefix","jsonEncode","getStudioEnvironmentVariables","viteConfig","cacheDir","base","build","outDir","sourcemap","host","port","strictPort","warmup","clientFiles","configFile","plugins","babel","envPrefix","logLevel","alias","dedupe","define","assetsDir","emptyOutDir","rollupOptions","onwarn","onRollupWarn","external","input","sanity","suppressUnusedImport","names","filter","n","ids","every","finalizeViteConfig","config","mergeConfig","extendViteConfigWithUserConfig","defaultConfig","userConfig","entryModule","noConfigEntryModule","appEntryModule","getEntryModule","reactStrictMode","relativeConfigLocation","Boolean","getSanityStudioConfigPath","configPaths","availableConfigs","all","configPath","exists","fileExists","filePath","stat","then","writeSanityRuntime","watch","runtimeDir","mkdir","recursive","renderAndWriteDocument","indexHtml","writeFile","chokidar","studioConfigPath","relativeEntry","appJsContent"],"mappings":"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"}