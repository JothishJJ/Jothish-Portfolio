{"version":3,"file":"deleteSchemaAction.js","sources":["../../src/_internal/cli/actions/schema/deleteSchemaAction.ts"],"sourcesContent":["import {type CliCommandContext} from '@sanity/cli'\nimport chalk from 'chalk'\nimport uniq from 'lodash/uniq'\n\nimport {isDefined} from '../../../manifest/manifestTypeHelpers'\nimport {type SchemaStoreActionResult, type SchemaStoreContext} from './schemaStoreTypes'\nimport {createManifestExtractor, ensureManifestExtractSatisfied} from './utils/mainfestExtractor'\nimport {createManifestReader} from './utils/manifestReader'\nimport {createSchemaApiClient} from './utils/schemaApiClient'\nimport {\n  getProjectIdDatasetsOutString,\n  getStringList,\n  projectIdDatasetPair,\n} from './utils/schemaStoreOutStrings'\nimport {parseDeleteSchemasConfig, type SchemaStoreCommonFlags} from './utils/schemaStoreValidation'\nimport {uniqueProjectIdDataset} from './utils/uniqueProjectIdDataset'\n\nexport interface DeleteSchemaFlags extends SchemaStoreCommonFlags {\n  ids?: string\n  dataset?: string\n}\n\ninterface DeleteResult {\n  projectId: string\n  dataset: string\n  schemaId: string\n  deleted: boolean\n}\n\nclass DeleteIdError extends Error {\n  public schemaId: string\n  public projectId: string\n  public dataset: string\n  constructor(args: {\n    schemaId: string\n    projectId: string\n    dataset: string\n    options?: ErrorOptions\n  }) {\n    super((args.options?.cause as {message?: string})?.message, args.options)\n    this.name = 'DeleteIdError'\n    this.schemaId = args.schemaId\n    this.projectId = args.projectId\n    this.dataset = args.dataset\n  }\n}\n\nexport default function deleteSchemasActionForCommand(\n  flags: DeleteSchemaFlags,\n  context: CliCommandContext,\n): Promise<SchemaStoreActionResult> {\n  return deleteSchemaAction(flags, {\n    ...context,\n    manifestExtractor: createManifestExtractor(context),\n  })\n}\n\n/**\n * Deletes all stored schemas matching --ids in workspace datasets.\n *\n * Workspaces are determined by on-disk manifest file â€“ not directly from sanity.config.\n * All schema store actions require a manifest to exist, so we regenerate it by default.\n * Manifest generation can be optionally disabled with --no-manifest-extract.\n * In this case the command uses and existing file or throws when missing.\n */\nexport async function deleteSchemaAction(\n  flags: DeleteSchemaFlags,\n  context: SchemaStoreContext,\n): Promise<SchemaStoreActionResult> {\n  const {ids, dataset, extractManifest, manifestDir, verbose} = parseDeleteSchemasConfig(\n    flags,\n    context,\n  )\n  const {output, apiClient, jsonReader, manifestExtractor} = context\n\n  // prettier-ignore\n  if (!(await ensureManifestExtractSatisfied({schemaRequired: true, extractManifest, manifestDir,  manifestExtractor, output, telemetry: context.telemetry}))) {\n    return 'failure'\n  }\n\n  const {client, projectId} = createSchemaApiClient(apiClient)\n  const manifest = await createManifestReader({manifestDir, output, jsonReader}).getManifest()\n\n  const workspaces = manifest.workspaces.filter(\n    (workspace) => !dataset || workspace.dataset === dataset,\n  )\n\n  const projectDatasets = uniqueProjectIdDataset(workspaces)\n\n  const results = await Promise.allSettled(\n    projectDatasets.flatMap(({projectId: targetProjectId, dataset: targetDataset}) => {\n      return ids.map(async ({schemaId}): Promise<DeleteResult> => {\n        const targetClient = client.withConfig({\n          projectId: targetProjectId,\n          dataset: targetDataset,\n        })\n        try {\n          const existing = await targetClient.getDocument(schemaId)\n          if (!existing) {\n            return {\n              projectId: targetProjectId,\n              dataset: targetDataset,\n              schemaId,\n              deleted: false,\n            }\n          }\n\n          const deletedSchema = await targetClient.request<{deleted: boolean} | undefined>({\n            method: 'DELETE',\n            url: `/projects/${targetProjectId}/datasets/${targetDataset}/schemas/${schemaId}`,\n          })\n          return {\n            projectId: targetProjectId,\n            dataset: targetDataset,\n            schemaId,\n            deleted: !!deletedSchema?.deleted,\n          }\n        } catch (err) {\n          throw new DeleteIdError({\n            schemaId,\n            projectId: targetProjectId,\n            dataset: targetDataset,\n            options: {cause: err},\n          })\n        }\n      })\n    }),\n  )\n\n  const deletedIds = results\n    .filter((r): r is PromiseFulfilledResult<DeleteResult> => r.status === 'fulfilled')\n    .filter((r) => r.value.deleted)\n    .map((r) => r.value)\n\n  const deleteFailureIds = uniq(\n    results\n      .filter((r) => r.status === 'rejected')\n      .map((result) => {\n        const error = result.reason\n        if (error instanceof DeleteIdError) {\n          output.error(\n            chalk.red(\n              `Failed to delete schema \"${error.schemaId}\" in \"${projectIdDatasetPair(error)}\":\\n${error.message}`,\n            ),\n          )\n          if (verbose) output.error(error)\n          return error.schemaId\n        }\n        throw error\n      }),\n  )\n\n  const notFound = uniq(\n    results\n      .filter((r): r is PromiseFulfilledResult<DeleteResult> => r.status === 'fulfilled')\n      .filter((r) => !r.value.deleted)\n      .filter(\n        (r) =>\n          !deletedIds.map(({schemaId}) => schemaId).includes(r.value.schemaId) &&\n          !deleteFailureIds.includes(r.value.schemaId),\n      )\n      .map((r) => r.value.schemaId),\n  )\n\n  const success = deletedIds.length === ids.length\n  if (success) {\n    output.success(`Successfully deleted ${deletedIds.length}/${ids.length} schemas`)\n  } else {\n    output.error(\n      [\n        `Deleted ${deletedIds.length}/${ids.length} schemas.`,\n        deletedIds.length\n          ? `Successfully deleted ids:\\n${deletedIds\n              .map((result) => `- ${result.schemaId} (in ${projectIdDatasetPair(result)})`)\n              .join('\\n')}`\n          : undefined,\n        notFound.length\n          ? `Ids not found in ${getProjectIdDatasetsOutString(projectDatasets)}:\\n${getStringList(notFound)}`\n          : undefined,\n        ...(deleteFailureIds.length\n          ? [`Failed to delete ids:\\n${getStringList(deleteFailureIds)}`, 'Check logs for errors.']\n          : []),\n      ]\n        .filter(isDefined)\n        .join('\\n'),\n    )\n  }\n\n  return success ? 'success' : 'failure'\n}\n"],"names":["DeleteIdError","Error","constructor","args","options","cause","message","name","schemaId","projectId","dataset","deleteSchemasActionForCommand","flags","context","deleteSchemaAction","manifestExtractor","createManifestExtractor","ids","extractManifest","manifestDir","verbose","parseDeleteSchemasConfig","output","apiClient","jsonReader","ensureManifestExtractSatisfied","schemaRequired","telemetry","client","createSchemaApiClient","workspaces","createManifestReader","getManifest","filter","workspace","projectDatasets","uniqueProjectIdDataset","results","Promise","allSettled","flatMap","targetProjectId","targetDataset","map","targetClient","withConfig","getDocument","deleted","deletedSchema","request","method","url","err","deletedIds","r","status","value","deleteFailureIds","uniq","result","error","reason","chalk","red","projectIdDatasetPair","notFound","includes","success","length","join","undefined","getProjectIdDatasetsOutString","getStringList","isDefined"],"mappings":"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"}