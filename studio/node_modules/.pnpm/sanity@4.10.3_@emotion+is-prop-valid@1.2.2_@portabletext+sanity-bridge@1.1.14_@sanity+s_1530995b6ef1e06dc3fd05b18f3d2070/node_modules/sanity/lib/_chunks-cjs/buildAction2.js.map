{"version":3,"file":"buildAction2.js","sources":["../../src/_internal/cli/actions/build/build.telemetry.ts","../../src/_internal/cli/actions/build/buildAction.ts"],"sourcesContent":["import {defineTrace} from '@sanity/telemetry'\n\nexport const BuildTrace = defineTrace<{outputSize: number}>({\n  name: 'Studio Build Completed',\n  version: 0,\n  description: 'A Studio build completed',\n})\n","import path from 'node:path'\n\nimport chalk from 'chalk'\nimport {info, warning} from 'log-symbols'\nimport semver from 'semver'\nimport {noopLogger} from '@sanity/telemetry'\nimport {rimraf} from 'rimraf'\nimport type {CliCommandArguments, CliCommandContext} from '@sanity/cli'\n\nimport {buildStaticFiles} from '../../server'\nimport {checkStudioDependencyVersions} from '../../util/checkStudioDependencyVersions'\nimport {checkRequiredDependencies} from '../../util/checkRequiredDependencies'\nimport {getTimer} from '../../util/timing'\nimport {BuildTrace} from './build.telemetry'\nimport {buildVendorDependencies} from '../../server/buildVendorDependencies'\nimport {compareDependencyVersions} from '../../util/compareDependencyVersions'\nimport {shouldAutoUpdate} from '../../util/shouldAutoUpdate'\nimport {formatModuleSizes, sortModulesBySize} from '../../util/moduleFormatUtils'\nimport {upgradePackages} from '../../util/packageManager/upgradePackages'\nimport {getPackageManagerChoice} from '../../util/packageManager/packageManagerChoice'\nimport {isInteractive} from '../../util/isInteractive'\nimport {getAutoUpdatesImportMap} from '../../util/getAutoUpdatesImportMap'\nimport {getAppId} from '../../util/getAppId'\nimport {baseUrl} from '../../util/baseUrl'\nimport {warnAboutMissingAppId} from '../../util/warnAboutMissingAppId'\n\nexport interface BuildSanityStudioCommandFlags {\n  'yes'?: boolean\n  'y'?: boolean\n  'minify'?: boolean\n  'stats'?: boolean\n  'source-maps'?: boolean\n  'auto-updates'?: boolean\n}\n\nexport default async function buildSanityStudio(\n  args: CliCommandArguments<BuildSanityStudioCommandFlags>,\n  context: CliCommandContext,\n  overrides?: {basePath?: string},\n): Promise<{didCompile: boolean}> {\n  const timer = getTimer()\n  const {output, prompt, workDir, cliConfig, telemetry = noopLogger, cliConfigPath} = context\n  const flags: BuildSanityStudioCommandFlags = {\n    'minify': true,\n    'stats': false,\n    'source-maps': false,\n    ...args.extOptions,\n  }\n\n  /**\n   * Unattended mode means that if there are any prompts it will use `YES` for them but will no change anything that doesn't have a prompt\n   */\n  const unattendedMode = Boolean(flags.yes || flags.y)\n  const defaultOutputDir = path.resolve(path.join(workDir, 'dist'))\n  const outputDir = path.resolve(args.argsWithoutOptions[0] || defaultOutputDir)\n\n  await checkStudioDependencyVersions(workDir)\n\n  // If the check resulted in a dependency install, the CLI command will be re-run,\n  // thus we want to exit early\n  const {didInstall, installedSanityVersion} = await checkRequiredDependencies(context)\n  if (didInstall) {\n    return {didCompile: false}\n  }\n\n  const autoUpdatesEnabled = shouldAutoUpdate({flags, cliConfig, output})\n\n  let autoUpdatesImports = {}\n  if (autoUpdatesEnabled) {\n    // Get the clean version without build metadata: https://semver.org/#spec-item-10\n    const cleanSanityVersion = semver.parse(installedSanityVersion)?.version\n    if (!cleanSanityVersion) {\n      throw new Error(`Failed to parse installed Sanity version: ${installedSanityVersion}`)\n    }\n\n    const sanityDependencies = [\n      {name: 'sanity', version: cleanSanityVersion},\n      {name: '@sanity/vision', version: cleanSanityVersion},\n    ]\n\n    const appId = getAppId({cliConfig, output})\n\n    autoUpdatesImports = getAutoUpdatesImportMap(sanityDependencies, {appId})\n\n    output.print(`${info} Building with auto-updates enabled`)\n\n    // note: we want to show this warning only if running `sanity build`\n    // since `sanity deploy` will prompt for appId if it's missing and tell the user to add it to sanity.cli.ts when done\n    // see deployAction.ts\n    if (args.groupOrCommand !== 'deploy' && !appId) {\n      warnAboutMissingAppId({\n        appType: 'studio',\n        cliConfigPath,\n        output,\n        projectId: cliConfig?.api?.projectId,\n      })\n    }\n\n    // Check the versions\n    const result = await compareDependencyVersions(sanityDependencies, workDir)\n\n    if (result?.length) {\n      const warning =\n        `The following local package versions are different from the versions currently served at runtime.\\n` +\n        `When using auto updates, we recommend that you test locally with the same versions before deploying. \\n\\n` +\n        `${result.map((mod) => ` - ${mod.pkg} (local version: ${mod.installed}, runtime version: ${mod.remote})`).join('\\n')} \\n\\n`\n\n      // If it is non-interactive or in unattended mode, we don't want to prompt\n      if (isInteractive && !unattendedMode) {\n        const choice = await prompt.single({\n          type: 'list',\n          message: chalk.yellow(\n            `${warning}\\n\\nDo you want to upgrade local versions before deploying?`,\n          ),\n          choices: [\n            {\n              type: 'choice',\n              value: 'upgrade',\n              name: `Upgrade local versions (recommended). You will need to run the ${args.groupOrCommand} command again`,\n            },\n            {\n              type: 'choice',\n              value: 'upgrade-and-proceed',\n              name: `Upgrade and proceed with ${args.groupOrCommand}`,\n            },\n            {\n              type: 'choice',\n              value: 'continue',\n              name: `Continue anyway`,\n            },\n            {type: 'choice', name: 'Cancel', value: 'cancel'},\n          ],\n          default: 'upgrade-and-proceed',\n        })\n\n        if (choice === 'cancel') {\n          return {didCompile: false}\n        }\n\n        if (choice === 'upgrade' || choice === 'upgrade-and-proceed') {\n          await upgradePackages(\n            {\n              packageManager: (await getPackageManagerChoice(workDir, {interactive: false})).chosen,\n              packages: result.map((res) => [res.pkg, res.remote]),\n            },\n            context,\n          )\n\n          if (choice !== 'upgrade-and-proceed') {\n            return {didCompile: false}\n          }\n        }\n      } else {\n        // if non-interactive or unattended, just show the warning\n        console.warn(`WARNING: ${warning}`)\n      }\n    }\n  }\n\n  const envVarKeys = getSanityEnvVars()\n  if (envVarKeys.length > 0) {\n    output.print(\n      '\\nIncluding the following environment variables as part of the JavaScript bundle:',\n    )\n    envVarKeys.forEach((key) => output.print(`- ${key}`))\n    output.print('')\n  }\n\n  let shouldClean = true\n  if (outputDir !== defaultOutputDir && !unattendedMode) {\n    shouldClean = await prompt.single({\n      type: 'confirm',\n      message: `Do you want to delete the existing directory (${outputDir}) first?`,\n      default: true,\n    })\n  }\n\n  // Determine base path for built studio\n  let basePath = '/'\n  const envBasePath = process.env.SANITY_STUDIO_BASEPATH\n  const configBasePath = cliConfig?.project?.basePath\n\n  // Allow `sanity deploy` to override base path\n  if (overrides?.basePath) {\n    basePath = overrides.basePath\n  } else if (envBasePath) {\n    // Environment variable (SANITY_STUDIO_BASEPATH)\n    basePath = envBasePath\n  } else if (configBasePath) {\n    // `sanity.cli.ts`\n    basePath = configBasePath\n  }\n\n  if (envBasePath && configBasePath) {\n    output.warn(\n      `Overriding configured base path (${configBasePath}) with value from environment variable (${envBasePath})`,\n    )\n  }\n\n  let spin\n\n  if (shouldClean) {\n    timer.start('cleanOutputFolder')\n    spin = output.spinner('Clean output folder').start()\n    await rimraf(outputDir)\n    const cleanDuration = timer.end('cleanOutputFolder')\n    spin.text = `Clean output folder (${cleanDuration.toFixed()}ms)`\n    spin.succeed()\n  }\n\n  spin = output.spinner(`Build Sanity Studio`).start()\n\n  const trace = telemetry.trace(BuildTrace)\n  trace.start()\n\n  let importMap\n\n  if (autoUpdatesEnabled) {\n    importMap = {\n      imports: {\n        ...(await buildVendorDependencies({cwd: workDir, outputDir, basePath})),\n        ...autoUpdatesImports,\n      },\n    }\n  }\n\n  try {\n    timer.start('bundleStudio')\n\n    const bundle = await buildStaticFiles({\n      cwd: workDir,\n      outputDir,\n      basePath,\n      sourceMap: Boolean(flags['source-maps']),\n      minify: Boolean(flags.minify),\n      vite: cliConfig && 'vite' in cliConfig ? cliConfig.vite : undefined,\n      importMap,\n      reactCompiler:\n        cliConfig && 'reactCompiler' in cliConfig ? cliConfig.reactCompiler : undefined,\n      entry: cliConfig && 'app' in cliConfig ? cliConfig.app?.entry : undefined,\n    })\n\n    trace.log({\n      outputSize: bundle.chunks\n        .flatMap((chunk) => chunk.modules.flatMap((mod) => mod.renderedLength))\n        .reduce((sum, n) => sum + n, 0),\n    })\n    const buildDuration = timer.end('bundleStudio')\n\n    spin.text = `Build Sanity Studio (${buildDuration.toFixed()}ms)`\n    spin.succeed()\n\n    trace.complete()\n    if (flags.stats) {\n      output.print('\\nLargest module files:')\n      output.print(formatModuleSizes(sortModulesBySize(bundle.chunks).slice(0, 15)))\n    }\n  } catch (err) {\n    spin.fail()\n    trace.error(err)\n    throw err\n  }\n\n  return {didCompile: true}\n}\n\n// eslint-disable-next-line no-process-env\nfunction getSanityEnvVars(env: Record<string, string | undefined> = process.env): string[] {\n  return Object.keys(env).filter((key) => key.toUpperCase().startsWith('SANITY_STUDIO_'))\n}\n"],"names":["BuildTrace","defineTrace","name","version","description","buildSanityStudio","args","context","overrides","timer","getTimer","output","prompt","workDir","cliConfig","telemetry","noopLogger","cliConfigPath","flags","extOptions","unattendedMode","Boolean","yes","y","defaultOutputDir","path","resolve","join","outputDir","argsWithoutOptions","checkStudioDependencyVersions","didInstall","installedSanityVersion","checkRequiredDependencies","didCompile","autoUpdatesEnabled","shouldAutoUpdate","autoUpdatesImports","cleanSanityVersion","semver","parse","Error","sanityDependencies","appId","getAppId","getAutoUpdatesImportMap","print","info","groupOrCommand","warnAboutMissingAppId","appType","projectId","api","result","compareDependencyVersions","length","warning","map","mod","pkg","installed","remote","isInteractive","choice","single","type","message","chalk","yellow","choices","value","default","upgradePackages","packageManager","getPackageManagerChoice","interactive","chosen","packages","res","console","warn","envVarKeys","getSanityEnvVars","forEach","key","shouldClean","basePath","envBasePath","process","env","SANITY_STUDIO_BASEPATH","configBasePath","project","spin","start","spinner","rimraf","cleanDuration","end","text","toFixed","succeed","trace","importMap","imports","buildVendorDependencies","cwd","bundle","buildStaticFiles","sourceMap","minify","vite","undefined","reactCompiler","entry","app","log","outputSize","chunks","flatMap","chunk","modules","renderedLength","reduce","sum","n","buildDuration","complete","stats","formatModuleSizes","sortModulesBySize","slice","err","fail","error","Object","keys","filter","toUpperCase","startsWith"],"mappings":"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"}