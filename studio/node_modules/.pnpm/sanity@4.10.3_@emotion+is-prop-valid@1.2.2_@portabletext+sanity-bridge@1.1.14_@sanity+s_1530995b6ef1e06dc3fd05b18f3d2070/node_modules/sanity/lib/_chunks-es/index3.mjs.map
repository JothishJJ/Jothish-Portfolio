{"version":3,"file":"index3.mjs","sources":["../../src/structure/structureResolvers/PaneResolutionError.ts","../../src/structure/structureResolvers/assignId.ts","../../src/structure/structureResolvers/createPaneResolver.ts","../../src/structure/structureResolvers/memoBind.ts","../../src/structure/structureResolvers/resolveIntent.ts","../../src/structure/structureResolvers/createResolvedPaneNodeStream.ts","../../src/structure/structureResolvers/useResolvedPanes.ts","../../src/structure/components/structureTool/intentResolver/utils.ts","../../src/structure/components/structureTool/intentResolver/IntentResolver.tsx","../../src/structure/components/structureTool/StructureError.tsx","../../src/structure/components/structureTool/NoDocumentTypesScreen.tsx","../../src/structure/components/structureTool/StructureTitle.tsx","../../src/structure/components/structureTool/StructureTool.tsx","../../src/structure/components/structureTool/StructureToolBoundary.tsx"],"sourcesContent":["import {type RouterPaneSiblingContext} from '../types'\n\nexport interface PaneResolutionErrorOptions {\n  message: string\n  context?: RouterPaneSiblingContext\n  helpId?: string\n  cause?: Error\n}\n\n/**\n * An error thrown during pane resolving. This error is meant to be bubbled up\n * through react and handled in an error boundary. It includes a `cause`\n * property which is the original error caught\n */\nexport class PaneResolutionError extends Error {\n  cause: Error | undefined\n  context: RouterPaneSiblingContext | undefined\n  helpId: string | undefined\n\n  constructor({message, context, helpId, cause}: PaneResolutionErrorOptions) {\n    super(message)\n    this.name = 'PaneResolutionError'\n    this.context = context\n    this.helpId = helpId\n    this.cause = cause\n  }\n}\n","import {nanoid} from 'nanoid'\n\n// `WeakMap`s require the first type param to extend `object`\nconst randomIdCache = new WeakMap<object, string>()\n\n/**\n * given an object, this function randomly generates an ID and returns it. this\n * result is then saved in a WeakMap so subsequent requests for the same object\n * will receive the same ID\n */\nexport function assignId(obj: object): string {\n  const cachedValue = randomIdCache.get(obj)\n  if (cachedValue) return cachedValue\n\n  const id = nanoid()\n  randomIdCache.set(obj, id)\n  return id\n}\n","import {from, isObservable, type Observable, of as observableOf} from 'rxjs'\nimport {publishReplay, refCount, switchMap} from 'rxjs/operators'\nimport {isRecord} from 'sanity'\n\nimport {type PaneNode, type RouterPaneSiblingContext, type UnresolvedPaneNode} from '../types'\nimport {PaneResolutionError} from './PaneResolutionError'\n\ninterface Serializable {\n  serialize: (...args: never[]) => unknown\n}\n\nconst isPromise = (thing: any): thing is PromiseLike<unknown> => {\n  return !!thing && typeof thing?.then === 'function'\n}\nconst isSerializable = (thing: unknown): thing is Serializable => {\n  if (!isRecord(thing)) return false\n  return typeof thing.serialize === 'function'\n}\n\n/**\n * The signature of the function used to take an `UnresolvedPaneNode` and turn\n * it into an `Observable<PaneNode>`.\n */\nexport type PaneResolver = (\n  unresolvedPane: UnresolvedPaneNode | undefined,\n  context: RouterPaneSiblingContext,\n  flatIndex: number,\n) => Observable<PaneNode>\n\nexport type PaneResolverMiddleware = (paneResolveFn: PaneResolver) => PaneResolver\n\nconst rethrowWithPaneResolutionErrors: PaneResolverMiddleware =\n  (next) => (unresolvedPane, context, flatIndex) => {\n    try {\n      return next(unresolvedPane, context, flatIndex)\n    } catch (e) {\n      // re-throw errors that are already `PaneResolutionError`s\n      if (e instanceof PaneResolutionError) {\n        throw e\n      }\n\n      // anything else, wrap with `PaneResolutionError` and set the underlying\n      // error as a the `cause`\n      throw new PaneResolutionError({\n        message: typeof e?.message === 'string' ? e.message : '',\n        context,\n        cause: e,\n      })\n    }\n  }\n\nconst wrapWithPublishReplay: PaneResolverMiddleware =\n  (next) =>\n  (...args) => {\n    return next(...args).pipe(\n      // need to add publishReplay + refCount to ensure new subscribers always\n      // get an emission. without this, memoized observables may get stuck\n      // waiting for their first emissions resulting in a loading pane\n      publishReplay(1),\n      refCount(),\n    )\n  }\n\nexport function createPaneResolver(middleware: PaneResolverMiddleware): PaneResolver {\n  // note: this API includes a middleware/wrapper function because the function\n  // is recursive. we want to call the wrapped version of the function always\n  // (even inside of nested calls) so the identifier invoked for the recursion\n  // should be the wrapped version\n  const resolvePane = rethrowWithPaneResolutionErrors(\n    wrapWithPublishReplay(\n      middleware((unresolvedPane, context, flatIndex) => {\n        if (!unresolvedPane) {\n          throw new PaneResolutionError({\n            message: 'Pane returned no child',\n            context,\n            helpId: 'structure-item-returned-no-child',\n          })\n        }\n\n        if (isPromise(unresolvedPane) || isObservable(unresolvedPane)) {\n          return from(unresolvedPane).pipe(\n            switchMap((result) => resolvePane(result, context, flatIndex)),\n          )\n        }\n\n        if (isSerializable(unresolvedPane)) {\n          return resolvePane(unresolvedPane.serialize(context), context, flatIndex)\n        }\n\n        if (typeof unresolvedPane === 'function') {\n          return resolvePane(unresolvedPane(context.id, context), context, flatIndex)\n        }\n\n        return observableOf(unresolvedPane)\n      }),\n    ),\n  )\n\n  return resolvePane\n}\n","/* eslint-disable @typescript-eslint/no-unsafe-function-type */\n\n// `WeakMap`s require the first type param to extend `object`\nconst bindCache = new WeakMap<object, Map<string, Function>>()\n\n/**\n * An alternative to `obj.method.bind(obj)` that utilizes a weakmap to return\n * the same memory reference for sequent binds.\n */\nexport function memoBind<\n  T extends object,\n  K extends keyof {[P in keyof T]: T[P] extends Function ? T[P] : never},\n>(obj: T, methodKey: K): T[K]\nexport function memoBind(obj: Record<string, unknown>, methodKey: string): Function {\n  const boundMethods = bindCache.get(obj) || new Map<string, Function>()\n  if (boundMethods) {\n    const bound = boundMethods.get(methodKey)\n    if (bound) return bound\n  }\n\n  const method = obj[methodKey]\n\n  if (typeof method !== 'function') {\n    throw new Error(\n      `Expected property \\`${methodKey}\\` to be a function but got ${typeof method} instead.`,\n    )\n  }\n\n  const bound = method.bind(obj)\n  boundMethods.set(methodKey, bound)\n  bindCache.set(obj, boundMethods)\n\n  return bound\n}\n","import {omit} from 'lodash'\nimport {firstValueFrom, type Observable} from 'rxjs'\n\nimport {type StructureContext} from '../structureBuilder'\nimport {\n  type PaneNode,\n  type RouterPanes,\n  type RouterPaneSiblingContext,\n  type UnresolvedPaneNode,\n} from '../types'\nimport {assignId} from './assignId'\nimport {createPaneResolver, type PaneResolverMiddleware} from './createPaneResolver'\nimport {memoBind} from './memoBind'\n\ninterface TraverseOptions {\n  unresolvedPane: UnresolvedPaneNode | undefined\n  intent: string\n  params: {type: string; id: string; [key: string]: string | undefined}\n  payload: unknown\n  parent: PaneNode | null\n  path: string[]\n  currentId: string\n  flatIndex: number\n  levelIndex: number\n  structureContext: StructureContext\n}\n\nexport interface ResolveIntentOptions {\n  rootPaneNode?: UnresolvedPaneNode\n  intent: string\n  params: {type: string; id: string; [key: string]: string | undefined}\n  payload: unknown\n  structureContext: StructureContext\n}\n\n/**\n * Resolves an intent request using breadth first search. If a match is not\n * found, the intent will resolve to the fallback editor.\n *\n * A match is found if:\n * 1. the `PaneNode` is of type `document` and the its ID matches the intent ID\n * 2. the `PaneNode` is of type `documentList` and the `schemaTypeName` matches\n * 3. the `PaneNode`'s `canHandleIntent` method returns true\n *\n * If a `PaneNode` of type `list` is found, it will be searched for a match.\n *\n * @see PaneNode\n */\nexport async function resolveIntent(options: ResolveIntentOptions): Promise<RouterPanes> {\n  const resolvedPaneCache = new Map<string, Observable<PaneNode>>()\n\n  // this is a simple version of the memoizer in `createResolvedPaneNodeStream`\n  const memoize: PaneResolverMiddleware = (nextFn) => (unresolvedPane, context, flatIndex) => {\n    const key = unresolvedPane && `${assignId(unresolvedPane)}-${context.path.join('__')}`\n    const cachedResolvedPane = key && resolvedPaneCache.get(key)\n    if (cachedResolvedPane) return cachedResolvedPane\n\n    const result = nextFn(unresolvedPane, context, flatIndex)\n    if (key) resolvedPaneCache.set(key, result)\n    return result\n  }\n\n  const resolvePane = createPaneResolver(memoize)\n\n  const fallbackEditorPanes: RouterPanes = [\n    [\n      {\n        id: `__edit__${options.params.id}`,\n        params: {...omit(options.params, ['id']), type: options.params.type},\n        payload: options.payload,\n      },\n    ],\n  ]\n\n  async function traverse({\n    currentId,\n    flatIndex,\n    intent,\n    params,\n    parent,\n    path,\n    payload,\n    unresolvedPane,\n    levelIndex,\n    structureContext,\n  }: TraverseOptions): Promise<\n    Array<{panes: RouterPanes; depthIndex: number; levelIndex: number}>\n  > {\n    if (!unresolvedPane) return []\n\n    const {id: targetId, type: schemaTypeName, ...otherParams} = params\n    const context: RouterPaneSiblingContext = {\n      id: currentId,\n      splitIndex: 0,\n      parent,\n      path,\n      index: flatIndex,\n      params: {},\n      payload: undefined,\n      structureContext,\n    }\n    const resolvedPane = await firstValueFrom(resolvePane(unresolvedPane, context, flatIndex))\n\n    // if the resolved pane is a document pane and the pane's ID matches then\n    // resolve the intent to the current path\n    if (resolvedPane.type === 'document' && resolvedPane.id === targetId) {\n      return [\n        {\n          panes: [\n            ...path.slice(0, path.length - 1).map((i) => [{id: i}]),\n            [{id: targetId, params: otherParams, payload}],\n          ],\n          depthIndex: path.length,\n          levelIndex,\n        },\n      ]\n    }\n\n    // NOTE: if you update this logic, please also update the similar handler in\n    // `getIntentState.ts`\n    if (\n      // if the resolve pane's `canHandleIntent` returns true, then resolve\n      resolvedPane.canHandleIntent?.(intent, params, {\n        pane: resolvedPane,\n        index: flatIndex,\n      }) ||\n      // if the pane's `canHandleIntent` did not return true, then match against\n      // this default case. we will resolve the intent if:\n      (resolvedPane.type === 'documentList' &&\n        // 1. the schema type matches (this required for the document to render)\n        resolvedPane.schemaTypeName === schemaTypeName &&\n        // 2. the filter is the default filter.\n        //\n        // NOTE: this case is to prevent false positive matches where the user\n        // has configured a more specific filter for a particular type. In that\n        // case, the user can implement their own `canHandleIntent` function\n        resolvedPane.options.filter === '_type == $type')\n    ) {\n      return [\n        {\n          panes: [\n            // map the current path to router panes\n            ...path.map((id) => [{id}]),\n            // then augment with the intents IDs and params\n            [{id: params.id, params: otherParams, payload}],\n          ],\n          depthIndex: path.length,\n          levelIndex,\n        },\n      ]\n    }\n\n    if (resolvedPane.type === 'list' && resolvedPane.child && resolvedPane.items) {\n      return (\n        await Promise.all(\n          resolvedPane.items.map((item, nextLevelIndex) => {\n            if (item.type === 'divider') return Promise.resolve([])\n\n            return traverse({\n              currentId: item._id || item.id,\n              flatIndex: flatIndex + 1,\n              intent,\n              params,\n              parent: resolvedPane,\n              path: [...path, item.id],\n              payload,\n              unresolvedPane:\n                typeof resolvedPane.child === 'function'\n                  ? memoBind(resolvedPane, 'child')\n                  : resolvedPane.child,\n              levelIndex: nextLevelIndex,\n              structureContext,\n            })\n          }),\n        )\n      ).flat()\n    }\n\n    return []\n  }\n\n  const matchingPanes = await traverse({\n    currentId: 'root',\n    flatIndex: 0,\n    levelIndex: 0,\n    intent: options.intent,\n    params: options.params,\n    parent: null,\n    path: [],\n    payload: options.payload,\n    unresolvedPane: options.rootPaneNode,\n    structureContext: options.structureContext,\n  })\n\n  const closestPaneToRoot = matchingPanes.sort((a, b) => {\n    // break ties with the level index\n    if (a.depthIndex === b.depthIndex) return a.levelIndex - b.levelIndex\n    return a.depthIndex - b.depthIndex\n  })[0]\n\n  if (closestPaneToRoot) {\n    return closestPaneToRoot.panes\n  }\n\n  return fallbackEditorPanes\n}\n","import {generateHelpUrl} from '@sanity/generate-help-url'\nimport {isEqual} from 'lodash'\nimport {concat, NEVER, type Observable, of as observableOf} from 'rxjs'\nimport {distinctUntilChanged, map, pairwise, scan, startWith, switchMap} from 'rxjs/operators'\n\nimport {type StructureContext} from '../structureBuilder'\nimport {\n  type DocumentPaneNode,\n  type PaneNode,\n  type PaneNodeResolver,\n  type RouterPanes,\n  type RouterPaneSibling,\n  type RouterPaneSiblingContext,\n  type UnresolvedPaneNode,\n} from '../types'\nimport {assignId} from './assignId'\nimport {\n  createPaneResolver,\n  type PaneResolver,\n  type PaneResolverMiddleware,\n} from './createPaneResolver'\nimport {memoBind} from './memoBind'\nimport {PaneResolutionError} from './PaneResolutionError'\n\n/**\n * the fallback editor child that is implicitly inserted into the structure tree\n * if the id starts with `__edit__`\n */\nconst fallbackEditorChild: PaneNodeResolver = (nodeId, context): DocumentPaneNode => {\n  const id = nodeId.replace(/^__edit__/, '')\n  const {\n    params,\n    payload,\n    structureContext: {resolveDocumentNode},\n  } = context\n  const {type, template} = params\n\n  if (!type) {\n    throw new Error(\n      `Document type for document with ID ${id} was not provided in the router params.`,\n    )\n  }\n\n  let defaultDocumentBuilder = resolveDocumentNode({schemaType: type, documentId: id}).id('editor')\n\n  if (template) {\n    defaultDocumentBuilder = defaultDocumentBuilder.initialValueTemplate(\n      template,\n      payload as {[key: string]: unknown},\n    )\n  }\n\n  return defaultDocumentBuilder.serialize() as DocumentPaneNode\n}\n\n/**\n * takes in a `RouterPaneSiblingContext` and returns a normalized string\n * representation that can be used for comparisons\n */\nfunction hashContext(context: RouterPaneSiblingContext): string {\n  return `contextHash(${JSON.stringify({\n    id: context.id,\n    parentId: parent && assignId(parent),\n    path: context.path,\n    index: context.index,\n    splitIndex: context.splitIndex,\n    serializeOptionsIndex: context.serializeOptions?.index,\n    serializeOptionsPath: context.serializeOptions?.path,\n  })})`\n}\n\n/**\n * takes in `ResolvedPaneMeta` and returns a normalized string representation\n * that can be used for comparisons\n */\nconst hashResolvedPaneMeta = (meta: ResolvedPaneMeta): string => {\n  const normalized = {\n    type: meta.type,\n    id: meta.routerPaneSibling.id,\n    params: meta.routerPaneSibling.params || {},\n    payload: meta.routerPaneSibling.payload || null,\n    flatIndex: meta.flatIndex,\n    groupIndex: meta.groupIndex,\n    siblingIndex: meta.siblingIndex,\n    path: meta.path,\n    paneNode: meta.type === 'resolvedMeta' ? assignId(meta.paneNode) : null,\n  }\n\n  return `metaHash(${JSON.stringify(normalized)})`\n}\n\n/**\n * Represents one flattened \"router pane\", including the source group and\n * sibling indexes.\n *\n * @see RouterPanes\n */\ninterface FlattenedRouterPane {\n  routerPaneSibling: RouterPaneSibling\n  flatIndex: number\n  groupIndex: number\n  siblingIndex: number\n}\n\n/**\n * The state of the accumulator used to store and manage memo cache state\n */\ninterface CacheState {\n  /**\n   * Holds the memoization results keyed by a combination of `assignId` and a\n   * context hash.\n   */\n  resolvedPaneCache: Map<string, Observable<PaneNode>>\n  /**\n   * Acts as a dictionary that stores cache keys by their flat index. This is\n   * used to clean up the cache between different branches in the pane\n   * structure.\n   *\n   * @see createResolvedPaneNodeStream look inside the `scan` where `wrapFn` is\n   * defined\n   */\n  cacheKeysByFlatIndex: Array<Set<string>>\n  /**\n   * The resulting memoized `PaneResolver` function. This function closes over\n   * the `resolvedPaneCache`.\n   */\n  resolvePane: PaneResolver\n  flattenedRouterPanes: FlattenedRouterPane[]\n}\n\nexport interface CreateResolvedPaneNodeStreamOptions {\n  /**\n   * an input stream of `RouterPanes`\n   * @see RouterPanes\n   */\n  routerPanesStream: Observable<RouterPanes>\n  /**\n   * any `UnresolvedPaneNode` (could be an observable, promise, pane resolver etc)\n   */\n  rootPaneNode: UnresolvedPaneNode\n  /** used primarily for testing */\n  initialCacheState?: CacheState\n\n  structureContext: StructureContext\n}\n\n/**\n * The result of pane resolving\n */\nexport type ResolvedPaneMeta = {\n  groupIndex: number\n  siblingIndex: number\n  flatIndex: number\n  routerPaneSibling: RouterPaneSibling\n  path: string[]\n} & ({type: 'loading'; paneNode: null} | {type: 'resolvedMeta'; paneNode: PaneNode})\n\ninterface ResolvePaneTreeOptions {\n  resolvePane: PaneResolver\n  flattenedRouterPanes: FlattenedRouterPane[]\n  unresolvedPane: UnresolvedPaneNode | undefined\n  parent: PaneNode | null\n  path: string[]\n  structureContext: StructureContext\n}\n\n/**\n * A recursive pane resolving function. Starts at one unresolved pane node and\n * continues until there is no more flattened router panes that can be used as\n * input to the unresolved panes.\n */\nfunction resolvePaneTree({\n  unresolvedPane,\n  flattenedRouterPanes,\n  parent,\n  path,\n  resolvePane,\n  structureContext,\n}: ResolvePaneTreeOptions): Observable<ResolvedPaneMeta[]> {\n  const [current, ...rest] = flattenedRouterPanes\n  const next = rest[0] as FlattenedRouterPane | undefined\n\n  const context: RouterPaneSiblingContext = {\n    id: current.routerPaneSibling.id,\n    splitIndex: current.siblingIndex,\n    parent,\n    path: [...path, current.routerPaneSibling.id],\n    index: current.flatIndex,\n    params: current.routerPaneSibling.params || {},\n    payload: current.routerPaneSibling.payload,\n    structureContext,\n  }\n\n  try {\n    return resolvePane(unresolvedPane, context, current.flatIndex).pipe(\n      // this switch map receives a resolved pane\n      switchMap((paneNode) => {\n        // we can create a `resolvedMeta` type using it\n        const resolvedPaneMeta: ResolvedPaneMeta = {\n          type: 'resolvedMeta',\n          ...current,\n          paneNode: paneNode,\n          path: context.path,\n        }\n\n        // for the other unresolved panes, we can create \"loading panes\"\n        const loadingPanes = rest.map((i, restIndex) => {\n          const loadingPanePath = [\n            ...context.path,\n            ...rest.slice(restIndex).map((_, currentIndex) => `[${i.flatIndex + currentIndex}]`),\n          ]\n\n          const loadingPane: ResolvedPaneMeta = {\n            type: 'loading',\n            path: loadingPanePath,\n            paneNode: null,\n            ...i,\n          }\n\n          return loadingPane\n        })\n\n        if (!rest.length) {\n          return observableOf([resolvedPaneMeta])\n        }\n\n        let nextStream\n\n        if (\n          // the fallback editor case\n          next?.routerPaneSibling.id.startsWith('__edit__')\n        ) {\n          nextStream = resolvePaneTree({\n            unresolvedPane: fallbackEditorChild,\n            flattenedRouterPanes: rest,\n            parent,\n            path: context.path,\n            resolvePane,\n            structureContext,\n          })\n        } else if (current.groupIndex === next?.groupIndex) {\n          // if the next flattened router pane has the same group index as the\n          // current flattened router pane, then the next flattened router pane\n          // belongs to the same group (i.e. it is a split pane)\n          nextStream = resolvePaneTree({\n            unresolvedPane,\n            flattenedRouterPanes: rest,\n            parent,\n            path,\n            resolvePane,\n            structureContext,\n          })\n        } else {\n          // normal children resolving\n          nextStream = resolvePaneTree({\n            unresolvedPane:\n              typeof paneNode.child === 'function'\n                ? (memoBind(paneNode, 'child') as PaneNodeResolver)\n                : paneNode.child,\n            flattenedRouterPanes: rest,\n            parent: paneNode,\n            path: context.path,\n            resolvePane,\n            structureContext,\n          })\n        }\n\n        return concat(\n          // we emit the loading panes first in a concat (this emits immediately)\n          observableOf([resolvedPaneMeta, ...loadingPanes]),\n          // then whenever the next stream is done, the results will be combined.\n          nextStream.pipe(map((nextResolvedPanes) => [resolvedPaneMeta, ...nextResolvedPanes])),\n        )\n      }),\n    )\n  } catch (e) {\n    if (e instanceof PaneResolutionError) {\n      if (e.context) {\n        console.warn(\n          `Pane resolution error at index ${e.context.index}${\n            e.context.splitIndex > 0 ? ` for split pane index ${e.context.splitIndex}` : ''\n          }: ${e.message}${e.helpId ? ` - see ${generateHelpUrl(e.helpId)}` : ''}`,\n          e,\n        )\n      }\n\n      if (e.helpId === 'structure-item-returned-no-child') {\n        // returning an observable of an empty array will remove loading panes\n        // note: this one intentionally does not throw\n        return observableOf([])\n      }\n    }\n\n    throw e\n  }\n}\n\n/**\n * Takes in a stream of `RouterPanes` and an unresolved root pane and returns\n * a stream of `ResolvedPaneMeta`\n */\nexport function createResolvedPaneNodeStream({\n  routerPanesStream,\n  rootPaneNode,\n  initialCacheState = {\n    cacheKeysByFlatIndex: [],\n    flattenedRouterPanes: [],\n    resolvedPaneCache: new Map(),\n    resolvePane: () => NEVER,\n  },\n  structureContext,\n}: CreateResolvedPaneNodeStreamOptions): Observable<ResolvedPaneMeta[]> {\n  const resolvedPanes$ = routerPanesStream.pipe(\n    // add in implicit \"root\" router pane\n    map((rawRouterPanes) => [[{id: 'root'}], ...rawRouterPanes]),\n    // create flattened router panes\n    map((routerPanes) => {\n      const flattenedRouterPanes: FlattenedRouterPane[] = routerPanes\n        .flatMap((routerPaneGroup, groupIndex) =>\n          routerPaneGroup.map((routerPaneSibling, siblingIndex) => ({\n            routerPaneSibling,\n            groupIndex,\n            siblingIndex,\n          })),\n        )\n        // add in the flat index\n        .map((i, index) => ({...i, flatIndex: index}))\n\n      return flattenedRouterPanes\n    }),\n    // calculate a \"diffIndex\" used for clearing the memo cache\n    startWith([] as FlattenedRouterPane[]),\n    pairwise(),\n    map(([prev, curr]) => {\n      for (let i = 0; i < curr.length; i++) {\n        const prevValue = prev[i]\n        const currValue = curr[i]\n\n        if (!isEqual(prevValue, currValue)) {\n          return {\n            flattenedRouterPanes: curr,\n            diffIndex: i,\n          }\n        }\n      }\n\n      return {\n        flattenedRouterPanes: curr,\n        diffIndex: curr.length,\n      }\n    }),\n    // create the memoized `resolvePane` function and manage the memo cache\n    scan((acc, next) => {\n      const {cacheKeysByFlatIndex, resolvedPaneCache} = acc\n      const {flattenedRouterPanes, diffIndex} = next\n\n      // use the `cacheKeysByFlatIndex` like a dictionary to find cache keys to\n      // and cache keys to delete\n      const beforeDiffIndex = cacheKeysByFlatIndex.slice(0, diffIndex + 1)\n      const afterDiffIndex = cacheKeysByFlatIndex.slice(diffIndex + 1)\n\n      const keysToKeep = new Set(beforeDiffIndex.flatMap((keySet) => Array.from(keySet)))\n      const keysToDelete = afterDiffIndex\n        .flatMap((keySet) => Array.from(keySet))\n        .filter((key) => !keysToKeep.has(key))\n\n      for (const key of keysToDelete) {\n        resolvedPaneCache.delete(key)\n      }\n\n      // create a memoizing pane resolver middleware that utilizes the cache\n      // maintained above. this keeps the cache from growing indefinitely\n      const memoize: PaneResolverMiddleware = (nextFn) => (unresolvedPane, context, flatIndex) => {\n        const key = unresolvedPane && `${assignId(unresolvedPane)}-${hashContext(context)}`\n        const cachedResolvedPane = key && resolvedPaneCache.get(key)\n        if (cachedResolvedPane) return cachedResolvedPane\n\n        const result = nextFn(unresolvedPane, context, flatIndex)\n        if (!key) return result\n\n        const cacheKeySet = cacheKeysByFlatIndex[flatIndex] || new Set()\n        cacheKeySet.add(key)\n        cacheKeysByFlatIndex[flatIndex] = cacheKeySet\n        resolvedPaneCache.set(key, result)\n        return result\n      }\n\n      return {\n        flattenedRouterPanes,\n        cacheKeysByFlatIndex,\n        resolvedPaneCache,\n        resolvePane: createPaneResolver(memoize),\n      }\n    }, initialCacheState),\n    // run the memoized, recursive resolving\n    switchMap(({flattenedRouterPanes, resolvePane}) =>\n      resolvePaneTree({\n        unresolvedPane: rootPaneNode,\n        flattenedRouterPanes,\n        parent: null,\n        path: [],\n        resolvePane,\n        structureContext,\n      }),\n    ),\n  )\n\n  // after we've created a stream of `ResolvedPaneMeta[]`, we need to clean up\n  // the results to remove unwanted loading panes and prevent unnecessary\n  // emissions\n  return resolvedPanes$.pipe(\n    // this diffs the previous emission with the current one. if there is a new\n    // loading pane at the same position where a previous pane already had a\n    // resolved value (looking at the IDs to compare), then return the previous\n    // pane instead of the loading pane\n    scan(\n      (prev, next) =>\n        next.map((nextPane, index) => {\n          const prevPane = prev[index] as ResolvedPaneMeta | undefined\n          if (!prevPane) return nextPane\n          if (nextPane.type !== 'loading') return nextPane\n\n          if (prevPane.routerPaneSibling.id === nextPane.routerPaneSibling.id) {\n            return prevPane\n          }\n          return nextPane\n        }),\n      [] as ResolvedPaneMeta[],\n    ),\n    // this prevents duplicate emissions\n    distinctUntilChanged((prev, next) => {\n      if (prev.length !== next.length) return false\n\n      for (let i = 0; i < next.length; i++) {\n        const prevValue = prev[i]\n        const nextValue = next[i]\n        if (hashResolvedPaneMeta(prevValue) !== hashResolvedPaneMeta(nextValue)) {\n          return false\n        }\n      }\n\n      return true\n    }),\n  )\n}\n","import {useEffect, useMemo, useState} from 'react'\nimport {ReplaySubject} from 'rxjs'\nimport {map} from 'rxjs/operators'\nimport {type RouterState, useRouter} from 'sanity/router'\n\nimport {LOADING_PANE} from '../constants'\nimport {type PaneNode, type RouterPaneGroup, type RouterPanes} from '../types'\nimport {useStructureTool} from '../useStructureTool'\nimport {createResolvedPaneNodeStream} from './createResolvedPaneNodeStream'\n\ninterface PaneData {\n  active: boolean\n  childItemId: string | null\n  groupIndex: number\n  index: number\n  itemId: string\n  key: string\n  pane: PaneNode | typeof LOADING_PANE\n  params: Record<string, string | undefined> & {perspective?: string}\n  path: string\n  payload: unknown\n  selected: boolean\n  siblingIndex: number\n}\n\nexport interface Panes {\n  paneDataItems: PaneData[]\n  routerPanes: RouterPanes\n  resolvedPanes: (PaneNode | typeof LOADING_PANE)[]\n}\n\nfunction useRouterPanesStream() {\n  const [routerStateSubject] = useState(() => new ReplaySubject<RouterState>(1))\n  const routerPanes$ = useMemo(\n    () =>\n      routerStateSubject\n        .asObservable()\n        .pipe(map((_routerState) => (_routerState?.panes || []) as RouterPanes)),\n    [routerStateSubject],\n  )\n  const {state: routerState} = useRouter()\n  useEffect(() => {\n    routerStateSubject.next(routerState)\n  }, [routerState, routerStateSubject])\n\n  return routerPanes$\n}\n\nexport function useResolvedPanes(): Panes {\n  // used to propagate errors from async effect. throwing inside of the render\n  // will bubble the error to react where it can be picked up by standard error\n  // boundaries\n  const [error, setError] = useState<unknown>()\n  if (error) throw error\n\n  const {structureContext, rootPaneNode} = useStructureTool()\n\n  const [data, setData] = useState<Panes>({\n    paneDataItems: [],\n    resolvedPanes: [],\n    routerPanes: [],\n  })\n\n  const routerPanesStream = useRouterPanesStream()\n\n  useEffect(() => {\n    const resolvedPanes$ = createResolvedPaneNodeStream({\n      rootPaneNode,\n      routerPanesStream,\n      structureContext,\n    }).pipe(\n      map((resolvedPanes) => {\n        const routerPanes = resolvedPanes.reduce<RouterPanes>((acc, next) => {\n          const currentGroup = acc[next.groupIndex] || []\n          currentGroup[next.siblingIndex] = next.routerPaneSibling\n          acc[next.groupIndex] = currentGroup\n          return acc\n        }, [])\n\n        const groupsLen = routerPanes.length\n\n        const paneDataItems = resolvedPanes.map((pane) => {\n          const {groupIndex, flatIndex, siblingIndex, routerPaneSibling, path} = pane\n          const itemId = routerPaneSibling.id\n          const nextGroup = routerPanes[groupIndex + 1] as RouterPaneGroup | undefined\n\n          const paneDataItem: PaneData = {\n            active: groupIndex === groupsLen - 2,\n            childItemId: nextGroup?.[0].id ?? null,\n            index: flatIndex,\n            itemId: routerPaneSibling.id,\n            groupIndex,\n            key: `${\n              pane.type === 'loading' ? 'unknown' : pane.paneNode.id\n            }-${itemId}-${siblingIndex}`,\n            pane: pane.type === 'loading' ? LOADING_PANE : pane.paneNode,\n            params: routerPaneSibling.params || {},\n            path: path.join(';'),\n            payload: routerPaneSibling.payload,\n            selected: flatIndex === resolvedPanes.length - 1,\n            siblingIndex,\n          }\n\n          return paneDataItem\n        })\n\n        return {\n          paneDataItems,\n          routerPanes,\n          resolvedPanes: paneDataItems.map((pane) => pane.pane),\n        }\n      }),\n    )\n\n    const subscription = resolvedPanes$.subscribe({\n      next: (result) => setData(result),\n      error: (e) => setError(e),\n    })\n\n    return () => subscription.unsubscribe()\n  }, [rootPaneNode, routerPanesStream, structureContext])\n\n  return data\n}\n","import {uuid} from '@sanity/uuid'\nimport {firstValueFrom, type Observable} from 'rxjs'\nimport {type DocumentStore, getPublishedId} from 'sanity'\n\nimport {PaneResolutionError} from '../../../structureResolvers'\n\nexport function removeDraftPrefix(documentId: string): string {\n  const publishedId = getPublishedId(documentId)\n\n  if (publishedId !== documentId) {\n    console.warn(\n      'Removed unexpected draft id in document link: All links to documents should have the ' +\n        '`drafts.`-prefix removed and something appears to have made an intent link to `%s`',\n      documentId,\n    )\n  }\n\n  return publishedId\n}\n\nexport async function ensureDocumentIdAndType(\n  documentStore: DocumentStore,\n  id: string | undefined,\n  type: string | undefined,\n): Promise<{id: string; type: string}> {\n  if (id && type) return {id, type}\n  if (!id && type) return {id: uuid(), type}\n  if (id && !type) {\n    const resolvedType = await firstValueFrom(\n      documentStore.resolveTypeForDocument(id) as Observable<string>,\n    )\n\n    return {id, type: resolvedType}\n  }\n\n  throw new PaneResolutionError({\n    message: 'Neither document `id` or `type` was provided when trying to resolve intent.',\n  })\n}\n","import {memo, useCallback, useEffect, useState} from 'react'\nimport {isRecord, useDocumentStore} from 'sanity'\nimport {useRouter, useRouterState} from 'sanity/router'\n\nimport {resolveIntent} from '../../../structureResolvers'\nimport {useStructureTool} from '../../../useStructureTool'\nimport {ensureDocumentIdAndType} from './utils'\n\nconst EMPTY_RECORD: Record<string, unknown> = {}\n\n/**\n * A component that receives an intent from props and redirects to the resolved\n * intent location (while showing a loading spinner during the process)\n */\nexport const IntentResolver = memo(function IntentResolver() {\n  const {navigate} = useRouter()\n  const maybeIntent = useRouterState(\n    useCallback((routerState) => {\n      const intentName = typeof routerState.intent === 'string' ? routerState.intent : undefined\n      return intentName\n        ? {\n            intent: intentName,\n            params: isRecord(routerState.params) ? routerState.params : EMPTY_RECORD,\n            payload: routerState.payload,\n          }\n        : undefined\n    }, []),\n  )\n  const {rootPaneNode, structureContext} = useStructureTool()\n  const documentStore = useDocumentStore()\n  const [error, setError] = useState<unknown>(null)\n\n  // this re-throws errors so that parent ErrorBoundary's can handle them properly\n  if (error) throw error\n\n  // eslint-disable-next-line consistent-return\n  useEffect(() => {\n    if (maybeIntent) {\n      const {intent, params, payload} = maybeIntent\n\n      let cancelled = false\n      async function effect() {\n        const {id, type} = await ensureDocumentIdAndType(\n          documentStore,\n          typeof params.id === 'string' ? params.id : undefined,\n          typeof params.type === 'string' ? params.type : undefined,\n        )\n\n        if (cancelled) return\n\n        const panes = await resolveIntent({\n          intent,\n          params: {...params, id, type},\n          payload,\n          rootPaneNode,\n          structureContext,\n        })\n\n        if (cancelled) return\n\n        navigate({panes}, {replace: true})\n      }\n\n      effect().catch(setError)\n\n      return () => {\n        cancelled = true\n      }\n    }\n  }, [documentStore, maybeIntent, navigate, rootPaneNode, structureContext])\n\n  return null\n})\n","import {generateHelpUrl} from '@sanity/generate-help-url'\nimport {SyncIcon} from '@sanity/icons'\nimport {Box, Card, Code, Container, Heading, Stack, Text} from '@sanity/ui'\nimport {useCallback} from 'react'\nimport {useTranslation} from 'sanity'\nimport {styled} from 'styled-components'\n\nimport {Button} from '../../../ui-components'\nimport {structureLocaleNamespace} from '../../i18n'\nimport {SerializeError} from '../../structureBuilder'\nimport {PaneResolutionError} from '../../structureResolvers'\n\nconst PathSegment = styled.span`\n  &:not(:last-child)::after {\n    content: ' ➝ ';\n    opacity: 0.5;\n  }\n`\n\nfunction formatStack(stack: string) {\n  return (\n    stack\n      // Prettify builder functions\n      .replace(/\\(\\.\\.\\.\\)\\./g, '(...)\\n  .')\n      // Remove webpack cruft from function names\n      .replace(/__WEBPACK_IMPORTED_MODULE_\\d+_+/g, '')\n      // Remove default export postfix from function names\n      .replace(/___default\\./g, '.')\n      // Replace full host path, leave only path to JS-file\n      .replace(new RegExp(` \\\\(https?:\\\\/\\\\/${window.location.host}`, 'g'), ' (')\n  )\n}\n\ninterface StructureErrorProps {\n  error: unknown\n}\n\nexport function StructureError({error}: StructureErrorProps) {\n  if (!(error instanceof PaneResolutionError)) {\n    throw error\n  }\n  const {cause} = error\n  const {t} = useTranslation(structureLocaleNamespace)\n\n  // Serialize errors are well-formatted and should be readable, in these cases a stack trace is\n  // usually not helpful. Build errors in dev (with HMR) usually also contains a bunch of garbage\n  // instead of an actual error message, so make sure we show the message in these cases as well\n  const stack = cause?.stack || error.stack\n  const showStack =\n    stack && !(cause instanceof SerializeError) && !error.message.includes('Module build failed:')\n\n  const path = cause instanceof SerializeError ? cause.path : []\n  const helpId = (cause instanceof SerializeError && cause.helpId) || error.helpId\n\n  const handleReload = useCallback(() => {\n    window.location.reload()\n  }, [])\n\n  return (\n    <Card height=\"fill\" overflow=\"auto\" padding={4} sizing=\"border\" tone=\"critical\">\n      <Container>\n        <Heading as=\"h2\">{t('structure-error.header.text')}</Heading>\n\n        <Card marginTop={4} padding={4} radius={2} overflow=\"auto\" shadow={1} tone=\"inherit\">\n          {path.length > 0 && (\n            <Stack space={2}>\n              <Text size={1} weight=\"medium\">\n                {t('structure-error.structure-path.label')}\n              </Text>\n              <Code>\n                {/* TODO: it seems like the path is off by one and includes */}\n                {/* `root` twice  */}\n                {path.slice(1).map((segment, i) => (\n                  <PathSegment key={`${segment}-${i}`}>{segment}</PathSegment>\n                ))}\n              </Code>\n            </Stack>\n          )}\n\n          <Stack marginTop={4} space={2}>\n            <Text size={1} weight=\"medium\">\n              {t('structure-error.error.label')}\n            </Text>\n            <Code>{showStack ? formatStack(stack) : error.message}</Code>\n          </Stack>\n\n          {helpId && (\n            <Box marginTop={4}>\n              <Text>\n                <a href={generateHelpUrl(helpId)} rel=\"noopener noreferrer\" target=\"_blank\">\n                  {t('structure-error.docs-link.text')}\n                </a>\n              </Text>\n            </Box>\n          )}\n\n          <Box marginTop={4}>\n            <Button\n              text={t('structure-error.reload-button.text')}\n              icon={SyncIcon}\n              tone=\"primary\"\n              onClick={handleReload}\n            />\n          </Box>\n        </Card>\n      </Container>\n    </Card>\n  )\n}\n","import {WarningOutlineIcon} from '@sanity/icons'\nimport {Box, Card, Container, Flex, Stack, Text} from '@sanity/ui'\nimport {useTranslation} from 'sanity'\n\nimport {structureLocaleNamespace} from '../../i18n'\n\nexport function NoDocumentTypesScreen() {\n  const {t} = useTranslation(structureLocaleNamespace)\n\n  return (\n    <Card height=\"fill\">\n      <Flex align=\"center\" height=\"fill\" justify=\"center\" padding={4} sizing=\"border\">\n        <Container width={0}>\n          <Card padding={4} radius={2} shadow={1} tone=\"caution\">\n            <Flex>\n              <Box>\n                <Text size={1}>\n                  <WarningOutlineIcon />\n                </Text>\n              </Box>\n              <Stack flex={1} marginLeft={3} space={3}>\n                <Text as=\"h1\" size={1} weight=\"medium\">\n                  {t('no-document-types-screen.title')}\n                </Text>\n                <Text as=\"p\" muted size={1}>\n                  {t('no-document-types-screen.subtitle')}\n                </Text>\n                <Text as=\"p\" muted size={1}>\n                  <a\n                    href=\"https://www.sanity.io/docs/create-a-schema-and-configure-sanity-studio\"\n                    target=\"_blank\"\n                    rel=\"noreferrer\"\n                  >\n                    {t('no-document-types-screen.link-text')}\n                  </a>\n                </Text>\n              </Stack>\n            </Flex>\n          </Card>\n        </Container>\n      </Flex>\n    </Card>\n  )\n}\n","import {type ObjectSchemaType} from '@sanity/types'\nimport {useEffect} from 'react'\nimport {\n  unstable_useValuePreview as useValuePreview,\n  useEditState,\n  usePerspective,\n  useSchema,\n  useTranslation,\n} from 'sanity'\n\nimport {LOADING_PANE} from '../../constants'\nimport {useDocumentLastRev} from '../../hooks/useDocumentLastRev'\nimport {structureLocaleNamespace} from '../../i18n'\nimport {type Panes} from '../../structureResolvers'\nimport {type DocumentPaneNode} from '../../types'\nimport {useStructureTool} from '../../useStructureTool'\n\ninterface StructureTitleProps {\n  resolvedPanes: Panes['resolvedPanes']\n}\n\n// TODO: Fix state jank when editing different versions inside panes.\nconst DocumentTitle = (props: {documentId: string; documentType: string}) => {\n  const {documentId, documentType} = props\n  const {selectedReleaseId} = usePerspective()\n\n  const editState = useEditState(documentId, documentType, 'default', selectedReleaseId)\n  const schema = useSchema()\n  const {t} = useTranslation(structureLocaleNamespace)\n  const isNewDocument = !editState?.published && !editState?.draft\n  const documentValue = editState?.version || editState?.draft || editState?.published\n  const schemaType = schema.get(documentType) as ObjectSchemaType | undefined\n\n  const {value, isLoading: previewValueIsLoading} = useValuePreview({\n    enabled: !!documentValue,\n    schemaType,\n    value: documentValue,\n  })\n\n  const {lastRevisionDocument} = useDocumentLastRev(documentId, documentType)\n  const isDeleted = lastRevisionDocument && !documentValue\n\n  // if the document is deleted, we don't want to show the title\n  const documentTitle = isDeleted\n    ? ''\n    : isNewDocument\n      ? t('browser-document-title.new-document', {\n          schemaType: schemaType?.title || schemaType?.name,\n        })\n      : value?.title || t('browser-document-title.untitled-document')\n\n  const settled = editState.ready && !previewValueIsLoading\n  const newTitle = useConstructDocumentTitle(documentTitle)\n  useEffect(() => {\n    if (!settled) return\n    // Set the title as the document title\n    document.title = newTitle\n  }, [documentTitle, settled, newTitle])\n\n  return null\n}\n\nconst PassthroughTitle = (props: {title?: string}) => {\n  const {title} = props\n  const newTitle = useConstructDocumentTitle(title)\n  useEffect(() => {\n    // Set the title as the document title\n    document.title = newTitle\n  }, [newTitle, title])\n  return null\n}\n\nexport const StructureTitle = (props: StructureTitleProps) => {\n  const {resolvedPanes} = props\n\n  if (!resolvedPanes?.length) return null\n\n  const lastPane = resolvedPanes[resolvedPanes.length - 1]\n\n  // If the last pane is loading, display the structure tool title only\n  if (isLoadingPane(lastPane)) {\n    return <PassthroughTitle />\n  }\n\n  // If the last pane is a document\n  if (isDocumentPane(lastPane)) {\n    // Passthrough the document pane's title, which may be defined in structure builder\n    if (lastPane?.title) {\n      return <PassthroughTitle title={lastPane.title} />\n    }\n\n    // Otherwise, display a `document.title` containing the resolved Sanity document title\n    return <DocumentTitle documentId={lastPane.options.id} documentType={lastPane.options.type} />\n  }\n\n  // Otherwise, display the last pane's title (if present)\n  return <PassthroughTitle title={lastPane?.title} />\n}\n\n/**\n * Construct a pipe delimited title containing `activeTitle` (if applicable) and the base structure title.\n *\n * @param activeTitle - Title of the first segment\n *\n * @returns A pipe delimited title in the format `${activeTitle} | %BASE_STRUCTURE_TITLE%`\n * or simply `%BASE_STRUCTURE_TITLE` if `activeTitle` is undefined.\n */\nfunction useConstructDocumentTitle(activeTitle?: string) {\n  const structureToolBaseTitle = useStructureTool().structureContext.title\n  return [activeTitle, structureToolBaseTitle].filter((title) => title).join(' | ')\n}\n\n// Type guards\nfunction isDocumentPane(pane: Panes['resolvedPanes'][number]): pane is DocumentPaneNode {\n  return pane !== LOADING_PANE && pane.type === 'document'\n}\n\nfunction isLoadingPane(pane: Panes['resolvedPanes'][number]): pane is typeof LOADING_PANE {\n  return pane === LOADING_PANE\n}\n","import {PortalProvider, useTheme, useToast} from '@sanity/ui'\nimport {isHotkey} from 'is-hotkey-esm'\nimport {Fragment, memo, useCallback, useEffect, useState} from 'react'\nimport {_isCustomDocumentTypeDefinition, useSchema} from 'sanity'\nimport {useRouterState} from 'sanity/router'\nimport {styled} from 'styled-components'\n\nimport {LOADING_PANE} from '../../constants'\nimport {LoadingPane, StructureToolPane} from '../../panes'\nimport {useResolvedPanes} from '../../structureResolvers'\nimport {type PaneNode} from '../../types'\nimport {useStructureTool} from '../../useStructureTool'\nimport {PaneLayout} from '../pane'\nimport {NoDocumentTypesScreen} from './NoDocumentTypesScreen'\nimport {StructureTitle} from './StructureTitle'\n\ninterface StructureToolProps {\n  onPaneChange: (panes: Array<PaneNode | typeof LOADING_PANE>) => void\n}\n\nconst StyledPaneLayout = styled(PaneLayout)`\n  min-height: 100%;\n  min-width: 320px;\n`\n\nconst isSaveHotkey = isHotkey('mod+s')\n\n/**\n * @internal\n */\nexport const StructureTool = memo(function StructureTool({onPaneChange}: StructureToolProps) {\n  const {push: pushToast} = useToast()\n  const schema = useSchema()\n  const {layoutCollapsed, setLayoutCollapsed} = useStructureTool()\n  const {paneDataItems, resolvedPanes} = useResolvedPanes()\n  // Intent resolving is processed by the sibling `<IntentResolver />` but it doesn't have a UI for indicating progress.\n  // We handle that here, so if there are only 1 pane (the root structure), and there's an intent state in the router, we need to show a placeholder LoadingPane until\n  // the structure is resolved and we know what panes to load/display\n  const isResolvingIntent = useRouterState(\n    useCallback((routerState) => typeof routerState.intent === 'string', []),\n  )\n  const {\n    sanity: {media},\n  } = useTheme()\n\n  const [portalElement, setPortalElement] = useState<HTMLDivElement | null>(null)\n\n  const handleRootCollapse = useCallback(() => setLayoutCollapsed(true), [setLayoutCollapsed])\n  const handleRootExpand = useCallback(() => setLayoutCollapsed(false), [setLayoutCollapsed])\n\n  useEffect(() => {\n    // we check for length before emitting here to skip the initial empty array\n    // state from the `useResolvedPanes` hook. there should always be a root\n    // pane emitted on subsequent emissions\n    if (resolvedPanes.length) {\n      onPaneChange(resolvedPanes)\n    }\n  }, [onPaneChange, resolvedPanes])\n\n  useEffect(() => {\n    const handleGlobalKeyDown = (event: KeyboardEvent) => {\n      // Prevent `Cmd+S`\n      if (isSaveHotkey(event)) {\n        event.preventDefault()\n\n        pushToast({\n          closable: true,\n          id: 'auto-save-message',\n          status: 'info',\n          title: 'Your work is automatically saved!',\n          duration: 4000,\n        })\n      }\n    }\n\n    window.addEventListener('keydown', handleGlobalKeyDown)\n    return () => window.removeEventListener('keydown', handleGlobalKeyDown)\n  }, [pushToast])\n\n  const hasDefinedDocumentTypes = schema._original?.types.some(_isCustomDocumentTypeDefinition)\n\n  if (!hasDefinedDocumentTypes) {\n    return <NoDocumentTypesScreen />\n  }\n\n  return (\n    <PortalProvider element={portalElement || null}>\n      <StyledPaneLayout\n        flex={1}\n        height={layoutCollapsed ? undefined : 'fill'}\n        minWidth={media[1]}\n        onCollapse={handleRootCollapse}\n        onExpand={handleRootExpand}\n      >\n        {paneDataItems.map(\n          ({\n            active,\n            childItemId,\n            groupIndex,\n            itemId,\n            key: paneKey,\n            pane,\n            index: paneIndex,\n            params: paneParams,\n            path,\n            payload,\n            siblingIndex,\n            selected,\n          }) => (\n            <Fragment key={`${pane === LOADING_PANE ? 'loading' : pane.type}-${paneIndex}`}>\n              {pane === LOADING_PANE ? (\n                <LoadingPane paneKey={paneKey} path={path} selected={selected} />\n              ) : (\n                <StructureToolPane\n                  active={active}\n                  groupIndex={groupIndex}\n                  index={paneIndex}\n                  pane={pane}\n                  childItemId={childItemId}\n                  itemId={itemId}\n                  paneKey={paneKey}\n                  params={paneParams}\n                  payload={payload}\n                  path={path}\n                  selected={selected}\n                  siblingIndex={siblingIndex}\n                />\n              )}\n            </Fragment>\n          ),\n        )}\n        {/* If there's just 1 pane (the root), or less, and we're resolving an intent then it's necessary to show */}\n        {/* a loading indicator as the intent resolving is async, could take a while and can also be interrupted/redirected */}\n        {paneDataItems.length <= 1 && isResolvingIntent && (\n          <LoadingPane paneKey=\"intent-resolver\" />\n        )}\n      </StyledPaneLayout>\n      <StructureTitle resolvedPanes={resolvedPanes} />\n      <div data-portal=\"\" ref={setPortalElement} />\n    </PortalProvider>\n  )\n})\n","import {useEffect, useState} from 'react'\nimport {SourceProvider, type Tool, useWorkspace} from 'sanity'\n\nimport {ErrorBoundary} from '../../../ui-components/errorBoundary'\nimport {setActivePanes} from '../../getIntentState'\nimport {StructureToolProvider} from '../../StructureToolProvider'\nimport {type StructureToolOptions} from '../../types'\nimport {IntentResolver} from './intentResolver'\nimport {StructureError} from './StructureError'\nimport {StructureTool} from './StructureTool'\n\ninterface StructureToolBoundaryProps {\n  tool: Tool<StructureToolOptions>\n}\n\nexport function StructureToolBoundary({tool: {options}}: StructureToolBoundaryProps) {\n  const {unstable_sources: sources} = useWorkspace()\n  const [firstSource] = sources\n  const {source, defaultDocumentNode, structure} = options || {}\n\n  // Set active panes to blank on mount and unmount\n  useEffect(() => {\n    setActivePanes([])\n    return () => setActivePanes([])\n  }, [])\n\n  const [{error}, setError] = useState<{error: unknown}>({error: null})\n\n  // this re-throws if the error it catches is not a PaneResolutionError\n  if (error) return <StructureError error={error} />\n\n  return (\n    <ErrorBoundary onCatch={setError}>\n      <SourceProvider name={source || firstSource.name}>\n        <StructureToolProvider defaultDocumentNode={defaultDocumentNode} structure={structure}>\n          <StructureTool onPaneChange={setActivePanes} />\n          <IntentResolver />\n        </StructureToolProvider>\n      </SourceProvider>\n    </ErrorBoundary>\n  )\n}\n"],"names":["PaneResolutionError","Error","constructor","message","context","helpId","cause","name","randomIdCache","WeakMap","assignId","obj","cachedValue","get","id","nanoid","set","isPromise","thing","then","isSerializable","isRecord","serialize","rethrowWithPaneResolutionErrors","next","unresolvedPane","flatIndex","e","wrapWithPublishReplay","args","pipe","publishReplay","refCount","createPaneResolver","middleware","resolvePane","isObservable","from","switchMap","result","observableOf","bindCache","memoBind","methodKey","boundMethods","Map","bound","method","bind","resolveIntent","options","resolvedPaneCache","nextFn","key","path","join","cachedResolvedPane","fallbackEditorPanes","params","omit","type","payload","traverse","currentId","intent","parent","levelIndex","structureContext","targetId","schemaTypeName","otherParams","resolvedPane","firstValueFrom","splitIndex","index","undefined","panes","slice","length","map","i","depthIndex","canHandleIntent","pane","filter","child","items","Promise","all","item","nextLevelIndex","resolve","_id","flat","closestPaneToRoot","rootPaneNode","sort","a","b","fallbackEditorChild","nodeId","replace","resolveDocumentNode","template","defaultDocumentBuilder","schemaType","documentId","initialValueTemplate","hashContext","JSON","stringify","parentId","serializeOptionsIndex","serializeOptions","serializeOptionsPath","hashResolvedPaneMeta","meta","normalized","routerPaneSibling","groupIndex","siblingIndex","paneNode","resolvePaneTree","flattenedRouterPanes","current","rest","resolvedPaneMeta","loadingPanes","restIndex","_","currentIndex","nextStream","startsWith","concat","nextResolvedPanes","console","warn","generateHelpUrl","createResolvedPaneNodeStream","routerPanesStream","initialCacheState","cacheKeysByFlatIndex","NEVER","rawRouterPanes","routerPanes","flatMap","routerPaneGroup","startWith","pairwise","prev","curr","prevValue","currValue","isEqual","diffIndex","scan","acc","beforeDiffIndex","afterDiffIndex","keysToKeep","Set","keySet","Array","keysToDelete","has","delete","cacheKeySet","add","nextPane","prevPane","distinctUntilChanged","nextValue","useRouterPanesStream","$","_c","routerStateSubject","useState","_temp","t0","asObservable","_temp2","routerPanes$","state","routerState","useRouter","t1","t2","useEffect","_routerState","ReplaySubject","useResolvedPanes","error","setError","useStructureTool","Symbol","for","paneDataItems","resolvedPanes","data","setData","subscription","_temp5","subscribe","unsubscribe","reduce","_temp3","groupsLen","itemId","nextGroup","active","childItemId","LOADING_PANE","selected","_temp4","pane_0","currentGroup","ensureDocumentIdAndType","documentStore","uuid","resolvedType","resolveTypeForDocument","EMPTY_RECORD","IntentResolver","memo","navigate","maybeIntent","useRouterState","useDocumentStore","cancelled","effect","catch","intentName","PathSegment","styled","span","formatStack","stack","RegExp","window","location","host","StructureError","t","useTranslation","structureLocaleNamespace","SerializeError","includes","showStack","T0","T1","T2","handleReload","t10","t11","t12","t13","t14","t3","t4","t5","t6","t7","t8","t9","Card","Container","t15","t16","t17","t18","t19","t20","t21","t22","SyncIcon","t23","t24","t25","segment","reload","NoDocumentTypesScreen","DocumentTitle","props","documentType","selectedReleaseId","usePerspective","editState","useEditState","schema","useSchema","isNewDocument","published","draft","documentValue","version","value","isLoading","previewValueIsLoading","useValuePreview","enabled","lastRevisionDocument","useDocumentLastRev","documentTitle","title","settled","ready","newTitle","useConstructDocumentTitle","document","PassthroughTitle","StructureTitle","lastPane","isLoadingPane","isDocumentPane","activeTitle","structureToolBaseTitle","StyledPaneLayout","PaneLayout","isSaveHotkey","isHotkey","StructureTool","onPaneChange","push","pushToast","useToast","layoutCollapsed","setLayoutCollapsed","isResolvingIntent","sanity","useTheme","media","portalElement","setPortalElement","handleRootCollapse","handleRootExpand","handleGlobalKeyDown","event","preventDefault","closable","status","duration","addEventListener","removeEventListener","_original","types","some","_isCustomDocumentTypeDefinition","paneKey","paneIndex","paneParams","StructureToolBoundary","tool","unstable_sources","sources","useWorkspace","firstSource","source","defaultDocumentNode","structure","setActivePanes"],"mappings":"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"}