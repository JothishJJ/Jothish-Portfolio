{"version":3,"file":"PostMessagePerspective.mjs","sources":["../../src/presentation/PostMessagePerspective.tsx"],"sourcesContent":["import {type ClientPerspective} from '@sanity/client'\nimport {type FC, memo, useEffect} from 'react'\n\nimport {type VisualEditingConnection} from './types'\n\nexport interface PostMessagePerspectiveProps {\n  comlink: VisualEditingConnection\n  perspective: ClientPerspective\n}\n\nconst PostMessagePerspective: FC<PostMessagePerspectiveProps> = (props) => {\n  const {comlink, perspective} = props\n\n  // Return the perspective when requested\n  useEffect(() => {\n    return comlink.on('visual-editing/fetch-perspective', () => ({\n      perspective,\n    }))\n  }, [comlink, perspective])\n\n  // Dispatch a perspective message when the perspective changes\n  useEffect(() => {\n    comlink.post('presentation/perspective', {perspective})\n  }, [comlink, perspective])\n\n  return null\n}\n\nexport default memo(PostMessagePerspective)\n"],"names":["PostMessagePerspective","props","$","_c","comlink","perspective","t0","t1","on","useEffect","t2","t3","post","memo"],"mappings":";;AAUA,MAAMA,yBAA0DC,CAAAA,UAAA;AAAA,QAAAC,IAAAC,EAAA,CAAA,GAC9D;AAAA,IAAAC;AAAAA,IAAAC;AAAAA,EAAAA,IAA+BJ;AAAK,MAAAK,IAAAC;AAAAL,IAAA,CAAA,MAAAE,WAAAF,SAAAG,eAG1BC,KAAAA,MACDF,QAAOI,GAAI,oCAAkC,OAAA;AAAA,IAAAH;AAAAA,EAAAA,EAElD,GACDE,KAAA,CAACH,SAASC,WAAW,GAACH,OAAAE,SAAAF,OAAAG,aAAAH,OAAAI,IAAAJ,OAAAK,OAAAD,KAAAJ,EAAA,CAAA,GAAAK,KAAAL,EAAA,CAAA,IAJzBO,UAAUH,IAIPC,EAAsB;AAAC,MAAAG,IAAAC;AAAA,SAAAT,EAAA,CAAA,MAAAE,WAAAF,SAAAG,eAGhBK,KAAAA,MAAA;AACRN,YAAOQ,KAAM,4BAA0B;AAAA,MAAAP;AAAAA,IAAAA,CAAe;AAAA,EAAC,GACtDM,KAAA,CAACP,SAASC,WAAW,GAACH,OAAAE,SAAAF,OAAAG,aAAAH,OAAAQ,IAAAR,OAAAS,OAAAD,KAAAR,EAAA,CAAA,GAAAS,KAAAT,EAAA,CAAA,IAFzBO,UAAUC,IAEPC,EAAsB,GAAC;AAAA;AAK5B,IAAA,2BAAeE,KAAKb,sBAAsB;"}