import { jsx, jsxs, Fragment } from "react/jsx-runtime";
import { c } from "react-compiler-runtime";
import { useSelector, useActorRef } from "@xstate/react";
import { presentationLocaleNamespace, usePresentationTool, PresentationSpinner, API_VERSION, MAX_TIME_TO_OVERLAYS_CONNECTION, usePresentationNavigate, POPUP_CHECK_INTERVAL, EDIT_INTENT_MODE, DEFAULT_TOOL_NAME } from "./presentation.mjs";
import { createController, createConnectionMachine } from "@sanity/comlink";
import { createCompatibilityActors } from "@sanity/presentation-comlink";
import { urlSearchParamPreviewPerspective, fetchSharedAccessQuery, urlSearchParamVercelProtectionBypass, urlSearchParamVercelSetBypassCookie, urlSearchParamPreviewSecret, urlSearchParamPreviewPathname, schemaTypeSingleton, schemaIdSingleton, schemaType } from "@sanity/preview-url-secret/constants";
import { Card, Text, Stack, Inline, Box, Flex, Container as Container$1, Code, Label, TextInput, Spinner, useToast, Menu, Grid, Switch, MenuDivider, Hotkeys, usePrefersReducedMotion, BoundaryElementProvider } from "@sanity/ui";
import { memo, useEffect, useRef, useContext, useLayoutEffect, useState, forwardRef, Suspense, useId as useId$1, useImperativeHandle, lazy, useMemo, useCallback, useSyncExternalStore, useReducer } from "react";
import { useTranslation, pathToString, useUnique, getPublishedId, useDocumentPreviewStore, usePerspective, getPreviewStateObservable, useSchema, getPreviewValueWithFallback, SanityDefaultPreview, PreviewCard, Translate, CommentsIntentProvider, useActiveWorkspace, useClient, useCurrentUser, useProjectId, useDataset, useWorkspace, COMMENTS_INSPECTOR_NAME, useGrantsStore } from "sanity";
import { StateLink, useRouter, decodeJsonParams } from "sanity/router";
import { styled, createGlobalStyle } from "styled-components";
import { useEffectEvent } from "use-effect-event";
import { setup, assign, fromPromise, fromObservable, log } from "xstate";
import { PresentationSharedStateContext, PresentationPanelsContext, PresentationNavigateContext, PresentationParamsContext, PresentationContext } from "sanity/_singletons";
import { WarningOutlineIcon, LaunchIcon, ResetIcon, CopyIcon, ShareIcon, PanelLeftIcon, MobileDeviceIcon, DesktopIcon, RefreshIcon } from "@sanity/icons";
import { PaneRouterContext, PaneLayout, StructureToolProvider, DocumentListPane as DocumentListPane$1, DocumentPane as DocumentPane$1 } from "sanity/structure";
import { Button, ErrorBoundary, Tooltip, MenuButton, MenuItem, TooltipDelayGroupProvider } from "./generate-help-url.esm.mjs";
import "../_singletons.mjs";
import { toString } from "@sanity/util/paths";
import { StructureToolProvider as StructureToolProvider$1 } from "./StructureToolProvider.mjs";
import { studioPath } from "@sanity/client/csm";
import { DisplayedDocumentBroadcasterProvider } from "./DisplayedDocumentBroadcaster.mjs";
import { v4 } from "uuid";
import { motion, AnimatePresence, MotionConfig } from "framer-motion";
import { flushSync } from "react-dom";
import { setSecretSearchParams, withoutSecretSearchParams } from "@sanity/preview-url-secret/without-secret-search-params";
import { SanityMonogram } from "@sanity/logos";
import { disablePreviewAccessSharing, enablePreviewAccessSharing } from "@sanity/preview-url-secret/toggle-preview-access-sharing";
import { validateApiPerspective } from "@sanity/client";
import isEqual from "fast-deep-equal";
import { match } from "path-to-regexp";
import { createPreviewSecret } from "@sanity/preview-url-secret/create-secret";
import { uuid } from "@sanity/uuid";
import { throwError } from "rxjs";
import { subcribeToVercelProtectionBypass } from "@sanity/preview-url-secret/toggle-vercel-protection-bypass";
const PostMessageFeatures = (props) => {
  const $ = c(3), {
    comlink
  } = props;
  let t0, t1;
  return $[0] !== comlink ? (t0 = () => comlink.on("visual-editing/features", _temp$f), t1 = [comlink], $[0] = comlink, $[1] = t0, $[2] = t1) : (t0 = $[1], t1 = $[2]), useEffect(t0, t1), null;
};
var PostMessageFeatures$1 = memo(PostMessageFeatures);
function _temp$f() {
  return {
    features: {
      optimistic: !0
    }
  };
}
const presentationMachine = setup({
  types: {},
  actions: {
    //
  },
  actors: {
    //
  },
  guards: {
    //
  }
}).createMachine({
  // eslint-disable-next-line tsdoc/syntax
  /** @xstate-layout N4IgpgJg5mDOIC5QAUBOcwDsAuBDbAlgPaYAEAKkUQDYDEBAZqrgLZinrVG4QDaADAF1EoAA5FYBQiREgAHogAsAJgA0IAJ6IAHAEYAdIoCcJowFY9R-vzPLlAX3vq0GHPmJlKNfVx4FMUPRMrOy+EJACwkgg4pLSmLIKCLoAbIr6Zoop2tqKAMxpJnnF6loIZkbK+uZ5umapKXmK-Cm6js7osFh48RRU1D7c4RC02ERQUNTsAG4EsACuuNSkkFL+UKRE02Co1LgasJGysWsy0UnaZinVyrpGAOx1Rim2efeliPe3hma1Zvy6XT8W4OJwgFxdNy9LwDMKQILMNgcMBMOAACyO0RO8USiAK930LWU-3uiiB9yaKXemkQjW01V+txS-GKqUe7XBnW67hIfW8cJGjER7E4Q0xYgkpwS5zxVMJKWJ-FJ5Mp1LKFn4Pz+DSaLTaYIh3Oh-UGPEg+nQqNgaPWCJCpAF4pikpxMoQKWZ+gp+TSZLy1hSH3deXpNSZLNqVP1HVcPQ8fNhQ3Nor8ATtSMdQmOLo8uPdnu9BUUfoDQY1WrqOuarUcYMwRHC8Gihqh8Zh2biubdAFpAzSEL2OS247yYfodqgiKgO1K8yog7ptATFL9dFljMDrHkh1zW6OTWF1jPXaAkmY1YgKnktfxtC9dPd+Io9DvYzzPAekxBj13T3i7vKirKkqqpBsYVQ1HUFjFs0t6KK+kIjh+-JfvoBAQFMP5nH+CDaMo16KjYyjMvUNh5GWOT6MoLL8A8ygrk0dQIUabafmaEAWiinQ2gEWHSjhjJUYuj73Pcd63noQaNEYFb-Dk2S0cxe7IYm7GcYevFYjm2HyJeeQQb8tFkikVjGNoFGajUt73o+z61vYQA */
  id: "Presentation Tool",
  context: {
    url: null,
    error: null,
    visualEditingOverlaysEnabled: !1
  },
  on: {
    "iframe reload": {
      actions: assign({
        url: null
      }),
      target: ".loading"
    }
  },
  states: {
    error: {
      description: "Failed to load, either because of a misconfiguration, a network error, or an unexpected error",
      tags: ["error"]
    },
    loading: {
      on: {
        "iframe loaded": {
          target: "loaded"
        }
      },
      tags: ["busy"]
    },
    loaded: {
      on: {
        "toggle visual editing overlays": {
          actions: assign({
            visualEditingOverlaysEnabled: ({
              event
            }) => event.enabled
          })
        },
        "iframe refresh": {
          target: ".refreshing"
        },
        "iframe reload": {
          target: ".reloading"
        }
      },
      states: {
        idle: {},
        refreshing: {
          on: {
            "iframe loaded": {
              target: "idle"
            }
          },
          tags: ["busy"]
        },
        reloading: {
          on: {
            "iframe loaded": {
              target: "idle"
            }
          },
          tags: ["busy"]
        }
      },
      initial: "idle"
    }
  },
  initial: "loading"
}), SharedStateProvider = function(props) {
  const $ = c(14), {
    comlink,
    children
  } = props;
  let t0;
  $[0] === Symbol.for("react.memo_cache_sentinel") ? (t0 = {}, $[0] = t0) : t0 = $[0];
  const sharedState = useRef(t0);
  let t1, t2;
  $[1] !== comlink ? (t1 = () => comlink?.on("visual-editing/shared-state", () => ({
    state: sharedState.current
  })), t2 = [comlink], $[1] = comlink, $[2] = t1, $[3] = t2) : (t1 = $[2], t2 = $[3]), useEffect(t1, t2);
  let t3;
  $[4] !== comlink ? (t3 = (key, value) => {
    sharedState.current[key] = value, comlink?.post("presentation/shared-state", {
      key,
      value
    });
  }, $[4] = comlink, $[5] = t3) : t3 = $[5];
  const setValue = t3;
  let t4;
  $[6] !== comlink ? (t4 = (key_0) => {
    comlink?.post("presentation/shared-state", {
      key: key_0
    }), delete sharedState.current[key_0];
  }, $[6] = comlink, $[7] = t4) : t4 = $[7];
  const removeValue = t4;
  let t5;
  $[8] !== removeValue || $[9] !== setValue ? (t5 = {
    removeValue,
    setValue
  }, $[8] = removeValue, $[9] = setValue, $[10] = t5) : t5 = $[10];
  const context = t5;
  let t6;
  return $[11] !== children || $[12] !== context ? (t6 = /* @__PURE__ */ jsx(PresentationSharedStateContext.Provider, { value: context, children }), $[11] = children, $[12] = context, $[13] = t6) : t6 = $[13], t6;
}, Root$1 = styled.div`
  overflow: hidden;
  flex-basis: 0;
  flex-shrink: 1;
`, Panel = function(t0) {
  const $ = c(15), {
    children,
    defaultSize: t1,
    id,
    minWidth,
    maxWidth,
    order: t2
  } = t0, defaultSize = t1 === void 0 ? null : t1, order = t2 === void 0 ? 0 : t2, context = useContext(PresentationPanelsContext);
  if (context === null)
    throw Error("Panel components must be rendered within a PanelGroup container");
  const {
    getPanelStyle,
    registerElement,
    unregisterElement
  } = context;
  let t3;
  $[0] !== getPanelStyle || $[1] !== id ? (t3 = getPanelStyle(id), $[0] = getPanelStyle, $[1] = id, $[2] = t3) : t3 = $[2];
  const style = t3;
  let t4, t5;
  $[3] !== defaultSize || $[4] !== id || $[5] !== maxWidth || $[6] !== minWidth || $[7] !== order || $[8] !== registerElement || $[9] !== unregisterElement ? (t4 = () => (registerElement(id, {
    id,
    type: "panel",
    defaultSize,
    maxWidth: maxWidth ?? null,
    minWidth: minWidth ?? 0,
    order
  }), () => {
    unregisterElement(id);
  }), t5 = [id, defaultSize, order, maxWidth, minWidth, registerElement, unregisterElement], $[3] = defaultSize, $[4] = id, $[5] = maxWidth, $[6] = minWidth, $[7] = order, $[8] = registerElement, $[9] = unregisterElement, $[10] = t4, $[11] = t5) : (t4 = $[10], t5 = $[11]), useLayoutEffect(t4, t5);
  let t6;
  return $[12] !== children || $[13] !== style ? (t6 = /* @__PURE__ */ jsx(Root$1, { style, children }), $[12] = children, $[13] = style, $[14] = t6) : t6 = $[14], t6;
};
function debounce(fn, timeout) {
  let timer;
  return (...args) => {
    clearTimeout(timer), timer = setTimeout(() => {
      fn.apply(fn, args);
    }, timeout);
  };
}
const itemKey = "presentation/panels", getStoredItem = () => JSON.parse(localStorage.getItem(itemKey) || "{}"), setStoredItem = (data) => {
  localStorage.setItem(itemKey, JSON.stringify(data));
}, getKeyForPanels = (panels) => panels.map((panel) => [panel.id, panel.order].join(":")).join(",");
function usePanelsStorage() {
  const $ = c(1), get = _temp2$8, set = _temp3$4;
  let t0;
  if ($[0] === Symbol.for("react.memo_cache_sentinel")) {
    const setDebounced = debounce(set, 100);
    t0 = {
      get,
      set,
      setDebounced
    }, $[0] = t0;
  } else
    t0 = $[0];
  return t0;
}
function _temp3$4(panels_0, widths) {
  const stored_0 = getStoredItem(), key_0 = getKeyForPanels(panels_0), data = {
    ...stored_0,
    [key_0]: widths
  };
  setStoredItem(data);
}
function _temp2$8(panels) {
  const stored = getStoredItem(), key = getKeyForPanels(panels);
  return Array.isArray(stored[key]) && stored[key].some(_temp$e) ? void 0 : stored[key];
}
function _temp$e(val) {
  return val === null;
}
function getNextWidth(panel, nextWidth, containerWidth) {
  const {
    maxWidth: maxWidthPx,
    minWidth: minWidthPx
  } = panel, maxWidth = maxWidthPx == null ? 100 : maxWidthPx / containerWidth * 100, minWidth = minWidthPx / containerWidth * 100;
  return Math.min(maxWidth, Math.max(minWidth, nextWidth));
}
function getNextWidths(delta, containerWidth, panelBefore, panelAfter, panelsState, initialDragState) {
  const {
    panels,
    widths: prevWidths
  } = panelsState, {
    widths: initialWidths
  } = initialDragState, widths = initialWidths || prevWidths, nextWidths = [...widths];
  {
    const pivotPanel2 = delta < 0 ? panelAfter : panelBefore, index2 = panels.findIndex((panel) => panel.id === pivotPanel2.id), width = widths[index2], nextWidth = getNextWidth(pivotPanel2, width + Math.abs(delta), containerWidth);
    if (width === nextWidth)
      return widths;
    delta = delta < 0 ? width - nextWidth : nextWidth - width;
  }
  let deltaApplied = 0, pivotPanel = delta < 0 ? panelBefore : panelAfter, index = panels.findIndex((panel) => panel.id === pivotPanel.id);
  for (; ; ) {
    const panel = panels[index], width = widths[index], deltaRemaining = Math.abs(delta) - Math.abs(deltaApplied), nextWidth = getNextWidth(panel, width - deltaRemaining, containerWidth);
    if (width !== nextWidth && (deltaApplied += width - nextWidth, nextWidths[index] = nextWidth, deltaApplied.toPrecision(10).localeCompare(Math.abs(delta).toPrecision(10), void 0, {
      numeric: !0
    }) >= 0))
      break;
    if (delta < 0) {
      if (--index < 0)
        break;
    } else if (++index >= panels.length)
      break;
  }
  return deltaApplied === 0 ? widths : (pivotPanel = delta < 0 ? panelAfter : panelBefore, index = panels.findIndex((panel) => panel.id === pivotPanel.id), nextWidths[index] = widths[index] + deltaApplied, nextWidths);
}
function getPanelWidth(panels, id, widths) {
  if (panels.length === 1) return "100";
  const index = panels.findIndex((panel) => panel.id === id), width = widths[index];
  return width == null ? "0" : width.toPrecision(10);
}
function getOffset(event, handleElement, initialOffset = 0, initialHandleElementRect = null) {
  const pointerOffset = event.clientX, elementOffset = (initialHandleElementRect || handleElement.getBoundingClientRect()).left;
  return pointerOffset - elementOffset - initialOffset;
}
function isPanel(element) {
  return element.type === "panel";
}
function isResizer(element) {
  return element.type === "resizer";
}
function getSortedElements(elements) {
  return Array.from(elements.values()).sort(({
    order: a
  }, {
    order: b
  }) => a == null && b == null ? 0 : a == null ? -1 : b == null ? 1 : a - b);
}
function validateWidths(panels, widthsToValidate, containerWidth) {
  const total = widthsToValidate.reduce((total2, width) => total2 + width, 0), widths = [...widthsToValidate].map((width) => width / total * 100);
  let remainingWidth = 0;
  for (let index = 0; index < panels.length; index++) {
    const panel = panels[index], width = widths[index], nextWidth = getNextWidth(panel, width, containerWidth);
    width != nextWidth && (remainingWidth += width - nextWidth, widths[index] = nextWidth);
  }
  if (remainingWidth.toFixed(3) !== "0.000")
    for (let index = 0; index < panels.length; index++) {
      const panel = panels[index];
      let {
        maxWidth,
        minWidth
      } = panel;
      minWidth = minWidth / containerWidth * 100, maxWidth != null && (maxWidth = maxWidth / containerWidth * 100);
      const width = Math.min(
        // eslint-disable-next-line no-negated-condition
        maxWidth ?? 100,
        Math.max(minWidth, widths[index] + remainingWidth)
      );
      if (width !== widths[index] && (remainingWidth -= width - widths[index], widths[index] = width, Math.abs(remainingWidth).toFixed(3) === "0.000"))
        break;
    }
  return widths;
}
function getDefaultWidths(panels) {
  let panelsWithoutWidth = panels.length, remainingWidthTotal = 100;
  const widthsWithNulls = panels.map((panel) => panel.defaultSize ? (remainingWidthTotal -= panel.defaultSize, panelsWithoutWidth -= 1, panel.defaultSize) : null), defaultWidth = remainingWidthTotal / panelsWithoutWidth;
  return widthsWithNulls.map((width) => width === null ? defaultWidth : width);
}
const PanelsWrapper = styled.div`
  display: flex;
  flex-direction: row;
  height: 100%;
  overflow: hidden;
  width: 100%;
`, Panels = function(t0) {
  const $ = c(46), {
    children
  } = t0, panelsEl = useRef(null);
  let t1;
  $[0] === Symbol.for("react.memo_cache_sentinel") ? (t1 = /* @__PURE__ */ new Map(), $[0] = t1) : t1 = $[0];
  const [elements, setElements] = useState(t1);
  let t2;
  $[1] !== elements ? (t2 = getSortedElements(elements).filter(isPanel), $[1] = elements, $[2] = t2) : t2 = $[2];
  const panels = t2;
  let t3;
  $[3] === Symbol.for("react.memo_cache_sentinel") ? (t3 = [], $[3] = t3) : t3 = $[3];
  const [widths, setWidths] = useState(t3), [activeResizer, setActiveResizer] = useState(null);
  let t4;
  $[4] !== elements || $[5] !== panels || $[6] !== widths ? (t4 = {
    elements,
    panels,
    widths
  }, $[4] = elements, $[5] = panels, $[6] = widths, $[7] = t4) : t4 = $[7];
  const panelsRef = useRef(t4);
  let t5;
  $[8] !== activeResizer || $[9] !== panels || $[10] !== widths ? (t5 = (id) => ({
    flexGrow: getPanelWidth(panels, id, widths),
    pointerEvents: activeResizer === null ? void 0 : "none"
  }), $[8] = activeResizer, $[9] = panels, $[10] = widths, $[11] = t5) : t5 = $[11];
  const getPanelStyle = t5;
  let t6;
  $[12] === Symbol.for("react.memo_cache_sentinel") ? (t6 = (id_0, data) => {
    setElements((prev) => {
      if (prev.has(id_0))
        return prev;
      const next = new Map(prev);
      return next.set(id_0, data), next;
    });
  }, $[12] = t6) : t6 = $[12];
  const registerElement = t6;
  let t7;
  $[13] === Symbol.for("react.memo_cache_sentinel") ? (t7 = (id_1) => {
    setElements((prev_0) => {
      if (!prev_0.has(id_1))
        return prev_0;
      const next_0 = new Map(prev_0);
      return next_0.delete(id_1), next_0;
    });
  }, $[13] = t7) : t7 = $[13];
  const unregisterElement = t7;
  let t8;
  $[14] === Symbol.for("react.memo_cache_sentinel") ? (t8 = {
    containerWidth: window.innerWidth,
    dragOffset: 0,
    panelAfter: null,
    panelBefore: null,
    resizerIndex: -1,
    resizerRect: null,
    startX: 0,
    widths: []
  }, $[14] = t8) : t8 = $[14];
  const dragRef = useRef(t8);
  let t9;
  $[15] !== elements ? (t9 = (id_2, event) => {
    const elementsArr = getSortedElements(elements), index = elementsArr.findIndex((el) => el.id === id_2), resizer = elements.get(id_2);
    if (!resizer || !isResizer(resizer))
      return;
    const resizeElement = resizer.el.current;
    resizeElement && (dragRef.current = {
      resizerIndex: index,
      panelBefore: elementsArr.reduce((acc, el_0, i) => isPanel(el_0) && i < index ? el_0 : acc, null),
      panelAfter: elementsArr.reduce((acc_0, el_1, i_0) => acc_0 === null && isPanel(el_1) && i_0 > index ? el_1 : acc_0, null),
      containerWidth: window.innerWidth,
      startX: event.pageX,
      dragOffset: getOffset(event, resizeElement),
      resizerRect: resizeElement.getBoundingClientRect(),
      widths: panelsRef.current.widths
    }, setActiveResizer(id_2));
  }, $[15] = elements, $[16] = t9) : t9 = $[16];
  const startDragging = t9;
  let t10;
  $[17] === Symbol.for("react.memo_cache_sentinel") ? (t10 = () => {
    setActiveResizer(null);
  }, $[17] = t10) : t10 = $[17];
  const stopDragging = t10;
  let t11;
  $[18] !== elements ? (t11 = (id_3, event_0) => {
    event_0.preventDefault(), event_0.stopPropagation();
    const {
      containerWidth,
      dragOffset,
      panelBefore,
      panelAfter,
      resizerRect
    } = dragRef.current;
    if (panelBefore == null || panelAfter == null)
      return;
    const resizer_0 = elements.get(id_3);
    if (!resizer_0 || !isResizer(resizer_0))
      return;
    const resizeElement_0 = resizer_0.el.current;
    if (!resizeElement_0)
      return;
    const offset = getOffset(event_0, resizeElement_0, dragOffset, resizerRect);
    if (offset === 0)
      return;
    const {
      widths: prevWidths
    } = panelsRef.current, rect = panelsEl.current.getBoundingClientRect(), delta = offset / rect.width * 100, nextWidths = getNextWidths(delta, containerWidth, panelBefore, panelAfter, panelsRef.current, dragRef.current);
    prevWidths.some((prevWidth, i_1) => prevWidth !== nextWidths[i_1]) && setWidths(nextWidths);
  }, $[18] = elements, $[19] = t11) : t11 = $[19];
  const drag = t11;
  let t12, t13;
  $[20] !== elements || $[21] !== panels || $[22] !== widths ? (t12 = () => {
    panelsRef.current.elements = elements, panelsRef.current.panels = panels, panelsRef.current.widths = widths;
  }, t13 = [elements, panels, widths], $[20] = elements, $[21] = panels, $[22] = widths, $[23] = t12, $[24] = t13) : (t12 = $[23], t13 = $[24]), useLayoutEffect(t12, t13);
  const storage = usePanelsStorage();
  let t14, t15;
  $[25] !== panels || $[26] !== storage ? (t14 = () => {
    const {
      widths: widths_0
    } = panelsRef.current;
    if (widths_0.length === panels.length)
      return;
    const storedWidths = storage.get(panels);
    if (storedWidths) {
      const validatedStoredWidths = validateWidths(panels, storedWidths, window.innerWidth);
      setWidths(validatedStoredWidths);
      return;
    }
    const defaultWidths = getDefaultWidths(panels);
    setWidths(defaultWidths);
  }, t15 = [storage, panels], $[25] = panels, $[26] = storage, $[27] = t14, $[28] = t15) : (t14 = $[27], t15 = $[28]), useLayoutEffect(t14, t15);
  let t16, t17;
  $[29] !== panels || $[30] !== storage || $[31] !== widths ? (t16 = () => {
    widths.length && storage.setDebounced(panels, widths);
  }, t17 = [storage, panels, widths], $[29] = panels, $[30] = storage, $[31] = widths, $[32] = t16, $[33] = t17) : (t16 = $[32], t17 = $[33]), useEffect(t16, t17);
  let t18, t19;
  $[34] === Symbol.for("react.memo_cache_sentinel") ? (t18 = () => {
    const resizeObserver = new ResizeObserver(() => {
      const {
        panels: panels_0,
        widths: prevWidths_0
      } = panelsRef.current, nextWidths_0 = validateWidths(panels_0, prevWidths_0, window.innerWidth);
      prevWidths_0.some((prevWidth_0, i_2) => prevWidth_0 !== nextWidths_0[i_2]) && setWidths(nextWidths_0);
    });
    return resizeObserver.observe(panelsEl.current), () => {
      resizeObserver.disconnect();
    };
  }, t19 = [], $[34] = t18, $[35] = t19) : (t18 = $[34], t19 = $[35]), useLayoutEffect(t18, t19);
  let t20;
  $[36] !== activeResizer || $[37] !== drag || $[38] !== getPanelStyle || $[39] !== startDragging ? (t20 = {
    activeResizer,
    drag,
    getPanelStyle,
    registerElement,
    startDragging,
    stopDragging,
    unregisterElement
  }, $[36] = activeResizer, $[37] = drag, $[38] = getPanelStyle, $[39] = startDragging, $[40] = t20) : t20 = $[40];
  const context = t20;
  let t21;
  $[41] !== children ? (t21 = /* @__PURE__ */ jsx(PanelsWrapper, { ref: panelsEl, children }), $[41] = children, $[42] = t21) : t21 = $[42];
  let t22;
  return $[43] !== context || $[44] !== t21 ? (t22 = /* @__PURE__ */ jsx(PresentationPanelsContext.Provider, { value: context, children: t21 }), $[43] = context, $[44] = t21, $[45] = t22) : t22 = $[45], t22;
};
function ErrorCard(props) {
  const $ = c(37);
  let children, message, onContinueAnyway, onRetry, restProps;
  $[0] !== props ? ({
    children,
    message,
    onRetry,
    onContinueAnyway,
    ...restProps
  } = props, $[0] = props, $[1] = children, $[2] = message, $[3] = onContinueAnyway, $[4] = onRetry, $[5] = restProps) : (children = $[1], message = $[2], onContinueAnyway = $[3], onRetry = $[4], restProps = $[5]);
  const {
    t
  } = useTranslation(presentationLocaleNamespace);
  let t0;
  $[6] !== t ? (t0 = t("error-card.retry-button.text"), $[6] = t, $[7] = t0) : t0 = $[7];
  let t1;
  $[8] !== onRetry || $[9] !== t0 ? (t1 = /* @__PURE__ */ jsx(Button, { mode: "ghost", onClick: onRetry, text: t0 }), $[8] = onRetry, $[9] = t0, $[10] = t1) : t1 = $[10];
  const retryButton = t1;
  let t2;
  $[11] !== t ? (t2 = t("error-card.continue-button.text"), $[11] = t, $[12] = t2) : t2 = $[12];
  let t3;
  $[13] !== onContinueAnyway || $[14] !== t2 ? (t3 = /* @__PURE__ */ jsx(Button, { mode: "ghost", tone: "critical", onClick: onContinueAnyway, text: t2 }), $[13] = onContinueAnyway, $[14] = t2, $[15] = t3) : t3 = $[15];
  const continueAnywayButton = t3;
  let t4;
  $[16] !== t ? (t4 = t("error-card.title"), $[16] = t, $[17] = t4) : t4 = $[17];
  let t5;
  $[18] !== t4 ? (t5 = /* @__PURE__ */ jsx(Text, { size: 1, weight: "semibold", children: t4 }), $[18] = t4, $[19] = t5) : t5 = $[19];
  let t6;
  $[20] !== message ? (t6 = /* @__PURE__ */ jsx(Text, { muted: !0, size: 1, children: message }), $[20] = message, $[21] = t6) : t6 = $[21];
  let t7;
  $[22] !== t5 || $[23] !== t6 ? (t7 = /* @__PURE__ */ jsxs(Stack, { space: 3, children: [
    t5,
    t6
  ] }), $[22] = t5, $[23] = t6, $[24] = t7) : t7 = $[24];
  let t8;
  $[25] !== continueAnywayButton || $[26] !== onContinueAnyway || $[27] !== onRetry || $[28] !== retryButton ? (t8 = onRetry && onContinueAnyway ? /* @__PURE__ */ jsxs(Inline, { space: 2, children: [
    retryButton,
    continueAnywayButton
  ] }) : onRetry ? /* @__PURE__ */ jsx(Box, { children: retryButton }) : onContinueAnyway ? /* @__PURE__ */ jsx(Box, { children: continueAnywayButton }) : null, $[25] = continueAnywayButton, $[26] = onContinueAnyway, $[27] = onRetry, $[28] = retryButton, $[29] = t8) : t8 = $[29];
  let t9;
  $[30] !== children || $[31] !== t7 || $[32] !== t8 ? (t9 = /* @__PURE__ */ jsx(Flex, { align: "center", height: "fill", justify: "center", children: /* @__PURE__ */ jsx(Container$1, { padding: 4, sizing: "border", width: 0, children: /* @__PURE__ */ jsxs(Stack, { space: 4, children: [
    t7,
    children,
    t8
  ] }) }) }), $[30] = children, $[31] = t7, $[32] = t8, $[33] = t9) : t9 = $[33];
  let t10;
  return $[34] !== restProps || $[35] !== t9 ? (t10 = /* @__PURE__ */ jsx(Card, { height: "fill", ...restProps, children: t9 }), $[34] = restProps, $[35] = t9, $[36] = t10) : t10 = $[36], t10;
}
const ChildLink = forwardRef(function(props, ref) {
  const $ = c(17);
  let childId, childParameters, childType, rest, searchParams;
  if ($[0] !== props) {
    const {
      childId: t02,
      childType: t12,
      childPayload,
      childParameters: t22,
      searchParams: t3,
      ...t4
    } = props;
    childId = t02, childType = t12, childParameters = t22, searchParams = t3, rest = t4, $[0] = props, $[1] = childId, $[2] = childParameters, $[3] = childType, $[4] = rest, $[5] = searchParams;
  } else
    childId = $[1], childParameters = $[2], childType = $[3], rest = $[4], searchParams = $[5];
  let t0;
  $[6] !== childParameters || $[7] !== searchParams ? (t0 = Object.entries({
    ...searchParams,
    ...childParameters
  }), $[6] = childParameters, $[7] = searchParams, $[8] = t0) : t0 = $[8];
  let t1;
  $[9] !== childId || $[10] !== childType || $[11] !== t0 ? (t1 = {
    id: childId,
    type: childType,
    _searchParams: t0
  }, $[9] = childId, $[10] = childType, $[11] = t0, $[12] = t1) : t1 = $[12];
  let t2;
  return $[13] !== ref || $[14] !== rest || $[15] !== t1 ? (t2 = /* @__PURE__ */ jsx(StateLink, { ...rest, ref, state: t1 }), $[13] = ref, $[14] = rest, $[15] = t1, $[16] = t2) : t2 = $[16], t2;
}), ReferenceChildLink = forwardRef(function(props, ref) {
  const $ = c(22);
  let documentId, documentType, parentRefPath, rest, searchParams, template;
  $[0] !== props ? ({
    documentId,
    documentType,
    parentRefPath,
    template,
    searchParams,
    ...rest
  } = props, $[0] = props, $[1] = documentId, $[2] = documentType, $[3] = parentRefPath, $[4] = rest, $[5] = searchParams, $[6] = template) : (documentId = $[1], documentType = $[2], parentRefPath = $[3], rest = $[4], searchParams = $[5], template = $[6]);
  const t0 = template?.params;
  let t1;
  $[7] !== parentRefPath ? (t1 = pathToString(parentRefPath), $[7] = parentRefPath, $[8] = t1) : t1 = $[8];
  let t2;
  $[9] !== template ? (t2 = template && {
    template: template?.id
  }, $[9] = template, $[10] = t2) : t2 = $[10];
  let t3;
  $[11] !== t1 || $[12] !== t2 ? (t3 = {
    parentRefPath: t1,
    ...t2
  }, $[11] = t1, $[12] = t2, $[13] = t3) : t3 = $[13];
  let t4;
  return $[14] !== documentId || $[15] !== documentType || $[16] !== ref || $[17] !== rest || $[18] !== searchParams || $[19] !== t0 || $[20] !== t3 ? (t4 = /* @__PURE__ */ jsx(ChildLink, { ...rest, ref, childId: documentId, childType: documentType, childPayload: t0, childParameters: t3, searchParams }), $[14] = documentId, $[15] = documentType, $[16] = ref, $[17] = rest, $[18] = searchParams, $[19] = t0, $[20] = t3, $[21] = t4) : t4 = $[21], t4;
});
function encodeQueryString(params = {}) {
  const parts = Object.entries(params).map(([key, value]) => `${key}=${value}`).join("&");
  return parts.length ? `?${parts}` : "";
}
function resolveQueryStringFromParams(nextParams) {
  const allowed = ["comment", "inspect", "instruction", "pathKey", "rev", "since", "template", "view"], safeNextParams = Object.entries(nextParams).filter(([key]) => allowed.includes(key)).reduce((obj, [key, value]) => value == null ? obj : {
    ...obj,
    [key]: value
  }, {});
  return encodeQueryString(safeNextParams);
}
const BackLink = forwardRef(function(props, ref) {
  const $ = c(9);
  let restProps, searchParams;
  $[0] !== props ? ({
    searchParams,
    ...restProps
  } = props, $[0] = props, $[1] = restProps, $[2] = searchParams) : (restProps = $[1], searchParams = $[2]);
  let t0;
  $[3] !== searchParams ? (t0 = {
    type: void 0,
    _searchParams: Object.entries(searchParams)
  }, $[3] = searchParams, $[4] = t0) : t0 = $[4];
  let t1;
  return $[5] !== ref || $[6] !== restProps || $[7] !== t0 ? (t1 = /* @__PURE__ */ jsx(StateLink, { ...restProps, ref, state: t0, title: void 0 }), $[5] = ref, $[6] = restProps, $[7] = t0, $[8] = t1) : t1 = $[8], t1;
});
function PresentationPaneRouterProvider(props) {
  const $ = c(28), {
    children,
    onEditReference,
    onStructureParams,
    structureParams,
    searchParams,
    refs
  } = props, {
    state: routerState,
    resolvePathFromState
  } = useRouter();
  let t0;
  $[0] !== routerState._searchParams ? (t0 = Object.fromEntries(routerState._searchParams || []), $[0] = routerState._searchParams, $[1] = t0) : t0 = $[1];
  const routerSearchParams = useUnique(t0);
  let t1;
  $[2] !== resolvePathFromState || $[3] !== routerSearchParams || $[4] !== routerState ? (t1 = (nextParams) => {
    const path = resolvePathFromState(routerState), qs = resolveQueryStringFromParams({
      ...routerSearchParams,
      ...nextParams
    });
    return `${path}${qs}`;
  }, $[2] = resolvePathFromState, $[3] = routerSearchParams, $[4] = routerState, $[5] = t1) : t1 = $[5];
  const createPathWithParams = t1;
  let t2;
  $[6] === Symbol.for("react.memo_cache_sentinel") ? (t2 = {}, $[6] = t2) : t2 = $[6];
  const t3 = structureParams;
  let t4;
  $[7] === Symbol.for("react.memo_cache_sentinel") ? (t4 = [], $[7] = t4) : t4 = $[7];
  let t5;
  $[8] !== refs || $[9] !== searchParams ? (t5 = forwardRef(function(childLinkProps, ref) {
    const {
      childId,
      ...rest
    } = childLinkProps, doc = refs?.find((r) => r._id === childId || getPublishedId(r._id) === childId);
    return doc ? /* @__PURE__ */ jsx(ChildLink, { ...rest, ref, childId, childType: doc._type, searchParams }) : (console.warn(`ChildLink: No document found for childId "${childId}"`), null);
  }), $[8] = refs, $[9] = searchParams, $[10] = t5) : t5 = $[10];
  let t6;
  $[11] !== searchParams ? (t6 = forwardRef(function(backLinkProps, ref_0) {
    return /* @__PURE__ */ jsx(BackLink, { ...backLinkProps, ref: ref_0, searchParams });
  }), $[11] = searchParams, $[12] = t6) : t6 = $[12];
  let t7;
  $[13] !== searchParams ? (t7 = forwardRef(function(childLinkProps_0, ref_1) {
    return /* @__PURE__ */ jsx(ReferenceChildLink, { ...childLinkProps_0, ref: ref_1, searchParams });
  }), $[13] = searchParams, $[14] = t7) : t7 = $[14];
  let t8;
  $[15] !== onEditReference ? (t8 = (options) => {
    const {
      id,
      template,
      type,
      parentRefPath,
      version
    } = options;
    onEditReference({
      state: {
        id,
        type
      },
      params: {
        template: template.id,
        parentRefPath: toString(parentRefPath),
        version
      }
    });
  }, $[15] = onEditReference, $[16] = t8) : t8 = $[16];
  let t9;
  $[17] !== createPathWithParams || $[18] !== onStructureParams || $[19] !== t3 || $[20] !== t5 || $[21] !== t6 || $[22] !== t7 || $[23] !== t8 ? (t9 = {
    index: 0,
    groupIndex: 0,
    siblingIndex: 0,
    payload: t2,
    params: t3,
    hasGroupSiblings: !1,
    groupLength: 1,
    routerPanesState: t4,
    ChildLink: t5,
    BackLink: t6,
    ReferenceChildLink: t7,
    ParameterizedLink: _temp$d,
    closeCurrentAndAfter: _temp2$7,
    handleEditReference: t8,
    replaceCurrent: _temp3$3,
    closeCurrent: _temp4$2,
    duplicateCurrent: _temp5$2,
    setView: _temp6$1,
    setParams: onStructureParams,
    setPayload: _temp7$1,
    navigateIntent: _temp8,
    createPathWithParams
  }, $[17] = createPathWithParams, $[18] = onStructureParams, $[19] = t3, $[20] = t5, $[21] = t6, $[22] = t7, $[23] = t8, $[24] = t9) : t9 = $[24];
  const context = t9;
  let t10;
  return $[25] !== children || $[26] !== context ? (t10 = /* @__PURE__ */ jsx(PaneRouterContext.Provider, { value: context, children }), $[25] = children, $[26] = context, $[27] = t10) : t10 = $[27], t10;
}
function _temp8(intentName, intentParams, options_0) {
  console.warn("navigateIntent", intentName, intentParams, options_0);
}
function _temp7$1(payload) {
  console.warn("setPayload", payload);
}
function _temp6$1(viewId) {
  console.warn("setView", viewId);
}
function _temp5$2(pane_0) {
  console.warn("duplicateCurrent", pane_0);
}
function _temp4$2() {
  console.warn("closeCurrent");
}
function _temp3$3(pane) {
  console.warn("replaceCurrent", pane);
}
function _temp2$7() {
  console.warn("closeCurrentAndAfter");
}
function _temp$d() {
  throw new Error("ParameterizedLink not implemented");
}
const RootLayout = styled(PaneLayout)`
  height: 100%;
`, Root = styled(Flex)`
  & > div {
    min-width: none !important;
    max-width: none !important;
  }
`, WrappedCode$1 = styled(Code)`
  white-space: pre-wrap;
`;
function DocumentListPane(props) {
  const $ = c(34), {
    mainDocumentState,
    onEditReference,
    onStructureParams,
    searchParams,
    refs
  } = props, {
    t
  } = useTranslation(presentationLocaleNamespace), {
    devMode
  } = usePresentationTool();
  let t0;
  if ($[0] !== mainDocumentState?.document?._id || $[1] !== refs) {
    let t12;
    $[3] !== mainDocumentState?.document?._id ? (t12 = (r) => getPublishedId(r._id) !== mainDocumentState?.document?._id, $[3] = mainDocumentState?.document?._id, $[4] = t12) : t12 = $[4], t0 = refs.filter(t12).map(_temp$c), $[0] = mainDocumentState?.document?._id, $[1] = refs, $[2] = t0;
  } else
    t0 = $[2];
  const ids = t0;
  let t1;
  $[5] !== ids ? (t1 = {
    filter: "_id in $ids",
    params: {
      ids
    }
  }, $[5] = ids, $[6] = t1) : t1 = $[6];
  let t2;
  $[7] !== t ? (t2 = t("document-list-pane.document-list.title"), $[7] = t, $[8] = t2) : t2 = $[8];
  let t3;
  $[9] !== t1 || $[10] !== t2 ? (t3 = {
    id: "$root",
    options: t1,
    schemaTypeName: "",
    title: t2,
    type: "documentList"
  }, $[9] = t1, $[10] = t2, $[11] = t3) : t3 = $[11];
  const pane = t3, [errorParams, setErrorParams] = useState(null);
  let t4;
  $[12] === Symbol.for("react.memo_cache_sentinel") ? (t4 = () => setErrorParams(null), $[12] = t4) : t4 = $[12];
  const handleRetry = t4, [structureParams] = useState(_temp2$6);
  let t5;
  $[13] === Symbol.for("react.memo_cache_sentinel") ? (t5 = () => setErrorParams(null), $[13] = t5) : t5 = $[13];
  let t6;
  if ($[14] !== refs ? (t6 = [refs], $[14] = refs, $[15] = t6) : t6 = $[15], useEffect(t5, t6), errorParams) {
    let t72;
    $[16] !== t ? (t72 = t("document-list-pane.error.text"), $[16] = t, $[17] = t72) : t72 = $[17];
    let t82;
    $[18] !== devMode || $[19] !== errorParams || $[20] !== t ? (t82 = devMode && /* @__PURE__ */ jsx(Card, { overflow: "auto", padding: 3, radius: 2, tone: "critical", children: /* @__PURE__ */ jsxs(Stack, { space: 3, children: [
      /* @__PURE__ */ jsx(Label, { muted: !0, size: 0, children: t("presentation-error.label") }),
      /* @__PURE__ */ jsx(WrappedCode$1, { size: 1, children: errorParams.error.message })
    ] }) }), $[18] = devMode, $[19] = errorParams, $[20] = t, $[21] = t82) : t82 = $[21];
    let t9;
    return $[22] !== t72 || $[23] !== t82 ? (t9 = /* @__PURE__ */ jsx(ErrorCard, { flex: 1, message: t72, onRetry: handleRetry, children: t82 }), $[22] = t72, $[23] = t82, $[24] = t9) : t9 = $[24], t9;
  }
  let t7;
  $[25] !== pane ? (t7 = /* @__PURE__ */ jsx(Root, { direction: "column", flex: 1, children: /* @__PURE__ */ jsx(DocumentListPane$1, { index: 0, itemId: "$root", pane, paneKey: "$root" }) }), $[25] = pane, $[26] = t7) : t7 = $[26];
  let t8;
  return $[27] !== onEditReference || $[28] !== onStructureParams || $[29] !== refs || $[30] !== searchParams || $[31] !== structureParams || $[32] !== t7 ? (t8 = /* @__PURE__ */ jsx(ErrorBoundary, { onCatch: setErrorParams, children: /* @__PURE__ */ jsx(RootLayout, { children: /* @__PURE__ */ jsx(StructureToolProvider, { children: /* @__PURE__ */ jsx(PresentationPaneRouterProvider, { onEditReference, onStructureParams, structureParams, searchParams, refs, children: t7 }) }) }) }), $[27] = onEditReference, $[28] = onStructureParams, $[29] = refs, $[30] = searchParams, $[31] = structureParams, $[32] = t7, $[33] = t8) : t8 = $[33], t8;
}
function _temp2$6() {
  return {};
}
function _temp$c(r_0) {
  return getPublishedId(r_0._id);
}
const WrappedCode = styled(Code)`
  white-space: pre-wrap;
`;
function DocumentPane(props) {
  const $ = c(40), {
    documentId,
    documentType,
    onFocusPath,
    onEditReference,
    onStructureParams,
    searchParams,
    structureParams
  } = props, {
    template,
    templateParams
  } = structureParams, {
    t
  } = useTranslation(presentationLocaleNamespace), {
    devMode
  } = usePresentationTool();
  let t0;
  $[0] !== templateParams ? (t0 = decodeJsonParams(templateParams), $[0] = templateParams, $[1] = t0) : t0 = $[1];
  let t1;
  $[2] !== documentId || $[3] !== documentType || $[4] !== t0 || $[5] !== template ? (t1 = {
    id: documentId,
    type: documentType,
    template,
    templateParameters: t0
  }, $[2] = documentId, $[3] = documentType, $[4] = t0, $[5] = template, $[6] = t1) : t1 = $[6];
  let t2;
  $[7] !== documentId || $[8] !== t1 ? (t2 = {
    id: documentId,
    options: t1,
    title: "",
    type: "document"
  }, $[7] = documentId, $[8] = t1, $[9] = t2) : t2 = $[9];
  const paneDocumentNode = t2;
  let t3;
  $[10] !== documentId || $[11] !== documentType || $[12] !== onFocusPath ? (t3 = (path) => onFocusPath({
    id: documentId,
    type: documentType,
    path: studioPath.toString(path)
  }), $[10] = documentId, $[11] = documentType, $[12] = onFocusPath, $[13] = t3) : t3 = $[13];
  const handleFocusPath = t3, [errorParams, setErrorParams] = useState(null);
  let t4;
  $[14] === Symbol.for("react.memo_cache_sentinel") ? (t4 = () => setErrorParams(null), $[14] = t4) : t4 = $[14];
  const handleRetry = t4;
  let t5;
  $[15] === Symbol.for("react.memo_cache_sentinel") ? (t5 = () => {
    setErrorParams(null);
  }, $[15] = t5) : t5 = $[15];
  let t6;
  if ($[16] !== documentId || $[17] !== documentType || $[18] !== structureParams ? (t6 = [documentId, documentType, structureParams], $[16] = documentId, $[17] = documentType, $[18] = structureParams, $[19] = t6) : t6 = $[19], useEffect(t5, t6), errorParams) {
    let t72;
    $[20] !== t ? (t72 = t("document-pane.error.text"), $[20] = t, $[21] = t72) : t72 = $[21];
    let t82;
    $[22] !== devMode || $[23] !== errorParams || $[24] !== t ? (t82 = devMode && /* @__PURE__ */ jsx(Card, { overflow: "auto", padding: 3, radius: 2, tone: "critical", children: /* @__PURE__ */ jsxs(Stack, { space: 3, children: [
      /* @__PURE__ */ jsx(Label, { muted: !0, size: 0, children: t("presentation-error.label") }),
      /* @__PURE__ */ jsx(WrappedCode, { size: 1, children: errorParams.error.message })
    ] }) }), $[22] = devMode, $[23] = errorParams, $[24] = t, $[25] = t82) : t82 = $[25];
    let t92;
    return $[26] !== t72 || $[27] !== t82 ? (t92 = /* @__PURE__ */ jsx(ErrorCard, { flex: 1, message: t72, onRetry: handleRetry, children: t82 }), $[26] = t72, $[27] = t82, $[28] = t92) : t92 = $[28], t92;
  }
  let t7;
  $[29] === Symbol.for("react.memo_cache_sentinel") ? (t7 = {
    height: "100%"
  }, $[29] = t7) : t7 = $[29];
  let t8;
  $[30] === Symbol.for("react.memo_cache_sentinel") ? (t8 = /* @__PURE__ */ jsx(PresentationSpinner, {}), $[30] = t8) : t8 = $[30];
  let t9;
  $[31] !== handleFocusPath || $[32] !== paneDocumentNode ? (t9 = /* @__PURE__ */ jsx(Suspense, { fallback: t8, children: /* @__PURE__ */ jsx(DocumentPane$1, { paneKey: "document", index: 1, itemId: "document", pane: paneDocumentNode, onFocusPath: handleFocusPath }) }), $[31] = handleFocusPath, $[32] = paneDocumentNode, $[33] = t9) : t9 = $[33];
  let t10;
  return $[34] !== onEditReference || $[35] !== onStructureParams || $[36] !== searchParams || $[37] !== structureParams || $[38] !== t9 ? (t10 = /* @__PURE__ */ jsx(ErrorBoundary, { onCatch: setErrorParams, children: /* @__PURE__ */ jsx(PaneLayout, { style: t7, children: /* @__PURE__ */ jsx(PresentationPaneRouterProvider, { searchParams, onEditReference, onStructureParams, structureParams, children: t9 }) }) }), $[34] = onEditReference, $[35] = onStructureParams, $[36] = searchParams, $[37] = structureParams, $[38] = t9, $[39] = t10) : t10 = $[39], t10;
}
function DocumentPanel(props) {
  const $ = c(8), {
    documentId,
    documentType,
    onFocusPath,
    onEditReference,
    onStructureParams,
    searchParams,
    structureParams
  } = props;
  let t0;
  return $[0] !== documentId || $[1] !== documentType || $[2] !== onEditReference || $[3] !== onFocusPath || $[4] !== onStructureParams || $[5] !== searchParams || $[6] !== structureParams ? (t0 = /* @__PURE__ */ jsx(StructureToolProvider$1, { children: /* @__PURE__ */ jsx(DocumentPane, { documentId, documentType, onEditReference, onFocusPath, onStructureParams, searchParams, structureParams }) }), $[0] = documentId, $[1] = documentType, $[2] = onEditReference, $[3] = onFocusPath, $[4] = onStructureParams, $[5] = searchParams, $[6] = structureParams, $[7] = t0) : t0 = $[7], t0;
}
function usePreviewState(documentId, schemaType2) {
  const $ = c(7), documentPreviewStore = useDocumentPreviewStore();
  let t0;
  $[0] === Symbol.for("react.memo_cache_sentinel") ? (t0 = {}, $[0] = t0) : t0 = $[0];
  const [preview, setPreview] = useState(t0), {
    perspectiveStack
  } = usePerspective();
  let t1, t2;
  return $[1] !== documentId || $[2] !== documentPreviewStore || $[3] !== perspectiveStack || $[4] !== schemaType2 ? (t1 = () => {
    if (!schemaType2)
      return;
    const subscription = getPreviewStateObservable(documentPreviewStore, schemaType2, documentId, perspectiveStack).subscribe((state) => {
      setPreview(state);
    });
    return () => {
      subscription?.unsubscribe();
    };
  }, t2 = [documentPreviewStore, schemaType2, documentId, perspectiveStack], $[1] = documentId, $[2] = documentPreviewStore, $[3] = perspectiveStack, $[4] = schemaType2, $[5] = t1, $[6] = t2) : (t1 = $[5], t2 = $[6]), useEffect(t1, t2), preview;
}
function ContentEditor(props) {
  const $ = c(40), {
    documentId,
    documentType,
    mainDocumentState,
    onEditReference,
    onFocusPath,
    onStructureParams,
    refs,
    searchParams,
    structureParams
  } = props, {
    t
  } = useTranslation(presentationLocaleNamespace), schema = useSchema();
  let t0;
  $[0] !== mainDocumentState?.document?._id || $[1] !== mainDocumentState?.document?._type || $[2] !== searchParams ? (t0 = (props_0) => /* @__PURE__ */ jsx(StateLink, { ...props_0, state: {
    id: mainDocumentState?.document?._id,
    type: mainDocumentState?.document?._type,
    _searchParams: Object.entries(searchParams)
  } }), $[0] = mainDocumentState?.document?._id, $[1] = mainDocumentState?.document?._type, $[2] = searchParams, $[3] = t0) : t0 = $[3];
  const MainDocumentLink = t0;
  let t1;
  $[4] !== mainDocumentState?.document?._type || $[5] !== schema ? (t1 = schema.get(mainDocumentState?.document?._type || "shoe"), $[4] = mainDocumentState?.document?._type, $[5] = schema, $[6] = t1) : t1 = $[6];
  const schemaType2 = t1, previewState = usePreviewState(mainDocumentState?.document?._id || "", schemaType2);
  let t2;
  bb0: {
    if (!mainDocumentState?.document) {
      t2 = null;
      break bb0;
    }
    let t32;
    $[7] !== mainDocumentState.document || $[8] !== previewState.snapshot ? (t32 = getPreviewValueWithFallback({
      snapshot: previewState.snapshot,
      fallback: mainDocumentState.document
    }), $[7] = mainDocumentState.document, $[8] = previewState.snapshot, $[9] = t32) : t32 = $[9];
    let t42;
    $[10] !== t ? (t42 = t("main-document.label"), $[10] = t, $[11] = t42) : t42 = $[11];
    let t52;
    $[12] !== t42 ? (t52 = /* @__PURE__ */ jsx(Card, { padding: 1, radius: 2, shadow: 1, children: /* @__PURE__ */ jsx(Text, { muted: !0, size: 0, weight: "medium", children: t42 }) }), $[12] = t42, $[13] = t52) : t52 = $[13];
    let t6;
    $[14] !== schemaType2 || $[15] !== t32 || $[16] !== t52 ? (t6 = /* @__PURE__ */ jsx(SanityDefaultPreview, { ...t32, schemaType: schemaType2, status: t52 }), $[14] = schemaType2, $[15] = t32, $[16] = t52, $[17] = t6) : t6 = $[17], t2 = t6;
  }
  const preview = t2;
  if (documentId && documentType) {
    let t32;
    return $[18] !== documentId || $[19] !== documentType || $[20] !== onEditReference || $[21] !== onFocusPath || $[22] !== onStructureParams || $[23] !== searchParams || $[24] !== structureParams ? (t32 = /* @__PURE__ */ jsx(DocumentPanel, { documentId, documentType, onEditReference, onFocusPath, onStructureParams, searchParams, structureParams }), $[18] = documentId, $[19] = documentType, $[20] = onEditReference, $[21] = onFocusPath, $[22] = onStructureParams, $[23] = searchParams, $[24] = structureParams, $[25] = t32) : t32 = $[25], t32;
  }
  let t3;
  $[26] !== MainDocumentLink || $[27] !== mainDocumentState || $[28] !== preview || $[29] !== t ? (t3 = mainDocumentState && /* @__PURE__ */ jsx(Card, { padding: 3, tone: mainDocumentState.document ? "inherit" : "caution", children: mainDocumentState.document ? /* @__PURE__ */ jsx(PreviewCard, { __unstable_focusRing: !0, as: MainDocumentLink, "data-as": "a", radius: 2, sizing: "border", tone: "inherit", children: preview }) : /* @__PURE__ */ jsx(Card, { padding: 2, radius: 2, tone: "inherit", children: /* @__PURE__ */ jsxs(Flex, { gap: 3, children: [
    /* @__PURE__ */ jsx(Box, { flex: "none", children: /* @__PURE__ */ jsx(Text, { size: 1, children: /* @__PURE__ */ jsx(WarningOutlineIcon, {}) }) }),
    /* @__PURE__ */ jsx(Box, { flex: 1, children: /* @__PURE__ */ jsx(Text, { size: 1, children: /* @__PURE__ */ jsx(Translate, { t, i18nKey: "main-document.missing.text", components: {
      Code: "code"
    }, values: {
      path: mainDocumentState.path
    } }) }) })
  ] }) }) }), $[26] = MainDocumentLink, $[27] = mainDocumentState, $[28] = preview, $[29] = t, $[30] = t3) : t3 = $[30];
  let t4;
  $[31] !== mainDocumentState || $[32] !== onEditReference || $[33] !== onStructureParams || $[34] !== refs || $[35] !== searchParams ? (t4 = /* @__PURE__ */ jsx(DocumentListPane, { mainDocumentState, onEditReference, onStructureParams, searchParams, refs }), $[31] = mainDocumentState, $[32] = onEditReference, $[33] = onStructureParams, $[34] = refs, $[35] = searchParams, $[36] = t4) : t4 = $[36];
  let t5;
  return $[37] !== t3 || $[38] !== t4 ? (t5 = /* @__PURE__ */ jsxs(Flex, { direction: "column", flex: 1, height: "fill", children: [
    t3,
    t4
  ] }), $[37] = t3, $[38] = t4, $[39] = t5) : t5 = $[39], t5;
}
function usePanelId(id) {
  const $ = c(2);
  let t0;
  $[0] !== id ? (t0 = () => id || v4(), $[0] = id, $[1] = t0) : t0 = $[1];
  const [panelId] = useState(t0);
  return panelId;
}
const Resizer = styled.div`
  position: relative;
`, ResizerInner = styled.div`
  position: absolute;
  top: 0;
  bottom: 0;
  left: -5px;
  width: 9px;
  z-index: 10;
  cursor: ${({
  $disabled
}) => $disabled ? "auto" : "ew-resize"};

  /* Border */
  & > span:nth-child(1) {
    display: block;
    border-left: 1px solid var(--card-border-color);
    position: absolute;
    top: 0;
    left: 4px;
    bottom: 0;
    transition: opacity 200ms;
  }

  ${({
  $disabled
}) => !$disabled && `
    /* Hover effect */
    & > span:nth-child(2) {
      display: block;
      position: absolute;
      top: 0;
      left: 0;
      width: 9px;
      bottom: 0;
      background-color: var(--card-border-color);
      opacity: 0;
      transition: opacity 150ms;
    }

    @media (hover: hover) {
      &:hover > span:nth-child(2) {
        opacity: 0.2;
      }
    }
  `}
`, PanelResizer = function(t0) {
  const $ = c(27), {
    id: propId,
    order,
    disabled: t1
  } = t0, disabled = t1 === void 0 ? !1 : t1, el = useRef(null), context = useContext(PresentationPanelsContext);
  if (context === null)
    throw Error("Panel components must be rendered within a PanelGroup container");
  const id = usePanelId(propId), {
    activeResizer,
    drag,
    startDragging,
    stopDragging,
    registerElement,
    unregisterElement
  } = context, isDragging = activeResizer === id;
  if (context === null)
    throw Error("Panel components must be rendered within a PanelGroup container");
  let t2;
  $[0] !== id || $[1] !== startDragging ? (t2 = (event) => {
    startDragging(id, event.nativeEvent);
  }, $[0] = id, $[1] = startDragging, $[2] = t2) : t2 = $[2];
  const onMouseDown = t2;
  let t3;
  $[3] !== drag || $[4] !== id ? (t3 = (e) => {
    drag(id, e);
  }, $[3] = drag, $[4] = id, $[5] = t3) : t3 = $[5];
  const onDrag = t3;
  let t4;
  $[6] !== stopDragging ? (t4 = () => {
    el.current.blur(), stopDragging();
  }, $[6] = stopDragging, $[7] = t4) : t4 = $[7];
  const onDragStop = t4;
  let t5, t6;
  $[8] !== disabled || $[9] !== isDragging || $[10] !== onDrag || $[11] !== onDragStop ? (t5 = () => {
    if (!isDragging || disabled)
      return;
    const resetDocumentStyles = (function() {
      const bodyStyle = document.body.style, documentStyle = document.documentElement.style, {
        cursor
      } = documentStyle, {
        userSelect
      } = bodyStyle;
      return documentStyle.cursor = "ew-resize", bodyStyle.userSelect = "none", () => {
        cursor ? documentStyle.cursor = cursor : documentStyle.removeProperty("cursor"), userSelect ? bodyStyle.userSelect = userSelect : bodyStyle.removeProperty("user-select");
      };
    })();
    return window.addEventListener("mousemove", onDrag), window.addEventListener("mouseup", onDragStop), window.addEventListener("contextmenu", onDragStop), () => {
      resetDocumentStyles(), window.removeEventListener("mousemove", onDrag), window.removeEventListener("mouseup", onDragStop), window.removeEventListener("contextmenu", onDragStop);
    };
  }, t6 = [disabled, isDragging, onDrag, onDragStop], $[8] = disabled, $[9] = isDragging, $[10] = onDrag, $[11] = onDragStop, $[12] = t5, $[13] = t6) : (t5 = $[12], t6 = $[13]), useEffect(t5, t6);
  let t7, t8;
  $[14] !== id || $[15] !== order || $[16] !== registerElement || $[17] !== unregisterElement ? (t7 = () => (registerElement(id, {
    id,
    order,
    type: "resizer",
    el
  }), () => {
    unregisterElement(id);
  }), t8 = [id, order, registerElement, unregisterElement], $[14] = id, $[15] = order, $[16] = registerElement, $[17] = unregisterElement, $[18] = t7, $[19] = t8) : (t7 = $[18], t8 = $[19]), useLayoutEffect(t7, t8);
  let t10, t9;
  $[20] === Symbol.for("react.memo_cache_sentinel") ? (t9 = /* @__PURE__ */ jsx("span", {}), t10 = /* @__PURE__ */ jsx("span", {}), $[20] = t10, $[21] = t9) : (t10 = $[20], t9 = $[21]);
  let t11;
  $[22] !== disabled ? (t11 = /* @__PURE__ */ jsxs(ResizerInner, { $disabled: disabled, children: [
    t9,
    t10
  ] }), $[22] = disabled, $[23] = t11) : t11 = $[23];
  let t12;
  return $[24] !== onMouseDown || $[25] !== t11 ? (t12 = /* @__PURE__ */ jsx(Resizer, { onMouseDown, ref: el, children: t11 }), $[24] = onMouseDown, $[25] = t11, $[26] = t12) : t12 = $[26], t12;
}, PresentationContentWrapper = (props) => {
  const $ = c(8), {
    documentId,
    setDisplayedDocument,
    getCommentIntent
  } = props;
  let t0;
  $[0] === Symbol.for("react.memo_cache_sentinel") ? (t0 = /* @__PURE__ */ jsx(PanelResizer, { order: 4 }), $[0] = t0) : t0 = $[0];
  let t1;
  $[1] !== getCommentIntent || $[2] !== props.children ? (t1 = /* @__PURE__ */ jsx(CommentsIntentProvider, { getIntent: getCommentIntent, children: props.children }), $[1] = getCommentIntent, $[2] = props.children, $[3] = t1) : t1 = $[3];
  let t2;
  return $[4] !== documentId || $[5] !== setDisplayedDocument || $[6] !== t1 ? (t2 = /* @__PURE__ */ jsxs(Fragment, { children: [
    t0,
    /* @__PURE__ */ jsx(Panel, { id: "content", minWidth: 325, order: 5, children: /* @__PURE__ */ jsx(DisplayedDocumentBroadcasterProvider, { documentId, setDisplayedDocument, children: t1 }) })
  ] }), $[4] = documentId, $[5] = setDisplayedDocument, $[6] = t1, $[7] = t2) : t2 = $[7], t2;
}, PresentationContent = (props) => {
  const $ = c(15), {
    documentId,
    documentsOnPage,
    documentType,
    getCommentIntent,
    mainDocumentState,
    onEditReference,
    onFocusPath,
    onStructureParams,
    searchParams,
    setDisplayedDocument,
    structureParams
  } = props;
  let t0;
  $[0] !== documentId || $[1] !== documentType || $[2] !== documentsOnPage || $[3] !== mainDocumentState || $[4] !== onEditReference || $[5] !== onFocusPath || $[6] !== onStructureParams || $[7] !== searchParams || $[8] !== structureParams ? (t0 = /* @__PURE__ */ jsx(ContentEditor, { documentId, documentType, mainDocumentState, onEditReference, onFocusPath, onStructureParams, refs: documentsOnPage, searchParams, structureParams }), $[0] = documentId, $[1] = documentType, $[2] = documentsOnPage, $[3] = mainDocumentState, $[4] = onEditReference, $[5] = onFocusPath, $[6] = onStructureParams, $[7] = searchParams, $[8] = structureParams, $[9] = t0) : t0 = $[9];
  let t1;
  return $[10] !== documentId || $[11] !== getCommentIntent || $[12] !== setDisplayedDocument || $[13] !== t0 ? (t1 = /* @__PURE__ */ jsx(PresentationContentWrapper, { documentId, getCommentIntent, setDisplayedDocument, children: t0 }), $[10] = documentId, $[11] = getCommentIntent, $[12] = setDisplayedDocument, $[13] = t0, $[14] = t1) : t1 = $[14], t1;
}, PresentationNavigateProvider = function(props) {
  const $ = c(5), {
    children,
    navigate: _navigate
  } = props;
  let t0;
  $[0] !== _navigate ? (t0 = (preview, document2) => {
    if (preview || document2) {
      const obj = {};
      preview && (obj.params = {
        preview
      }), document2 && (obj.state = document2), _navigate(obj);
    }
  }, $[0] = _navigate, $[1] = t0) : t0 = $[1];
  const navigate = t0;
  let t1;
  return $[2] !== children || $[3] !== navigate ? (t1 = /* @__PURE__ */ jsx(PresentationNavigateContext.Provider, { value: navigate, children }), $[2] = children, $[3] = navigate, $[4] = t1) : t1 = $[4], t1;
};
function useLocalState(key, defaultValue) {
  const $ = c(9);
  let t0;
  $[0] !== defaultValue || $[1] !== key ? (t0 = () => JSON.parse(localStorage.getItem(key) ?? JSON.stringify(defaultValue)), $[0] = defaultValue, $[1] = key, $[2] = t0) : t0 = $[2];
  const [value, setValue] = useState(t0);
  let t1, t2;
  $[3] !== key || $[4] !== value ? (t1 = () => {
    localStorage.setItem(key, JSON.stringify(value));
  }, t2 = [key, value], $[3] = key, $[4] = value, $[5] = t1, $[6] = t2) : (t1 = $[5], t2 = $[6]), useEffect(t1, t2);
  let t3;
  return $[7] !== value ? (t3 = [value, setValue], $[7] = value, $[8] = t3) : t3 = $[8], t3;
}
function usePresentationNavigator(props) {
  const $ = c(11), {
    unstable_navigator
  } = props, navigatorProvided = !!unstable_navigator?.component, [_navigatorEnabled, setNavigatorEnabled] = useLocalState("presentation/navigator", navigatorProvided), navigatorEnabled = navigatorProvided ? _navigatorEnabled : !1;
  let t0;
  bb0: {
    if (!navigatorProvided) {
      t0 = void 0;
      break bb0;
    }
    let t12;
    $[0] !== setNavigatorEnabled ? (t12 = () => setNavigatorEnabled(_temp$b), $[0] = setNavigatorEnabled, $[1] = t12) : t12 = $[1], t0 = t12;
  }
  const toggleNavigator = t0;
  let t1;
  $[2] !== navigatorEnabled || $[3] !== unstable_navigator ? (t1 = function() {
    return /* @__PURE__ */ jsx(Fragment, { children: navigatorEnabled && /* @__PURE__ */ jsx(Navigator, { ...unstable_navigator }) });
  }, $[2] = navigatorEnabled, $[3] = unstable_navigator, $[4] = t1) : t1 = $[4];
  const Component = t1;
  let t2;
  $[5] !== navigatorEnabled || $[6] !== toggleNavigator ? (t2 = {
    navigatorEnabled,
    toggleNavigator
  }, $[5] = navigatorEnabled, $[6] = toggleNavigator, $[7] = t2) : t2 = $[7];
  let t3;
  return $[8] !== Component || $[9] !== t2 ? (t3 = [t2, Component], $[8] = Component, $[9] = t2, $[10] = t3) : t3 = $[10], t3;
}
function _temp$b(enabled) {
  return !enabled;
}
function NavigatorComponent(props) {
  const $ = c(11), {
    minWidth,
    maxWidth,
    component: NavigatorComponent2
  } = props, navigatorDisabled = minWidth != null && maxWidth != null && minWidth === maxWidth;
  let t0;
  $[0] !== NavigatorComponent2 ? (t0 = /* @__PURE__ */ jsx(NavigatorComponent2, {}), $[0] = NavigatorComponent2, $[1] = t0) : t0 = $[1];
  let t1;
  $[2] !== maxWidth || $[3] !== minWidth || $[4] !== t0 ? (t1 = /* @__PURE__ */ jsx(Panel, { id: "navigator", minWidth, maxWidth, order: 1, children: t0 }), $[2] = maxWidth, $[3] = minWidth, $[4] = t0, $[5] = t1) : t1 = $[5];
  let t2;
  $[6] !== navigatorDisabled ? (t2 = /* @__PURE__ */ jsx(PanelResizer, { order: 2, disabled: navigatorDisabled }), $[6] = navigatorDisabled, $[7] = t2) : t2 = $[7];
  let t3;
  return $[8] !== t1 || $[9] !== t2 ? (t3 = /* @__PURE__ */ jsxs(Fragment, { children: [
    t1,
    t2
  ] }), $[8] = t1, $[9] = t2, $[10] = t3) : t3 = $[10], t3;
}
const Navigator = memo(NavigatorComponent), PresentationParamsProvider = function(props) {
  const $ = c(3), {
    children,
    params
  } = props, context = params;
  let t0;
  return $[0] !== children || $[1] !== context ? (t0 = /* @__PURE__ */ jsx(PresentationParamsContext.Provider, { value: context, children }), $[0] = children, $[1] = context, $[2] = t0) : t0 = $[2], t0;
}, PresentationProvider = function(props) {
  const $ = c(10), {
    children,
    devMode,
    name,
    navigate,
    params,
    searchParams,
    structureParams
  } = props;
  let t0;
  $[0] !== devMode || $[1] !== name || $[2] !== navigate || $[3] !== params || $[4] !== searchParams || $[5] !== structureParams ? (t0 = {
    devMode,
    name,
    navigate,
    params,
    searchParams,
    structureParams
  }, $[0] = devMode, $[1] = name, $[2] = navigate, $[3] = params, $[4] = searchParams, $[5] = structureParams, $[6] = t0) : t0 = $[6];
  const context = t0;
  let t1;
  return $[7] !== children || $[8] !== context ? (t1 = /* @__PURE__ */ jsx(PresentationContext.Provider, { value: context, children }), $[7] = children, $[8] = context, $[9] = t1) : t1 = $[9], t1;
};
function useAllowPatterns(previewUrlRef) {
  const allowPatterns = useSelector(previewUrlRef, _temp$a);
  if (!Array.isArray(allowPatterns))
    throw new TypeError("allowPatterns must be an array");
  return allowPatterns;
}
function _temp$a(state) {
  return state.context.allowOrigins;
}
function encodeStudioPerspective(studioPerspective) {
  return Array.isArray(studioPerspective) ? studioPerspective.join(",") : studioPerspective;
}
function useId() {
  const $ = c(2), id = useId$1();
  let t0;
  return $[0] !== id ? (t0 = id.startsWith(":") ? id.replace(/^:(.+):$/, "\xAB$1\xBB") : id, $[0] = id, $[1] = t0) : t0 = $[1], t0;
}
const IFrame = forwardRef(function(props, forwardedRef) {
  const $ = c(19), {
    animate,
    initial,
    onLoad,
    preventClick,
    src,
    variants,
    style
  } = props, ref = useRef(null);
  let t0;
  $[0] === Symbol.for("react.memo_cache_sentinel") ? (t0 = () => ref.current, $[0] = t0) : t0 = $[0], useImperativeHandle(forwardedRef, t0);
  let t1, t2;
  $[1] === Symbol.for("react.memo_cache_sentinel") ? (t1 = () => {
    if (!ref.current)
      return;
    const instance = ref.current, handleBlur = function() {
      instance === document.activeElement && instance.dispatchEvent(new MouseEvent("mousedown", {
        bubbles: !0,
        cancelable: !0
      }));
    };
    return window.addEventListener("blur", handleBlur), () => {
      window.removeEventListener("blur", handleBlur);
    };
  }, t2 = [], $[1] = t1, $[2] = t2) : (t1 = $[1], t2 = $[2]), useEffect(t1, t2);
  const viewTransitionName = useId();
  let t3;
  $[3] !== style || $[4] !== viewTransitionName ? (t3 = {
    ...style,
    viewTransitionName
  }, $[3] = style, $[4] = viewTransitionName, $[5] = t3) : t3 = $[5];
  let t4;
  $[6] !== animate || $[7] !== initial || $[8] !== onLoad || $[9] !== src || $[10] !== t3 || $[11] !== variants ? (t4 = /* @__PURE__ */ jsx(IFrameElement, { style: t3, animate, initial, onLoad, ref, src, variants }), $[6] = animate, $[7] = initial, $[8] = onLoad, $[9] = src, $[10] = t3, $[11] = variants, $[12] = t4) : t4 = $[12];
  let t5;
  $[13] !== preventClick ? (t5 = preventClick && /* @__PURE__ */ jsx(IFrameOverlay, {}), $[13] = preventClick, $[14] = t5) : t5 = $[14];
  let t6;
  $[15] === Symbol.for("react.memo_cache_sentinel") ? (t6 = /* @__PURE__ */ jsx(GlobalViewTransition, {}), $[15] = t6) : t6 = $[15];
  let t7;
  return $[16] !== t4 || $[17] !== t5 ? (t7 = /* @__PURE__ */ jsxs(Fragment, { children: [
    t4,
    t5,
    t6
  ] }), $[16] = t4, $[17] = t5, $[18] = t7) : t7 = $[18], t7;
}), IFrameElement = motion.create(styled.iframe`
  box-shadow: 0 0 0 1px var(--card-border-color);
  border: 0;
  max-height: 100%;
  width: 100%;
  view-transition-class: presentation-tool-iframe;
`), IFrameOverlay = styled(Box)`
  position: absolute;
  inset: 0;
  background: transparent;
`, GlobalViewTransition = createGlobalStyle`
html:active-view-transition-type(sanity-iframe-viewport) {
  view-transition-name: none;
  &::view-transition {
    pointer-events: none;
  }
  /* &::view-transition-old(root) {
    display: none;
  }
  &::view-transition-new(root) {
    animation: none;
  } */
}
`;
function OpenPreviewButton(props) {
  const $ = c(16), {
    openPopup,
    previewLocationOrigin,
    previewLocationRoute,
    perspective,
    targetOrigin
  } = props, url = new URL(previewLocationRoute, previewLocationOrigin || targetOrigin);
  url.searchParams.set(urlSearchParamPreviewPerspective, encodeStudioPerspective(perspective));
  const {
    pathname,
    search
  } = url, openPreviewLink = `${previewLocationOrigin}${pathname}${search}`, {
    t
  } = useTranslation(presentationLocaleNamespace);
  let t0;
  $[0] !== openPopup ? (t0 = (event) => {
    event.preventDefault(), openPopup(event.currentTarget.href);
  }, $[0] = openPopup, $[1] = t0) : t0 = $[1];
  const handleOpenPopup = t0;
  let t1;
  $[2] !== t ? (t1 = t("share-url.menu-item.open.text"), $[2] = t, $[3] = t1) : t1 = $[3];
  let t2;
  $[4] !== t1 ? (t2 = /* @__PURE__ */ jsx(Text, { size: 1, children: t1 }), $[4] = t1, $[5] = t2) : t2 = $[5];
  let t3;
  $[6] === Symbol.for("react.memo_cache_sentinel") ? (t3 = ["bottom-start"], $[6] = t3) : t3 = $[6];
  let t4;
  $[7] !== t ? (t4 = t("share-url.menu-item.open.text"), $[7] = t, $[8] = t4) : t4 = $[8];
  let t5;
  $[9] !== handleOpenPopup || $[10] !== openPreviewLink || $[11] !== t4 ? (t5 = /* @__PURE__ */ jsx(Button, { as: "a", "aria-label": t4, icon: LaunchIcon, mode: "bleed", href: openPreviewLink, rel: "opener", target: "_blank", tooltipProps: null, onClick: handleOpenPopup }), $[9] = handleOpenPopup, $[10] = openPreviewLink, $[11] = t4, $[12] = t5) : t5 = $[12];
  let t6;
  return $[13] !== t2 || $[14] !== t5 ? (t6 = /* @__PURE__ */ jsx(Tooltip, { animate: !0, content: t2, fallbackPlacements: t3, placement: "bottom", portal: !0, children: t5 }), $[13] = t2, $[14] = t5, $[15] = t6) : t6 = $[15], t6;
}
function useTargetOrigin(previewUrlRef) {
  const targetOrigin = useSelector(previewUrlRef, _temp$9);
  if (!targetOrigin)
    throw new TypeError("targetOrigin is required");
  return targetOrigin;
}
function _temp$9(state) {
  return state.context.previewUrl?.origin;
}
function PreviewLocationInput(props) {
  const $ = c(32), {
    fontSize: t0,
    onChange,
    padding: t1,
    prefix,
    suffix,
    value,
    previewUrlRef
  } = props, fontSize = t0 === void 0 ? 1 : t0, padding = t1 === void 0 ? 3 : t1, allowOrigins = useAllowPatterns(previewUrlRef), targetOrigin = useTargetOrigin(previewUrlRef), {
    t
  } = useTranslation(presentationLocaleNamespace), {
    basePath: t2
  } = useActiveWorkspace()?.activeWorkspace || {}, basePath = t2 === void 0 ? "/" : t2, inputRef = useRef(null), [sessionValue, setSessionValue] = useState(void 0), [customValidity, setCustomValidity] = useState(void 0);
  let t3;
  $[0] === Symbol.for("react.memo_cache_sentinel") ? (t3 = (event) => {
    setSessionValue(event.currentTarget.value);
  }, $[0] = t3) : t3 = $[0];
  const handleChange = t3;
  let t4;
  $[1] !== allowOrigins || $[2] !== basePath || $[3] !== onChange || $[4] !== sessionValue || $[5] !== t || $[6] !== targetOrigin ? (t4 = (event_0) => {
    if (event_0.key === "Enter") {
      if (sessionValue === void 0)
        return;
      let absoluteValue = sessionValue;
      try {
        absoluteValue = new URL(sessionValue, targetOrigin).toString();
      } catch {
      }
      if (Array.isArray(allowOrigins)) {
        if (!allowOrigins.some((pattern) => pattern.test(absoluteValue))) {
          setCustomValidity(t("preview-location-input.error", {
            origin: targetOrigin,
            context: "origin-not-allowed"
          })), event_0.currentTarget.reportValidity();
          return;
        }
      } else if (!targetOrigin && (absoluteValue.startsWith(`${basePath}/`) || absoluteValue === basePath)) {
        setCustomValidity(t("preview-location-input.error", {
          basePath,
          context: "same-base-path"
        }));
        return;
      }
      const nextValue = absoluteValue === targetOrigin ? `${targetOrigin}/` : absoluteValue;
      setCustomValidity(void 0), setSessionValue(void 0), onChange(nextValue), inputRef.current?.blur();
    }
    event_0.key === "Escape" && (setCustomValidity(void 0), setSessionValue(void 0));
  }, $[1] = allowOrigins, $[2] = basePath, $[3] = onChange, $[4] = sessionValue, $[5] = t, $[6] = targetOrigin, $[7] = t4) : t4 = $[7];
  const handleKeyDown = t4;
  let t5;
  $[8] === Symbol.for("react.memo_cache_sentinel") ? (t5 = () => {
    setCustomValidity(void 0), setSessionValue(void 0);
  }, $[8] = t5) : t5 = $[8];
  const handleBlur = t5;
  let t6;
  $[9] !== targetOrigin || $[10] !== value ? (t6 = () => {
    setCustomValidity(void 0);
    let nextValue_0 = value;
    try {
      nextValue_0 = new URL(value, targetOrigin).toString();
    } catch {
    }
    setSessionValue(nextValue_0);
  }, $[9] = targetOrigin, $[10] = value, $[11] = t6) : t6 = $[11];
  const handleClear = t6;
  let t7;
  $[12] === Symbol.for("react.memo_cache_sentinel") ? (t7 = () => {
    setCustomValidity(void 0), setSessionValue(void 0);
  }, $[12] = t7) : t7 = $[12];
  let t8;
  $[13] !== targetOrigin || $[14] !== value ? (t8 = [targetOrigin, value], $[13] = targetOrigin, $[14] = value, $[15] = t8) : t8 = $[15], useEffect(t7, t8);
  let t9;
  $[16] === Symbol.for("react.memo_cache_sentinel") ? (t9 = {
    icon: ResetIcon
  }, $[16] = t9) : t9 = $[16];
  const t10 = customValidity ? t9 : void 0;
  let t11;
  $[17] === Symbol.for("react.memo_cache_sentinel") ? (t11 = {
    zIndex: 1
  }, $[17] = t11) : t11 = $[17];
  let t12;
  $[18] !== sessionValue || $[19] !== targetOrigin || $[20] !== value ? (t12 = sessionValue === void 0 ? new URL(value, targetOrigin).toString() : sessionValue, $[18] = sessionValue, $[19] = targetOrigin, $[20] = value, $[21] = t12) : t12 = $[21];
  let t13;
  return $[22] !== customValidity || $[23] !== fontSize || $[24] !== handleClear || $[25] !== handleKeyDown || $[26] !== padding || $[27] !== prefix || $[28] !== suffix || $[29] !== t10 || $[30] !== t12 ? (t13 = /* @__PURE__ */ jsx(Fragment, { children: /* @__PURE__ */ jsx(TextInput, { clearButton: t10, customValidity, fontSize, onBlur: handleBlur, onClear: handleClear, onChange: handleChange, onKeyDownCapture: handleKeyDown, padding, prefix, style: t11, radius: 2, ref: inputRef, space: padding, suffix, value: t12 }) }), $[22] = customValidity, $[23] = fontSize, $[24] = handleClear, $[25] = handleKeyDown, $[26] = padding, $[27] = prefix, $[28] = suffix, $[29] = t10, $[30] = t12, $[31] = t13) : t13 = $[31], t13;
}
const QRCodeSVG = lazy(() => import("./QRCodeSVG.mjs")), QrCodeLogoSize = 24, QrCodeLogoPadding = 16, QrSize = 224, StyledSanityMonogram = styled(SanityMonogram)`
  position: absolute;
  top: 50%;
  left: 50%;
  transform: translate(-50%, -50%);
  height: ${QrCodeLogoSize}px;
  width: ${QrCodeLogoSize}px;
`, MotionSpinner = motion.create(Spinner), MotionText = motion.create(Text), MotionMonogram = motion.create(StyledSanityMonogram), SharePreviewMenu = memo(function(props) {
  const {
    canToggleSharePreviewAccess,
    canUseSharedPreviewAccess,
    initialUrl,
    previewLocationRoute,
    perspective
  } = props, {
    t
  } = useTranslation(presentationLocaleNamespace), {
    push: pushToast
  } = useToast(), client = useClient({
    apiVersion: API_VERSION
  }), currentUser = useCurrentUser(), [loading, setLoading] = useState(!0), [enabling, setEnabling] = useState(!1), [disabling, setDisabling] = useState(!1), [secret, setSecret] = useState(null), busy = enabling || disabling || loading, url = useMemo(() => secret ? setSecretSearchParams(initialUrl, secret, previewLocationRoute, encodeStudioPerspective(perspective)) : null, [initialUrl, perspective, previewLocationRoute, secret]), [error, setError] = useState(null);
  if (error)
    throw error;
  const handleUnableToToggle = useCallback(() => {
    pushToast({
      closable: !0,
      status: "warning",
      title: t("share-preview-menu.error_toggle-sharing", {
        context: "toggle-sharing"
      })
    });
  }, [pushToast, t]), handleDisableSharing = useCallback(async () => {
    try {
      setDisabling(!0), await disablePreviewAccessSharing(client, "sanity/presentation", typeof window > "u" ? "" : location.href, currentUser?.id), setSecret(null);
    } catch (error_0) {
      setError(error_0);
    } finally {
      setDisabling(!1);
    }
  }, [client, currentUser?.id]), handleEnableSharing = useCallback(async () => {
    try {
      setEnabling(!0);
      const previewUrlSecret = await enablePreviewAccessSharing(client, "sanity/presentation", typeof window > "u" ? "" : location.href, currentUser?.id);
      setSecret(previewUrlSecret.secret);
    } catch (error_1) {
      setError(error_1);
    } finally {
      setEnabling(!1);
    }
  }, [client, currentUser?.id]), handleCopyUrl = useCallback(() => {
    try {
      if (!url)
        throw new Error("No URL to copy");
      navigator.clipboard.writeText(url.toString()), pushToast({
        closable: !0,
        status: "success",
        title: t("share-url.clipboard.status", {
          context: "success"
        })
      });
    } catch (error_2) {
      setError(error_2);
    }
  }, [pushToast, t, url]);
  return useEffect(() => {
    let controller = new AbortController(), usedTags = [];
    async function fetchShareSecret(lastLiveEventId, signal) {
      const {
        result,
        syncTags
      } = await client.fetch(fetchSharedAccessQuery, {}, {
        filterResponse: !1,
        lastLiveEventId,
        tag: "presentation.fetch-shared-access-secret"
      });
      Array.isArray(syncTags) && (usedTags = syncTags), signal.aborted || setSecret(result);
    }
    const subscription = client.live.events().subscribe({
      next: (event) => {
        event.type === "message" && (controller.abort(), controller = new AbortController(), event.tags.some((tag) => usedTags.includes(tag)) && fetchShareSecret(event.id, controller.signal));
      },
      error: setError
    });
    return fetchShareSecret(null, controller.signal).finally(() => setLoading(!1)), () => {
      subscription.unsubscribe(), controller.abort();
    };
  }, [client]), /* @__PURE__ */ jsx(MenuButton, { button: /* @__PURE__ */ jsx(Button, { "aria-label": t("preview-frame.share-button.aria-label"), icon: ShareIcon, mode: "bleed", tooltipProps: null }), id: "share-menu", menu: /* @__PURE__ */ jsx(Menu, { style: {
    maxWidth: 248
  }, padding: canUseSharedPreviewAccess ? void 0 : 0, children: canUseSharedPreviewAccess ? /* @__PURE__ */ jsxs(Fragment, { children: [
    /* @__PURE__ */ jsx("label", { style: {
      cursor: "pointer"
    }, children: /* @__PURE__ */ jsxs(Grid, { columns: 2, rows: 2, gapX: 3, gapY: 1, style: {
      justifyContent: "center",
      alignItems: "center",
      gridTemplateColumns: "min-content 1fr",
      gridTemplateRows: "min-content"
    }, paddingTop: 3, paddingX: 3, children: [
      /* @__PURE__ */ jsx(Tooltip, { animate: !0, content: /* @__PURE__ */ jsx(Text, { size: 1, children: t("share-preview-menu.toggle-button.tooltip", {
        context: url ? "disable" : "enable"
      }) }), fallbackPlacements: ["bottom-start"], placement: "bottom", portal: !0, children: /* @__PURE__ */ jsx(Switch, { checked: enabling || url !== null && !disabling, readOnly: enabling || disabling, indeterminate: loading, onChange: canToggleSharePreviewAccess ? url ? handleDisableSharing : handleEnableSharing : handleUnableToToggle }) }),
      /* @__PURE__ */ jsx(Text, { size: 1, weight: "medium", children: t("share-preview-menu.toggle-button.label", {
        context: "first-line"
      }) }),
      /* @__PURE__ */ jsx("span", {}),
      /* @__PURE__ */ jsx(Text, { muted: !0, size: 1, children: t("share-preview-menu.toggle-button.label", {
        context: "second-line"
      }) })
    ] }) }),
    /* @__PURE__ */ jsx(Box, { padding: 3, paddingTop: 2, children: /* @__PURE__ */ jsxs(Stack, { space: 3, children: [
      /* @__PURE__ */ jsx(Card, { tone: busy || !url ? "transparent" : void 0, style: {
        position: "relative",
        aspectRatio: "1 / 1",
        display: "flex",
        alignItems: "center",
        justifyContent: "center"
      }, children: /* @__PURE__ */ jsx(AnimatePresence, { children: busy ? /* @__PURE__ */ jsx(MotionSpinner, { muted: !0, initial: {
        opacity: 0
      }, animate: {
        opacity: 1
      }, exit: {
        opacity: 0
      } }) : url ? /* @__PURE__ */ jsx(Fragment, { children: /* @__PURE__ */ jsxs(Suspense, { fallback: /* @__PURE__ */ jsx(Spinner, {}), children: [
        /* @__PURE__ */ jsx(QRCodeSVG, { title: t("share-preview-menu.qr-code.title", {
          url: url.toString()
        }), value: url.toString(), size: QrSize, color: "var(--card-fg-color)", logoSize: QrCodeLogoSize + QrCodeLogoPadding }),
        /* @__PURE__ */ jsx(MotionMonogram, { initial: {
          opacity: -0.5
        }, animate: {
          opacity: 1.5
        }, exit: {
          opacity: 0
        } })
      ] }) }) : /* @__PURE__ */ jsx(MotionText, { muted: !0, size: 1, style: {
        maxWidth: "100px",
        textWrap: "pretty",
        textAlign: "center"
      }, initial: {
        opacity: 0
      }, animate: {
        opacity: 1
      }, exit: {
        opacity: 0
      }, children: t("share-preview-menu.qr-code.placeholder") }) }) }),
      /* @__PURE__ */ jsx(Text, { muted: !0, size: 1, children: t("share-preview-menu.qr-code.instructions") })
    ] }) }),
    /* @__PURE__ */ jsx(MenuDivider, {}),
    /* @__PURE__ */ jsx(MenuItem, { disabled: !url || disabling, icon: CopyIcon, onClick: handleCopyUrl, text: t("share-preview-menu.copy-url.text") })
  ] }) : /* @__PURE__ */ jsx(Card, { padding: 2, tone: "caution", radius: 3, children: /* @__PURE__ */ jsx(Text, { style: {
    textWrap: "pretty"
  }, children: t("share-preview-menu.error", {
    context: "missing-grants"
  }) }) }) }), popover: {
    constrainSize: !0,
    placement: "bottom",
    portal: !0
  } });
});
SharePreviewMenu.displayName = "Memo(SharePreviewMenu)";
const PreviewHeaderDefault = (props) => {
  const $ = c(107), {
    canSharePreviewAccess,
    canToggleSharePreviewAccess,
    canUseSharedPreviewAccess,
    iframeRef,
    initialUrl,
    navigatorEnabled,
    onPathChange,
    onRefresh,
    openPopup,
    overlaysConnection,
    presentationRef,
    perspective,
    previewUrl,
    setViewport,
    targetOrigin,
    toggleNavigator,
    toggleOverlay,
    viewport,
    previewUrlRef
  } = props, {
    t
  } = useTranslation(presentationLocaleNamespace);
  let t0;
  $[0] !== setViewport || $[1] !== viewport ? (t0 = () => setViewport(viewport === "desktop" ? "mobile" : "desktop"), $[0] = setViewport, $[1] = viewport, $[2] = t0) : t0 = $[2];
  const toggleViewportSize = t0, previewLocationOrigin = targetOrigin === location.origin ? "" : targetOrigin;
  let t1;
  $[3] !== iframeRef || $[4] !== onRefresh || $[5] !== presentationRef || $[6] !== previewUrl || $[7] !== targetOrigin ? (t1 = () => {
    onRefresh(() => {
      iframeRef.current && (presentationRef.send({
        type: "iframe reload"
      }), Object.assign(iframeRef.current, {
        src: `${targetOrigin}${previewUrl || "/"}`
      }));
    });
  }, $[3] = iframeRef, $[4] = onRefresh, $[5] = presentationRef, $[6] = previewUrl, $[7] = targetOrigin, $[8] = t1) : t1 = $[8];
  const handleRefresh = t1, isLoading = useSelector(presentationRef, _temp$8), isLoaded = useSelector(presentationRef, _temp2$5), isRefreshing = useSelector(presentationRef, _temp3$2), isReloading = useSelector(presentationRef, _temp4$1), overlaysEnabled = useSelector(presentationRef, _temp5$1), previewURL = new URL(previewUrl || "/", targetOrigin), {
    pathname,
    search
  } = withoutSecretSearchParams(previewURL), previewLocationRoute = `${pathname}${search}`, perspectiveToggleTooltipId = useId(), previewUrlBusy = useSelector(previewUrlRef, _temp6);
  let t2;
  $[9] === Symbol.for("react.memo_cache_sentinel") ? (t2 = {
    width: "100%"
  }, $[9] = t2) : t2 = $[9];
  let t3;
  $[10] !== navigatorEnabled || $[11] !== t || $[12] !== toggleNavigator ? (t3 = toggleNavigator && /* @__PURE__ */ jsx(Button, { "aria-label": t("preview-frame.navigator.toggle-button.aria-label"), icon: PanelLeftIcon, mode: "bleed", onClick: toggleNavigator, selected: navigatorEnabled, tooltipProps: {
    content: /* @__PURE__ */ jsx(Text, { size: 1, children: t("preview-frame.navigator.toggle-button.tooltip") }),
    fallbackPlacements: ["bottom-start"],
    placement: "bottom"
  } }), $[10] = navigatorEnabled, $[11] = t, $[12] = toggleNavigator, $[13] = t3) : t3 = $[13];
  let t4;
  $[14] === Symbol.for("react.memo_cache_sentinel") ? (t4 = {
    whiteSpace: "nowrap"
  }, $[14] = t4) : t4 = $[14];
  const t5 = overlaysEnabled ? "disable" : "enable";
  let t6;
  $[15] !== t || $[16] !== t5 ? (t6 = t("preview-frame.overlay.toggle-button.tooltip", {
    context: t5
  }), $[15] = t, $[16] = t5, $[17] = t6) : t6 = $[17];
  let t7;
  $[18] !== t6 ? (t7 = /* @__PURE__ */ jsx(Box, { padding: 1, children: /* @__PURE__ */ jsx(Text, { size: 1, children: t6 }) }), $[18] = t6, $[19] = t7) : t7 = $[19];
  let t8;
  $[20] === Symbol.for("react.memo_cache_sentinel") ? (t8 = /* @__PURE__ */ jsx(Box, { paddingY: 1, children: /* @__PURE__ */ jsx(Hotkeys, { keys: ["Alt"], style: {
    marginTop: -4,
    marginBottom: -4
  } }) }), $[20] = t8) : t8 = $[20];
  let t9;
  $[21] !== t7 ? (t9 = /* @__PURE__ */ jsxs(Flex, { align: "center", style: t4, children: [
    t7,
    t8
  ] }), $[21] = t7, $[22] = t9) : t9 = $[22];
  let t10;
  $[23] === Symbol.for("react.memo_cache_sentinel") ? (t10 = ["bottom-start"], $[23] = t10) : t10 = $[23];
  let t11;
  $[24] === Symbol.for("react.memo_cache_sentinel") ? (t11 = {
    lineHeight: 0,
    borderRadius: 999,
    userSelect: "none"
  }, $[24] = t11) : t11 = $[24];
  const t12 = overlaysEnabled ? "transparent" : void 0;
  let t13;
  $[25] === Symbol.for("react.memo_cache_sentinel") ? (t13 = {
    margin: -4
  }, $[25] = t13) : t13 = $[25];
  const t14 = !isLoaded, t15 = isLoading || overlaysConnection !== "connected";
  let t16;
  $[26] !== overlaysEnabled || $[27] !== t14 || $[28] !== t15 || $[29] !== toggleOverlay ? (t16 = /* @__PURE__ */ jsx("div", { style: t13, children: /* @__PURE__ */ jsx(Switch, { indeterminate: t14, checked: overlaysEnabled, onChange: toggleOverlay, disabled: t15 }) }), $[26] = overlaysEnabled, $[27] = t14, $[28] = t15, $[29] = toggleOverlay, $[30] = t16) : t16 = $[30];
  const t17 = !overlaysEnabled;
  let t18;
  $[31] !== t ? (t18 = t("preview-frame.overlay.toggle-button.text"), $[31] = t, $[32] = t18) : t18 = $[32];
  let t19;
  $[33] !== t17 || $[34] !== t18 ? (t19 = /* @__PURE__ */ jsx(Box, { children: /* @__PURE__ */ jsx(Text, { muted: t17, size: 1, weight: "medium", children: t18 }) }), $[33] = t17, $[34] = t18, $[35] = t19) : t19 = $[35];
  let t20;
  $[36] !== t16 || $[37] !== t19 ? (t20 = /* @__PURE__ */ jsxs(Flex, { align: "center", gap: 3, children: [
    t16,
    t19
  ] }), $[36] = t16, $[37] = t19, $[38] = t20) : t20 = $[38];
  let t21;
  $[39] !== t12 || $[40] !== t20 ? (t21 = /* @__PURE__ */ jsx(Card, { as: "label", flex: "none", padding: 3, marginX: 1, style: t11, tone: t12, children: t20 }), $[39] = t12, $[40] = t20, $[41] = t21) : t21 = $[41];
  let t22;
  $[42] !== t21 || $[43] !== t9 ? (t22 = /* @__PURE__ */ jsx(Tooltip, { animate: !0, content: t9, fallbackPlacements: t10, placement: "bottom", portal: !0, children: t21 }), $[42] = t21, $[43] = t9, $[44] = t22) : t22 = $[44];
  let t23;
  $[45] !== isLoaded || $[46] !== isLoading || $[47] !== isRefreshing || $[48] !== isReloading || $[49] !== t ? (t23 = isLoaded ? t("preview-frame.refresh-button.tooltip") : t("preview-frame.status", {
    context: isLoading ? "loading" : isRefreshing ? "refreshing" : isReloading ? "reloading" : "unknown"
  }), $[45] = isLoaded, $[46] = isLoading, $[47] = isRefreshing, $[48] = isReloading, $[49] = t, $[50] = t23) : t23 = $[50];
  let t24;
  $[51] !== t23 ? (t24 = /* @__PURE__ */ jsx(Text, { size: 1, children: t23 }), $[51] = t23, $[52] = t24) : t24 = $[52];
  let t25;
  $[53] === Symbol.for("react.memo_cache_sentinel") ? (t25 = ["bottom-end"], $[53] = t25) : t25 = $[53];
  let t26;
  $[54] !== t ? (t26 = t("preview-frame.refresh-button.aria-label"), $[54] = t, $[55] = t26) : t26 = $[55];
  const t27 = isReloading || isRefreshing || previewUrlBusy;
  let t28;
  $[56] !== handleRefresh || $[57] !== t26 || $[58] !== t27 ? (t28 = /* @__PURE__ */ jsx(Button, { "aria-label": t26, icon: RefreshIcon, mode: "bleed", loading: t27, onClick: handleRefresh, tooltipProps: null }), $[56] = handleRefresh, $[57] = t26, $[58] = t27, $[59] = t28) : t28 = $[59];
  let t29;
  $[60] !== t24 || $[61] !== t28 ? (t29 = /* @__PURE__ */ jsx(Box, { padding: 1, children: /* @__PURE__ */ jsx(Tooltip, { animate: !0, content: t24, fallbackPlacements: t25, placement: "bottom", portal: !0, children: t28 }) }), $[60] = t24, $[61] = t28, $[62] = t29) : t29 = $[62];
  let t30;
  $[63] !== openPopup || $[64] !== perspective || $[65] !== previewLocationOrigin || $[66] !== previewLocationRoute || $[67] !== targetOrigin ? (t30 = /* @__PURE__ */ jsx(Box, { padding: 1, children: /* @__PURE__ */ jsx(OpenPreviewButton, { openPopup, previewLocationOrigin, previewLocationRoute, perspective, targetOrigin }) }), $[63] = openPopup, $[64] = perspective, $[65] = previewLocationOrigin, $[66] = previewLocationRoute, $[67] = targetOrigin, $[68] = t30) : t30 = $[68];
  let t31;
  $[69] !== onPathChange || $[70] !== previewLocationRoute || $[71] !== previewUrlRef || $[72] !== t29 || $[73] !== t30 ? (t31 = /* @__PURE__ */ jsx(Box, { flex: 1, children: /* @__PURE__ */ jsx(PreviewLocationInput, { previewUrlRef, prefix: t29, onChange: onPathChange, suffix: t30, value: previewLocationRoute }) }), $[69] = onPathChange, $[70] = previewLocationRoute, $[71] = previewUrlRef, $[72] = t29, $[73] = t30, $[74] = t31) : t31 = $[74];
  let t32;
  $[75] !== perspectiveToggleTooltipId ? (t32 = (node) => {
    node?.style.setProperty("view-transition-name", perspectiveToggleTooltipId);
  }, $[75] = perspectiveToggleTooltipId, $[76] = t32) : t32 = $[76];
  const t33 = viewport === "desktop" ? "narrow" : "full";
  let t34;
  $[77] !== t || $[78] !== t33 ? (t34 = t("preview-frame.viewport-button.tooltip", {
    context: t33
  }), $[77] = t, $[78] = t33, $[79] = t34) : t34 = $[79];
  let t35;
  $[80] !== t34 ? (t35 = /* @__PURE__ */ jsx(Text, { size: 1, children: t34 }), $[80] = t34, $[81] = t35) : t35 = $[81];
  let t36;
  $[82] === Symbol.for("react.memo_cache_sentinel") ? (t36 = ["bottom-start"], $[82] = t36) : t36 = $[82];
  let t37;
  $[83] !== t ? (t37 = t("preview-frame.viewport-button.aria-label"), $[83] = t, $[84] = t37) : t37 = $[84];
  const t38 = viewport === "desktop" ? MobileDeviceIcon : DesktopIcon;
  let t39;
  $[85] !== t37 || $[86] !== t38 || $[87] !== toggleViewportSize || $[88] !== viewport ? (t39 = /* @__PURE__ */ jsx(Button, { "data-testid": "preview-viewport-toggle", "data-viewport": viewport, "aria-label": t37, icon: t38, mode: "bleed", onClick: toggleViewportSize, tooltipProps: null }), $[85] = t37, $[86] = t38, $[87] = toggleViewportSize, $[88] = viewport, $[89] = t39) : t39 = $[89];
  let t40;
  $[90] !== t32 || $[91] !== t35 || $[92] !== t39 ? (t40 = /* @__PURE__ */ jsx(Flex, { align: "center", flex: "none", gap: 1, children: /* @__PURE__ */ jsx(Tooltip, { animate: !0, ref: t32, content: t35, fallbackPlacements: t36, placement: "bottom", portal: !0, children: t39 }) }), $[90] = t32, $[91] = t35, $[92] = t39, $[93] = t40) : t40 = $[93];
  let t41;
  $[94] !== canSharePreviewAccess || $[95] !== canToggleSharePreviewAccess || $[96] !== canUseSharedPreviewAccess || $[97] !== initialUrl || $[98] !== perspective || $[99] !== previewLocationRoute ? (t41 = canSharePreviewAccess && /* @__PURE__ */ jsx(Flex, { align: "center", flex: "none", gap: 1, children: /* @__PURE__ */ jsx(SharePreviewMenu, { canToggleSharePreviewAccess, canUseSharedPreviewAccess, previewLocationRoute, initialUrl, perspective }) }), $[94] = canSharePreviewAccess, $[95] = canToggleSharePreviewAccess, $[96] = canUseSharedPreviewAccess, $[97] = initialUrl, $[98] = perspective, $[99] = previewLocationRoute, $[100] = t41) : t41 = $[100];
  let t42;
  return $[101] !== t22 || $[102] !== t3 || $[103] !== t31 || $[104] !== t40 || $[105] !== t41 ? (t42 = /* @__PURE__ */ jsxs(Flex, { align: "center", gap: 1, paddingX: 1, style: t2, children: [
    t3,
    t22,
    t31,
    t40,
    t41
  ] }), $[101] = t22, $[102] = t3, $[103] = t31, $[104] = t40, $[105] = t41, $[106] = t42) : t42 = $[106], t42;
};
function PreviewHeader(props) {
  const $ = c(7), renderDefault = _temp7, HeaderComponent = props.options?.component;
  let t0;
  $[0] !== HeaderComponent || $[1] !== props ? (t0 = HeaderComponent ? /* @__PURE__ */ jsx(HeaderComponent, { ...props, renderDefault }) : renderDefault(props), $[0] = HeaderComponent, $[1] = props, $[2] = t0) : t0 = $[2];
  const header = t0;
  let t1;
  $[3] === Symbol.for("react.memo_cache_sentinel") ? (t1 = {
    position: "relative"
  }, $[3] = t1) : t1 = $[3];
  let t2;
  $[4] === Symbol.for("react.memo_cache_sentinel") ? (t2 = {
    minHeight: 0
  }, $[4] = t2) : t2 = $[4];
  let t3;
  return $[5] !== header ? (t3 = /* @__PURE__ */ jsx(Card, { flex: "none", padding: 2, borderBottom: !0, style: t1, children: /* @__PURE__ */ jsx(Flex, { align: "center", style: t2, children: header }) }), $[5] = header, $[6] = t3) : t3 = $[6], t3;
}
function _temp7(props_0) {
  return /* @__PURE__ */ jsx(PreviewHeaderDefault, { ...props_0 });
}
function _temp$8(state) {
  return state.matches("loading");
}
function _temp2$5(state_0) {
  return state_0.matches("loaded");
}
function _temp3$2(state_1) {
  return state_1.matches({
    loaded: "refreshing"
  });
}
function _temp4$1(state_2) {
  return state_2.matches({
    loaded: "reloading"
  });
}
function _temp5$1(state_3) {
  return state_3.context.visualEditingOverlaysEnabled;
}
function _temp6(state_4) {
  return state_4.hasTag("busy");
}
const MotionFlex = motion.create(Flex), Preview = memo(forwardRef(function(props, forwardedRef) {
  const {
    header,
    initialUrl,
    loadersConnection,
    overlaysConnection,
    perspective,
    viewport,
    vercelProtectionBypass,
    presentationRef,
    previewUrlRef
  } = props, [stablePerspective, setStablePerspective] = useState(null), urlPerspective = encodeStudioPerspective(stablePerspective === null ? perspective : stablePerspective), previewUrl = useMemo(() => {
    const url = new URL(initialUrl);
    return url.searchParams.get(urlSearchParamPreviewPerspective) || url.searchParams.set(urlSearchParamPreviewPerspective, urlPerspective), (vercelProtectionBypass || url.searchParams.get(urlSearchParamVercelProtectionBypass)) && url.searchParams.set(urlSearchParamVercelSetBypassCookie, "samesitenone"), vercelProtectionBypass && !url.searchParams.get(urlSearchParamVercelProtectionBypass) && url.searchParams.set(urlSearchParamVercelProtectionBypass, vercelProtectionBypass), url;
  }, [initialUrl, urlPerspective, vercelProtectionBypass]);
  useEffect(() => {
    loadersConnection === "connected" && setStablePerspective((prev) => prev === null ? perspective : prev);
  }, [loadersConnection, perspective]);
  const {
    t
  } = useTranslation(presentationLocaleNamespace), {
    devMode
  } = usePresentationTool(), prefersReducedMotion = usePrefersReducedMotion(), ref = useRef(null), previewHeader = /* @__PURE__ */ jsx(PreviewHeader, { ...props, iframeRef: ref, options: header });
  useImperativeHandle(forwardedRef, () => ref.current);
  const isLoading = useSelector(presentationRef, (state) => state.matches("loading") || state.matches({
    loaded: "reloading"
  })), [timedOut, setTimedOut] = useState(!1), isRefreshing = useSelector(presentationRef, (state_0) => state_0.matches({
    loaded: "refreshing"
  })), [somethingIsWrong, setSomethingIsWrong] = useState(!1), iframeIsBusy = isLoading || isRefreshing || overlaysConnection === "connecting", handleRetry = useCallback(() => {
    ref.current && (ref.current.src = previewUrl.toString(), presentationRef.send({
      type: "iframe reload"
    }));
  }, [presentationRef, previewUrl]), handleContinueAnyway = useCallback(() => {
    setContinueAnyway(!0);
  }, []), [continueAnyway, setContinueAnyway] = useState(!1), [showOverlaysConnectionStatus, setShowOverlaysConnectionState] = useState(!1);
  useEffect(() => {
    if (!(isLoading || isRefreshing) && (overlaysConnection === "connecting" || overlaysConnection === "reconnecting")) {
      const timeout = setTimeout(() => {
        setShowOverlaysConnectionState(!0);
      }, 5e3);
      return () => clearTimeout(timeout);
    }
  }, [overlaysConnection, isLoading, isRefreshing]), useEffect(() => {
    if (!(isLoading || isRefreshing || !showOverlaysConnectionStatus)) {
      if (overlaysConnection === "connected" && (setSomethingIsWrong(!1), setShowOverlaysConnectionState(!1), setTimedOut(!1), setContinueAnyway(!1)), overlaysConnection === "connecting") {
        const timeout_0 = setTimeout(() => {
          setTimedOut(!0), console.error("Unable to connect to visual editing. Make sure you've setup '@sanity/visual-editing' correctly");
        }, MAX_TIME_TO_OVERLAYS_CONNECTION);
        return () => clearTimeout(timeout_0);
      }
      if (overlaysConnection === "reconnecting") {
        const timeout_1 = setTimeout(() => {
          setTimedOut(!0), setSomethingIsWrong(!0);
        }, MAX_TIME_TO_OVERLAYS_CONNECTION);
        return () => clearTimeout(timeout_1);
      }
    }
  }, [isLoading, overlaysConnection, isRefreshing, showOverlaysConnectionStatus]);
  const onIFrameLoad = useCallback(() => {
    presentationRef.send({
      type: "iframe loaded"
    });
  }, [presentationRef]), preventIframeInteraction = useMemo(() => (isLoading || overlaysConnection === "connecting" && !isRefreshing) && !continueAnyway, [continueAnyway, isLoading, isRefreshing, overlaysConnection]), canUseViewTransition = useSyncExternalStore(
    // eslint-disable-next-line no-empty-function
    useCallback(() => () => {
    }, []),
    () => CSS.supports("(view-transition-name: test)")
  ), iframeAnimations = useMemo(() => [
    preventIframeInteraction ? "background" : "active",
    isLoading ? "reloading" : "idle",
    // If CSS View Transitions are supported, then transition iframe viewport dimensions with that instead of Motion
    canUseViewTransition ? "" : viewport,
    showOverlaysConnectionStatus && !continueAnyway ? "timedOut" : ""
  ], [canUseViewTransition, continueAnyway, isLoading, preventIframeInteraction, showOverlaysConnectionStatus, viewport]), [currentViewport, setCurrentViewport] = useState(viewport), [iframeStyle, setIframeStyle] = useState(iframeVariants[viewport]);
  useEffect(() => {
    if (canUseViewTransition && viewport !== currentViewport) {
      const update = () => {
        setCurrentViewport(viewport), setIframeStyle(iframeVariants[viewport]);
      };
      !prefersReducedMotion && "startViewTransition" in document && typeof document.startViewTransition == "function" ? document.startViewTransition({
        update: () => flushSync(() => update()),
        types: ["sanity-iframe-viewport"]
      }) : update();
    }
  }, [canUseViewTransition, prefersReducedMotion, currentViewport, viewport]);
  const toast = useToast(), allowOrigins = useAllowPatterns(previewUrlRef), [checkOrigin, setCheckOrigin] = useState(!1), [reportedMismatches] = useState(/* @__PURE__ */ new Set()), reportMismatchingOrigin = useEffectEvent((reportedOrigin) => {
    if (allowOrigins.some((allow) => allow.test(reportedOrigin))) {
      setCheckOrigin(reportedOrigin);
      return;
    }
    reportedMismatches.has(reportedOrigin) || (reportedMismatches.add(reportedOrigin), console.warn("Visual Editing is here but misconfigured", {
      reportedOrigin
    }), toast.push({
      closable: !0,
      id: `presentation-iframe-origin-mismatch-${reportedOrigin}`,
      status: "error",
      duration: 1 / 0,
      title: t("preview-frame.configuration.error.title"),
      description: /* @__PURE__ */ jsx(Translate, { t, i18nKey: "preview-frame.configuration.error.description", components: {
        Code: "code"
      }, values: {
        targetOrigin: previewUrl.origin,
        reportedOrigin
      } })
    }));
  }), navigate = usePresentationNavigate(), navigateEvent = useEffectEvent((url_0) => {
    if (!checkOrigin) return;
    const nextUrl = new URL(url_0, checkOrigin);
    navigate(`${checkOrigin}${nextUrl.pathname}${nextUrl.search}${nextUrl.hash}`);
  });
  return useEffect(() => {
    if (!checkOrigin)
      return;
    const target = ref.current?.contentWindow;
    if (!target)
      return;
    const controller = createController({
      targetOrigin: checkOrigin
    });
    controller.addTarget(target);
    const comlink = controller.createChannel({
      name: "presentation",
      heartbeat: !0,
      connectTo: "visual-editing"
    }, createConnectionMachine().provide({
      actors: createCompatibilityActors()
    }));
    comlink.on("visual-editing/navigate", (data) => {
      navigateEvent(data.url);
    });
    const stop = comlink.start();
    return () => {
      stop(), controller.destroy();
    };
  }, [checkOrigin]), useEffect(() => {
    if (overlaysConnection === "connecting" || overlaysConnection === "reconnecting") {
      const interval = setInterval(() => {
        ref.current?.contentWindow?.postMessage(
          {
            domain: "sanity/channels",
            from: "presentation",
            type: "presentation/status"
          },
          /**
           * The targetOrigin is set to '*' intentionally here, as we need to find out if the iframe is misconfigured and has the wrong origin
           */
          "*"
        );
      }, 1e3), controller_0 = new AbortController();
      return window.addEventListener("message", ({
        data: data_0
      }) => {
        data_0 && typeof data_0 == "object" && "domain" in data_0 && data_0.domain === "sanity/channels" && "type" in data_0 && data_0.type === "visual-editing/status" && "data" in data_0 && typeof data_0.data == "object" && data_0.data && "origin" in data_0.data && typeof data_0.data.origin == "string" && reportMismatchingOrigin(data_0.data.origin);
      }, {
        signal: controller_0.signal
      }), () => {
        controller_0.abort(), clearInterval(interval);
      };
    }
  }, [overlaysConnection, timedOut]), /* @__PURE__ */ jsx(MotionConfig, { transition: prefersReducedMotion ? {
    duration: 0
  } : void 0, children: /* @__PURE__ */ jsxs(TooltipDelayGroupProvider, { children: [
    previewHeader,
    /* @__PURE__ */ jsx(Card, { flex: 1, tone: "transparent", children: /* @__PURE__ */ jsxs(Flex, { align: "center", height: "fill", justify: "center", padding: (canUseViewTransition ? currentViewport : viewport) === "desktop" ? 0 : 2, sizing: "border", style: {
      position: "relative",
      cursor: iframeIsBusy ? "wait" : void 0
    }, children: [
      /* @__PURE__ */ jsx(AnimatePresence, { children: !somethingIsWrong && !isLoading && !isRefreshing && // viewport, // using CSS View Transitions instead of framer motion to drive this
      showOverlaysConnectionStatus && !continueAnyway ? /* @__PURE__ */ jsx(MotionFlex, { initial: "initial", animate: "animate", exit: "exit", variants: spinnerVariants, justify: "center", align: "center", style: {
        inset: "0",
        position: "absolute",
        backdropFilter: timedOut ? "blur(16px) saturate(0.5) grayscale(0.5)" : "blur(2px)",
        transition: "backdrop-filter 0.2s ease-in-out",
        // @TODO Because of Safari we have to do this
        WebkitBackdropFilter: timedOut ? "blur(16px) saturate(0.5) grayscale(0.5)" : "blur(2px)",
        WebkitTransition: "-webkit-backdrop-filter 0.2s ease-in-out",
        zIndex: 1
      }, children: /* @__PURE__ */ jsxs(Flex, { style: {
        ...sizes[viewport]
      }, justify: "center", align: "center", direction: "column", gap: 4, children: [
        timedOut && /* @__PURE__ */ jsx(Button, { disabled: !0, mode: "ghost", text: t("preview-frame.continue-button.text"), style: {
          opacity: 0
        } }),
        /* @__PURE__ */ jsx(Card, { radius: 2, tone: timedOut ? "caution" : "inherit", padding: 4, shadow: 1, children: /* @__PURE__ */ jsxs(Flex, { justify: "center", align: "center", direction: "column", gap: 4, children: [
          /* @__PURE__ */ jsx(Spinner, { muted: !0 }),
          /* @__PURE__ */ jsx(Text, { muted: !0, size: 1, children: timedOut ? t("preview-frame.status", {
            context: "timeout"
          }) : t("preview-frame.status", {
            context: "connecting"
          }) })
        ] }) }),
        timedOut && /* @__PURE__ */ jsx(
          Button,
          {
            tone: "critical",
            onClick: handleContinueAnyway,
            text: t("preview-frame.continue-button.text")
          }
        )
      ] }) }) : (isLoading || overlaysConnection === "connecting" && !isRefreshing) && !continueAnyway ? /* @__PURE__ */ jsx(MotionFlex, { initial: "initial", animate: "animate", exit: "exit", variants: spinnerVariants, justify: "center", align: "center", style: {
        inset: "0",
        position: "absolute"
        // boxShadow: '0 0 0 1px var(--card-shadow-outline-color)',
      }, children: /* @__PURE__ */ jsxs(Flex, { style: {
        ...sizes[viewport]
      }, justify: "center", align: "center", direction: "column", gap: 4, children: [
        /* @__PURE__ */ jsx(Spinner, { muted: !0 }),
        /* @__PURE__ */ jsx(Text, { muted: !0, size: 1, children: t("preview-frame.status", {
          context: "loading"
        }) })
      ] }) }) : somethingIsWrong && !continueAnyway ? /* @__PURE__ */ jsx(MotionFlex, { initial: "initial", animate: "animate", exit: "exit", variants: errorVariants, justify: "center", align: "center", style: {
        background: "var(--card-bg-color)",
        inset: "0",
        position: "absolute"
      }, children: /* @__PURE__ */ jsx(ErrorCard, { flex: 1, message: t("preview-frame.connection.error.text"), onRetry: handleRetry, onContinueAnyway: handleContinueAnyway, children: devMode && /* @__PURE__ */ jsxs(Fragment, { children: [
        overlaysConnection !== "connected" && /* @__PURE__ */ jsx(Card, { padding: 3, radius: 2, tone: "critical", children: /* @__PURE__ */ jsxs(Stack, { space: 3, children: [
          /* @__PURE__ */ jsx(Label, { muted: !0, size: 0, children: t("preview-frame.overlay.connection-status.label") }),
          /* @__PURE__ */ jsx(Code, { size: 1, children: t("channel.status", {
            context: overlaysConnection
          }) })
        ] }) }),
        loadersConnection !== "connected" && /* @__PURE__ */ jsx(Card, { padding: 3, radius: 2, tone: "critical", children: /* @__PURE__ */ jsxs(Stack, { space: 3, children: [
          /* @__PURE__ */ jsx(Label, { muted: !0, size: 0, children: t("preview-frame.loader.connection-status.label") }),
          /* @__PURE__ */ jsx(Code, { size: 1, children: t("channel.status", {
            context: loadersConnection
          }) })
        ] }) })
      ] }) }) }) : null }),
      /* @__PURE__ */ jsx(IFrame, { animate: iframeAnimations, initial: ["background"], onLoad: onIFrameLoad, preventClick: preventIframeInteraction, ref, src: previewUrl.toString(), style: iframeStyle, variants: iframeVariants })
    ] }) })
  ] }) });
}));
Preview.displayName = "Memo(ForwardRef(Preview))";
const sizes = {
  desktop: {
    width: "100%",
    height: "100%"
  },
  mobile: {
    width: 375,
    height: 650
  }
}, spinnerVariants = {
  initial: {
    opacity: 1
  },
  animate: {
    opacity: [0, 0, 1]
  },
  exit: {
    opacity: [1, 0, 0]
  }
}, errorVariants = {
  initial: {
    opacity: 1
  },
  animate: {
    opacity: [0, 0, 1]
  },
  exit: {
    opacity: [1, 0, 0]
  }
}, iframeVariants = {
  desktop: {
    ...sizes.desktop,
    boxShadow: "0 0 0 0px var(--card-border-color)"
  },
  mobile: {
    ...sizes.mobile,
    boxShadow: "0 0 0 1px var(--card-border-color)"
  },
  background: {
    opacity: 0,
    scale: 1
  },
  idle: {
    scale: 1
  },
  reloading: {
    scale: [1, 1, 1, 0.98]
  },
  active: {
    opacity: [0, 0, 1],
    scale: 1
  },
  timedOut: {
    opacity: [0, 0, 1]
  }
};
function defineWarnOnce() {
  let warned = !1;
  return (...args) => {
    warned || (console.warn(...args), warned = !0);
  };
}
const warnOnceAboutCrossDatasetReference = defineWarnOnce();
function useDocumentsOnPage(perspective, frameStateRef) {
  const $ = c(11);
  validateApiPerspective(perspective);
  let t0;
  $[0] === Symbol.for("react.memo_cache_sentinel") ? (t0 = {}, $[0] = t0) : t0 = $[0];
  const [published, setPublished] = useState(t0);
  let t1;
  $[1] === Symbol.for("react.memo_cache_sentinel") ? (t1 = {}, $[1] = t1) : t1 = $[1];
  const [previewDrafts, setPreviewDrafts] = useState(t1), urlRef = useRef("");
  let t2;
  $[2] !== frameStateRef ? (t2 = (key, perspective_0, t32) => {
    const documents = (t32 === void 0 ? [] : t32).filter(_temp$7);
    (perspective_0 === "published" ? setPublished : setPreviewDrafts)((cache) => {
      const next = {};
      for (const document2 of documents)
        next[document2._id] = document2;
      if (urlRef.current !== frameStateRef.current.url)
        return urlRef.current = frameStateRef.current.url, {
          [key]: next
        };
      const prev = cache[key];
      return isEqual(prev, next) ? cache : {
        ...cache,
        [key]: next
      };
    });
  }, $[2] = frameStateRef, $[3] = t2) : t2 = $[3];
  const setDocumentsOnPage = t2, keyedCache = perspective === "published" ? published : previewDrafts;
  let t3;
  $[4] !== keyedCache ? (t3 = Object.values(keyedCache).reduce(_temp2$4, {}), $[4] = keyedCache, $[5] = t3) : t3 = $[5];
  const uniqueDocuments = t3;
  let t4;
  $[6] !== uniqueDocuments ? (t4 = Object.values(uniqueDocuments), $[6] = uniqueDocuments, $[7] = t4) : t4 = $[7];
  const documentsOnPage = t4;
  let t5;
  return $[8] !== documentsOnPage || $[9] !== setDocumentsOnPage ? (t5 = [documentsOnPage, setDocumentsOnPage], $[8] = documentsOnPage, $[9] = setDocumentsOnPage, $[10] = t5) : t5 = $[10], t5;
}
function _temp2$4(acc, cache_0) {
  return Object.values(cache_0).forEach((doc) => {
    acc[doc._id] = doc;
  }), acc;
}
function _temp$7(sourceDocument) {
  return "_projectId" in sourceDocument && sourceDocument._projectId ? (warnOnceAboutCrossDatasetReference("Cross dataset references are not supported yet, ignoring source document", sourceDocument), !1) : sourceDocument;
}
function fnOrObj(arg, context) {
  return arg instanceof Function ? arg(context) : arg;
}
function getQueryFromResult(resolver, context) {
  if (resolver.resolve) {
    const filter = resolver.resolve(context)?.filter;
    return filter ? `// groq
*[${filter}][0]{_id, _type}` : void 0;
  }
  return "type" in resolver ? `// groq
*[_type == "${resolver.type}"][0]{_id, _type}` : `// groq
*[${fnOrObj(resolver.filter, context)}][0]{_id, _type}`;
}
function getParamsFromResult(resolver, context) {
  return resolver.resolve ? resolver.resolve(context)?.params ?? context.params : "type" in resolver ? {} : fnOrObj(resolver.params, context) ?? context.params;
}
function getRouteContext(route, url) {
  const routes = Array.isArray(route) ? route : [route];
  for (route of routes) {
    let {
      origin: origin2
    } = url, path = route;
    if (typeof route == "string")
      try {
        const absolute = new URL(route);
        if (absolute.origin !== origin2) continue;
        origin2 = absolute.origin, path = absolute.pathname;
      } catch {
      }
    try {
      const result = match(path, {
        decode: decodeURIComponent
      })(url.pathname);
      if (result) {
        const {
          params,
          path: path2
        } = result;
        return {
          origin: origin2,
          params,
          path: path2
        };
      }
    } catch (e) {
      throw new Error(`"${route}" is not a valid route pattern`, {
        cause: e
      });
    }
  }
}
function useMainDocument(props) {
  const $ = c(22), {
    navigate,
    navigationHistory,
    path,
    targetOrigin,
    resolvers: t0
  } = props;
  let t1;
  $[0] !== t0 ? (t1 = t0 === void 0 ? [] : t0, $[0] = t0, $[1] = t1) : t1 = $[1];
  const resolvers = t1, {
    state: routerState
  } = useRouter(), {
    perspectiveStack
  } = usePerspective();
  let t2;
  $[2] === Symbol.for("react.memo_cache_sentinel") ? (t2 = {
    apiVersion: API_VERSION
  }, $[2] = t2) : t2 = $[2];
  const client = useClient(t2);
  let t3;
  $[3] !== path || $[4] !== routerState ? (t3 = path || routerState._searchParams?.find(_temp$6)?.[1] || "", $[3] = path, $[4] = routerState, $[5] = t3) : t3 = $[5];
  const relativeUrl = t3, [mainDocumentState, setMainDocumentState] = useState(void 0), mainDocumentIdRef = useRef(void 0);
  let t4;
  $[6] !== navigate || $[7] !== navigationHistory ? (t4 = (doc, url) => {
    (!doc || mainDocumentIdRef.current !== doc._id) && (setMainDocumentState({
      document: doc,
      path: url.pathname
    }), mainDocumentIdRef.current = doc?._id, navigationHistory.at(-1)?.id === navigationHistory.at(-2)?.id && navigate?.({
      state: {
        id: doc?._id,
        type: doc?._type
      }
    }));
  }, $[6] = navigate, $[7] = navigationHistory, $[8] = t4) : t4 = $[8];
  const handleResponse = useEffectEvent(t4);
  let t5;
  $[9] !== client || $[10] !== handleResponse || $[11] !== perspectiveStack || $[12] !== relativeUrl || $[13] !== resolvers || $[14] !== targetOrigin ? (t5 = () => {
    const url_0 = new URL(relativeUrl, targetOrigin);
    if (resolvers.length) {
      let result;
      for (const resolver of resolvers) {
        const context = getRouteContext(resolver.route, url_0);
        if (context) {
          result = {
            context,
            resolver
          };
          break;
        }
      }
      if (result) {
        const query = getQueryFromResult(result.resolver, result.context), params = getParamsFromResult(result.resolver, result.context);
        if (query) {
          const controller = new AbortController(), options = {
            perspective: perspectiveStack,
            signal: controller.signal,
            tag: "use-main-document"
          };
          return client.fetch(query, params, options).then((doc_0) => handleResponse(doc_0, url_0)).catch((e) => {
            e instanceof Error && e.name === "AbortError" || (setMainDocumentState({
              document: void 0,
              path: url_0.pathname
            }), mainDocumentIdRef.current = void 0);
          }), () => {
            controller.abort();
          };
        }
      }
    }
    setMainDocumentState(void 0), mainDocumentIdRef.current = void 0;
  }, $[9] = client, $[10] = handleResponse, $[11] = perspectiveStack, $[12] = relativeUrl, $[13] = resolvers, $[14] = targetOrigin, $[15] = t5) : t5 = $[15];
  let t6;
  return $[16] !== client || $[17] !== perspectiveStack || $[18] !== relativeUrl || $[19] !== resolvers || $[20] !== targetOrigin ? (t6 = [client, perspectiveStack, relativeUrl, resolvers, targetOrigin], $[16] = client, $[17] = perspectiveStack, $[18] = relativeUrl, $[19] = resolvers, $[20] = targetOrigin, $[21] = t6) : t6 = $[21], useEffect(t5, t6), mainDocumentState;
}
function _temp$6(t0) {
  const [key] = t0;
  return key === "preview";
}
const RE_SEGMENT_WITH_INDEX = /^([\w-]+):(0|[1-9][0-9]*)$/, RE_SEGMENT_WITH_TUPLE = /^([\w-]+):([0-9]+),([0-9]+)$/, RE_SEGMENT_WITH_KEY = /^([\w-]+):([\w-]+)$/;
function urlStringToPath(str) {
  const path = [];
  for (const segment of str.split(".")) {
    const withIndex = RE_SEGMENT_WITH_INDEX.exec(segment);
    if (withIndex) {
      path.push(withIndex[1], Number(withIndex[2]));
      continue;
    }
    const withTuple = RE_SEGMENT_WITH_TUPLE.exec(segment);
    if (withTuple) {
      path.push(withTuple[1], [Number(withTuple[2]), Number(withTuple[3])]);
      continue;
    }
    const withKey = RE_SEGMENT_WITH_KEY.exec(segment);
    if (withKey) {
      path.push(withKey[1], {
        _key: withKey[2]
      });
      continue;
    }
    path.push(segment);
  }
  return path;
}
function parseId(rawId) {
  if (rawId === void 0)
    return;
  const segments = decodeURIComponent(rawId)?.split(".");
  return segments[0] === "drafts" && segments.shift(), segments.join(".");
}
function parsePath(rawPath) {
  if (rawPath !== void 0)
    return studioPath.toString(urlStringToPath(decodeURIComponent(rawPath)));
}
function parseRouterState(state) {
  return {
    id: parseId(state.id),
    path: parsePath(state.path),
    type: state.type
  };
}
function pruneObject(obj) {
  return Object.fromEntries(Object.entries(obj).filter(([, value]) => value !== void 0 && value !== "" && value !== null));
}
const exhaustiveTupleOf = () => (array) => array, maintainOnDocumentChange = exhaustiveTupleOf()(["perspective", "preview", "viewport"]), maintainOnSameDocument = exhaustiveTupleOf()(["changesInspectorTab", "comment", "inspect", "instruction", "parentRefPath", "path", "pathKey", "rev", "since", "template", "templateParams", "version", "view"]);
function useParams({
  initialPreviewUrl,
  routerNavigate,
  routerState,
  routerSearchParams,
  frameStateRef
}) {
  const params = useMemo(() => {
    const {
      id,
      path,
      type
    } = parseRouterState(routerState);
    return {
      id,
      type,
      path,
      preview: routerSearchParams.preview || initialPreviewUrl.toString(),
      perspective: routerSearchParams.perspective,
      viewport: routerSearchParams.viewport,
      inspect: routerSearchParams.inspect,
      parentRefPath: routerSearchParams.parentRefPath,
      rev: routerSearchParams.rev,
      since: routerSearchParams.since,
      template: routerSearchParams.template,
      templateParams: routerSearchParams.templateParams,
      view: routerSearchParams.view,
      // assist
      pathKey: routerSearchParams.pathKey,
      instruction: routerSearchParams.instruction,
      // comments
      comment: routerSearchParams.comment,
      changesInspectorTab: routerSearchParams.changesInspectorTab
    };
  }, [routerState, routerSearchParams, initialPreviewUrl]), structureParams = useMemo(() => pruneObject({
    inspect: params.inspect,
    path: params.path,
    parentRefPath: params.parentRefPath,
    rev: params.rev,
    since: params.since,
    template: params.template,
    templateParams: params.templateParams,
    view: params.view,
    // assist
    pathKey: params.pathKey,
    instruction: params.instruction,
    // comments
    comment: params.comment,
    changesInspectorTab: params.changesInspectorTab
  }), [params.changesInspectorTab, params.comment, params.inspect, params.instruction, params.path, params.pathKey, params.parentRefPath, params.rev, params.since, params.template, params.templateParams, params.view]), searchParams = useMemo(() => pruneObject({
    perspective: params.perspective,
    preview: params.preview,
    viewport: params.viewport
  }), [params.perspective, params.preview, params.viewport]), routerStateRef = useRef(routerState);
  useLayoutEffect(() => {
    routerStateRef.current = routerState;
  }, [routerState]);
  const [navigationHistory, setNavigationHistory] = useState([routerState]), isSameDocument = useCallback(({
    id: id_0,
    type: type_0
  }) => {
    const {
      current
    } = routerStateRef;
    return id_0 === current.id && type_0 === current.type;
  }, []), navigate = useCallback((options) => {
    const {
      state,
      params: params_0,
      replace = !1
    } = options;
    state?.id && (state.id = getPublishedId(state.id));
    const {
      current: current_0
    } = routerStateRef, currentState = {
      id: current_0.id,
      type: current_0.type,
      path: current_0.path
    }, currentParams = Object.fromEntries(current_0._searchParams || []), nextState = state || currentState, nextParams = {
      ...[...maintainOnDocumentChange, ...isSameDocument(nextState) ? maintainOnSameDocument : []].reduce((acc, key) => (acc[key] = currentParams[key], acc), {}),
      ...params_0
    }, nextRouterState = {
      ...nextState,
      _searchParams: Object.entries(nextParams).reduce((acc_0, [key_0, value]) => [...acc_0, [key_0, value]], [])
    };
    setNavigationHistory((prev) => [...prev, nextRouterState]), routerNavigate(nextRouterState, {
      replace
    });
  }, [isSameDocument, routerNavigate]);
  return {
    isSameDocument,
    navigate,
    navigationHistory,
    params,
    searchParams,
    structureParams
  };
}
const usePopups = (controller) => {
  const $ = c(10), [popups, setPopups] = useState(_temp$5);
  let t0;
  $[0] === Symbol.for("react.memo_cache_sentinel") ? (t0 = (url) => {
    const source = window.open(url, "_blank");
    source && setPopups((prev) => new Set(prev).add(source));
  }, $[0] = t0) : t0 = $[0];
  const open = t0;
  let t1, t2;
  $[1] !== controller || $[2] !== popups ? (t1 = () => {
    const unsubs = [];
    if (popups.size && controller)
      for (const source_0 of popups)
        source_0 && "closed" in source_0 && !source_0.closed && unsubs.push(controller.addTarget(source_0));
    return () => {
      unsubs.forEach(_temp2$3);
    };
  }, t2 = [controller, popups], $[1] = controller, $[2] = popups, $[3] = t1, $[4] = t2) : (t1 = $[3], t2 = $[4]), useEffect(t1, t2);
  let t3, t4;
  $[5] !== popups ? (t3 = () => {
    if (popups.size) {
      const interval = setInterval(() => {
        const closed = /* @__PURE__ */ new Set();
        for (const source_1 of popups)
          source_1 && "closed" in source_1 && source_1.closed && closed.add(source_1);
        closed.size && setPopups((prev_0) => {
          const next = new Set(prev_0);
          for (const source_2 of closed)
            next.delete(source_2);
          return next;
        });
      }, POPUP_CHECK_INTERVAL);
      return () => {
        clearInterval(interval);
      };
    }
  }, t4 = [popups], $[5] = popups, $[6] = t3, $[7] = t4) : (t3 = $[6], t4 = $[7]), useEffect(t3, t4);
  let t5;
  return $[8] !== popups ? (t5 = {
    popups,
    open
  }, $[8] = popups, $[9] = t5) : t5 = $[9], t5;
};
function _temp$5() {
  return /* @__PURE__ */ new Set();
}
function _temp2$3(unsub) {
  return unsub();
}
function usePresentationPerspective() {
  const {
    perspectiveStack,
    selectedPerspectiveName: t0,
    selectedReleaseId
  } = usePerspective();
  return selectedReleaseId ? perspectiveStack : t0 === void 0 ? "drafts" : t0;
}
function useStatus() {
  const $ = c(4);
  let t0;
  $[0] === Symbol.for("react.memo_cache_sentinel") ? (t0 = /* @__PURE__ */ new Map(), $[0] = t0) : t0 = $[0];
  const [statusMap, setStatusMap] = useState(t0);
  let t1;
  bb0: {
    const values = Array.from(statusMap.values());
    if (values.find(_temp$4)) {
      t1 = "connected";
      break bb0;
    }
    const handshaking = values.filter(_temp2$2);
    if (handshaking.length) {
      t1 = handshaking.some(_temp3$1) ? "connecting" : "reconnecting";
      break bb0;
    }
    t1 = "idle";
  }
  const memoStatus = t1;
  let t2;
  $[1] === Symbol.for("react.memo_cache_sentinel") ? (t2 = (event) => {
    setStatusMap((prev) => {
      const next = new Map(prev);
      if (event.status === "disconnected")
        next.delete(event.connection);
      else {
        const hasConnected_0 = next.get(event.connection)?.hasConnected || event.status === "connected", status_1 = event.status === "handshaking" ? "connecting" : event.status;
        next.set(event.connection, {
          status: status_1,
          hasConnected: hasConnected_0
        });
      }
      return next;
    });
  }, $[1] = t2) : t2 = $[1];
  const setStatusFromEvent = t2;
  let t3;
  return $[2] !== memoStatus ? (t3 = [memoStatus, setStatusFromEvent], $[2] = memoStatus, $[3] = t3) : t3 = $[3], t3;
}
function _temp3$1(t0) {
  const {
    hasConnected
  } = t0;
  return !hasConnected;
}
function _temp2$2(t0) {
  const {
    status: status_0
  } = t0;
  return status_0 === "connecting";
}
function _temp$4(t0) {
  const {
    status
  } = t0;
  return status === "connected";
}
const LiveQueries = lazy(() => import("./LiveQueries.mjs")), PostMessageDocuments = lazy(() => import("./PostMessageDocuments.mjs")), PostMessageRefreshMutations = lazy(() => import("./PostMessageRefreshMutations.mjs")), PostMessagePerspective = lazy(() => import("./PostMessagePerspective.mjs")), PostMessagePreviewSnapshots = lazy(() => import("./PostMessagePreviewSnapshots.mjs")), PostMessageSchema = lazy(() => import("./PostMessageSchema.mjs")), PostMessageTelemetry = lazy(() => import("./PostMessageTelemetry.mjs")), Container = styled(Flex)`
  overflow-x: auto;
`;
function PresentationTool(props) {
  const {
    canToggleSharePreviewAccess,
    canUseSharedPreviewAccess,
    tool,
    vercelProtectionBypass,
    initialPreviewUrl,
    previewUrlRef
  } = props, allowOrigins = useAllowPatterns(previewUrlRef), targetOrigin = useTargetOrigin(previewUrlRef), components = tool.options?.components, name = tool.name || DEFAULT_TOOL_NAME, {
    unstable_navigator,
    unstable_header
  } = components || {}, {
    navigate: routerNavigate,
    state: routerState
  } = useRouter(), routerSearchParams = useUnique(Object.fromEntries(routerState._searchParams || [])), perspective = usePresentationPerspective(), canSharePreviewAccess = useSelector(previewUrlRef, (state) => state.context.previewMode?.shareAccess !== !1), [devMode] = useState(() => {
    const option = tool.options?.devMode;
    return typeof option == "function" ? option() : typeof option == "boolean" ? option : typeof window < "u" && window.location.hostname === "localhost";
  }), iframeRef = useRef(null), [controller, setController] = useState(), [visualEditingComlink, setVisualEditingComlink] = useState(null), frameStateRef = useRef({
    title: void 0,
    url: void 0
  }), {
    isSameDocument,
    navigate,
    navigationHistory,
    params,
    searchParams,
    structureParams
  } = useParams({
    initialPreviewUrl,
    routerNavigate,
    routerState,
    routerSearchParams,
    frameStateRef
  }), presentationRef = useActorRef(presentationMachine), viewport = useMemo(() => params.viewport ? "mobile" : "desktop", [params.viewport]), [documentsOnPage, setDocumentsOnPage] = useDocumentsOnPage(perspective, frameStateRef), projectId = useProjectId(), dataset = useDataset(), mainDocumentState = useMainDocument({
    navigate,
    navigationHistory,
    path: params.preview,
    targetOrigin,
    resolvers: tool.options?.resolve?.mainDocuments
  }), [overlaysConnection, setOverlaysConnection] = useStatus(), [loadersConnection, setLoadersConnection] = useStatus(), [previewKitConnection, setPreviewKitConnection] = useStatus(), {
    open: handleOpenPopup
  } = usePopups(controller), isLoading = useSelector(presentationRef, (state_0) => state_0.matches("loading"));
  useEffect(() => {
    const target = iframeRef.current?.contentWindow;
    if (!target || isLoading) return;
    const controller_0 = createController({
      targetOrigin
    });
    return controller_0.addTarget(target), setController(controller_0), () => {
      controller_0.destroy(), setController(void 0);
    };
  }, [targetOrigin, isLoading]);
  const handleNavigate = useEffectEvent((options) => {
    navigate(options);
  });
  useEffect(() => {
    if (!controller) return;
    const comlink = controller.createChannel({
      name: "presentation",
      heartbeat: !0,
      connectTo: "visual-editing"
    }, createConnectionMachine().provide({
      actors: createCompatibilityActors()
    }));
    comlink.on("visual-editing/focus", (data) => {
      "id" in data && handleNavigate({
        state: {
          type: data.type,
          id: data.id,
          path: data.path
        }
      });
    }), comlink.on("visual-editing/navigate", (data_0) => {
      const {
        title
      } = data_0;
      let url = data_0.url;
      if (!url.startsWith("http"))
        try {
          url = new URL(url, targetOrigin).toString();
        } catch {
        }
      if (frameStateRef.current.url !== url)
        try {
          const [urlWithoutSearch, search] = url.split("?"), searchParams_0 = new URLSearchParams(search);
          searchParams_0.delete(urlSearchParamVercelProtectionBypass), searchParams_0.delete(urlSearchParamVercelSetBypassCookie), handleNavigate({
            params: {
              preview: `${urlWithoutSearch}${searchParams_0.size > 0 ? "?" : ""}${searchParams_0}`
            }
          });
        } catch {
          handleNavigate({
            params: {
              preview: url
            }
          });
        }
      frameStateRef.current = {
        title,
        url
      };
    }), comlink.on("visual-editing/meta", (data_1) => {
      frameStateRef.current.title = data_1.title;
    }), comlink.on("visual-editing/toggle", (data_2) => {
      presentationRef.send({
        type: "toggle visual editing overlays",
        enabled: data_2.enabled
      });
    }), comlink.on("visual-editing/documents", (data_3) => {
      setDocumentsOnPage(
        "visual-editing",
        // oxlint-disable-next-line no-explicit-any
        data_3.perspective,
        data_3.documents
      );
    }), comlink.on("visual-editing/refreshing", (data_4) => {
      data_4.source === "manual" ? clearTimeout(refreshRef.current) : data_4.source === "mutation" && presentationRef.send({
        type: "iframe refresh"
      });
    }), comlink.on("visual-editing/refreshed", () => {
      presentationRef.send({
        type: "iframe loaded"
      });
    }), comlink.onStatus(setOverlaysConnection);
    const stop = comlink.start();
    return setVisualEditingComlink(comlink), () => {
      stop(), setVisualEditingComlink(null);
    };
  }, [controller, presentationRef, setDocumentsOnPage, setOverlaysConnection, targetOrigin]), useEffect(() => {
    if (!controller) return;
    const comlink_0 = controller.createChannel({
      name: "presentation",
      connectTo: "preview-kit",
      heartbeat: !0
    }, createConnectionMachine().provide({
      actors: createCompatibilityActors()
    }));
    return comlink_0.onStatus(setPreviewKitConnection), comlink_0.on("preview-kit/documents", (data_5) => {
      data_5.projectId === projectId && data_5.dataset === dataset && setDocumentsOnPage(
        "preview-kit",
        // oxlint-disable-next-line no-explicit-any
        data_5.perspective,
        data_5.documents
      );
    }), comlink_0.start();
  }, [controller, dataset, projectId, setDocumentsOnPage, setPreviewKitConnection, targetOrigin]);
  const handleFocusPath = useMemo(() => (
    // When moving from one field to another, blur and focus events will trigger
    // this handler. We debounce to avoid unwanted intermediate navigations this
    // would cause.
    debounce((state_1) => {
      isSameDocument(state_1) && navigate({
        state: state_1,
        replace: !0
      });
    }, 0)
  ), [isSameDocument, navigate]), handlePreviewPath = useCallback((nextPath) => {
    const url_0 = new URL(nextPath, targetOrigin), preview = url_0.toString();
    params.preview !== preview && (Array.isArray(allowOrigins) ? allowOrigins.some((pattern) => pattern.test(preview)) && navigate({
      params: {
        preview
      }
    }) : url_0.origin === targetOrigin && navigate({
      params: {
        preview
      }
    }));
  }, [targetOrigin, params.preview, allowOrigins, navigate]), handleStructureParams = useCallback((params_0) => {
    navigate({
      params: params_0
    });
  }, [navigate]), handleEditReference = useCallback((options_0) => {
    navigate(options_0);
  }, [navigate]);
  useEffect(() => {
    params.id && params.path ? visualEditingComlink?.post("presentation/focus", {
      id: params.id,
      path: params.path
    }) : visualEditingComlink?.post("presentation/blur");
  }, [params.id, params.path, visualEditingComlink]), useEffect(() => {
    if (frameStateRef.current.url && params.preview && frameStateRef.current.url !== params.preview) {
      try {
        const frameOrigin = new URL(frameStateRef.current.url, targetOrigin).origin, previewOrigin = new URL(params.preview, targetOrigin).origin;
        if (frameOrigin !== previewOrigin)
          return;
      } catch {
      }
      if (frameStateRef.current.url = params.preview, overlaysConnection === "connected") {
        let url_1 = params.preview;
        if (url_1.startsWith("http"))
          try {
            const newUrl = new URL(params.preview, targetOrigin);
            url_1 = newUrl.pathname + newUrl.search + newUrl.hash;
          } catch {
          }
        visualEditingComlink?.post("presentation/navigate", {
          url: url_1,
          type: "replace"
        });
      }
    }
  }, [overlaysConnection, targetOrigin, params.preview, visualEditingComlink]);
  const toggleOverlay = useCallback(() => visualEditingComlink?.post("presentation/toggle-overlay"), [visualEditingComlink]), [displayedDocument, setDisplayedDocument] = useState(null);
  useEffect(() => {
    const handleKeyUp = (e) => {
      isAltKey(e) && toggleOverlay();
    }, handleKeydown = (e_0) => {
      isAltKey(e_0) && toggleOverlay(), isHotkey(["mod", "\\"], e_0) && toggleOverlay();
    };
    return window.addEventListener("keydown", handleKeydown), window.addEventListener("keyup", handleKeyUp), () => {
      window.removeEventListener("keydown", handleKeydown), window.removeEventListener("keyup", handleKeyUp);
    };
  }, [toggleOverlay]);
  const [boundaryElement, setBoundaryElement] = useState(null), [{
    navigatorEnabled,
    toggleNavigator
  }, PresentationNavigator] = usePresentationNavigator({
    unstable_navigator
  }), refreshRef = useRef(void 0), handleRefresh = useCallback((fallback) => {
    if (presentationRef.send({
      type: "iframe refresh"
    }), visualEditingComlink) {
      refreshRef.current = window.setTimeout(fallback, 300), visualEditingComlink.post("presentation/refresh", {
        source: "manual",
        livePreviewEnabled: previewKitConnection === "connected" || loadersConnection === "connected"
      });
      return;
    }
    fallback();
  }, [loadersConnection, presentationRef, previewKitConnection, visualEditingComlink]), workspace = useWorkspace(), getCommentIntent = useCallback(({
    id,
    type,
    path
  }) => {
    if (frameStateRef.current.url)
      return {
        title: frameStateRef.current.title || frameStateRef.current.url,
        name: "edit",
        params: {
          id,
          path,
          type,
          inspect: COMMENTS_INSPECTOR_NAME,
          workspace: workspace.name,
          mode: EDIT_INTENT_MODE,
          preview: params.preview
        }
      };
  }, [params.preview, workspace.name]), setViewport = useCallback((next) => {
    navigate({
      params: {
        viewport: next === "desktop" ? void 0 : "mobile"
      },
      replace: !0
    });
  }, [navigate]);
  return /* @__PURE__ */ jsxs(Fragment, { children: [
    /* @__PURE__ */ jsx(PresentationProvider, { devMode, name, navigate, params, searchParams, structureParams, children: /* @__PURE__ */ jsx(PresentationNavigateProvider, { navigate, children: /* @__PURE__ */ jsx(PresentationParamsProvider, { params, children: /* @__PURE__ */ jsx(SharedStateProvider, { comlink: visualEditingComlink, children: /* @__PURE__ */ jsx(Container, { "data-testid": "presentation-root", height: "fill", children: /* @__PURE__ */ jsxs(Panels, { children: [
      /* @__PURE__ */ jsx(PresentationNavigator, {}),
      /* @__PURE__ */ jsx(Panel, { id: "preview", minWidth: 325, defaultSize: navigatorEnabled ? 50 : 75, order: 3, children: /* @__PURE__ */ jsx(Flex, { direction: "column", flex: 1, height: "fill", ref: setBoundaryElement, children: /* @__PURE__ */ jsx(BoundaryElementProvider, { element: boundaryElement, children: /* @__PURE__ */ jsx(
        Preview,
        {
          canSharePreviewAccess,
          canToggleSharePreviewAccess,
          canUseSharedPreviewAccess,
          header: unstable_header,
          initialUrl: initialPreviewUrl,
          loadersConnection,
          navigatorEnabled,
          onPathChange: handlePreviewPath,
          onRefresh: handleRefresh,
          openPopup: handleOpenPopup,
          overlaysConnection,
          previewUrl: params.preview,
          perspective,
          ref: iframeRef,
          setViewport,
          targetOrigin,
          toggleNavigator,
          toggleOverlay,
          viewport,
          vercelProtectionBypass,
          presentationRef,
          previewUrlRef
        },
        targetOrigin
      ) }) }) }),
      /* @__PURE__ */ jsx(PresentationContent, { documentId: params.id, documentsOnPage, documentType: params.type, getCommentIntent, mainDocumentState, onEditReference: handleEditReference, onFocusPath: handleFocusPath, onStructureParams: handleStructureParams, searchParams, setDisplayedDocument, structureParams })
    ] }) }) }) }) }) }),
    /* @__PURE__ */ jsxs(Suspense, { children: [
      controller && /* @__PURE__ */ jsx(LiveQueries, { controller, perspective, liveDocument: displayedDocument, onDocumentsOnPage: setDocumentsOnPage, onLoadersConnection: setLoadersConnection }),
      visualEditingComlink && params.id && params.type && /* @__PURE__ */ jsx(PostMessageRefreshMutations, { comlink: visualEditingComlink, id: params.id, type: params.type, loadersConnection, previewKitConnection }),
      visualEditingComlink && /* @__PURE__ */ jsx(PostMessageSchema, { comlink: visualEditingComlink, perspective }),
      visualEditingComlink && documentsOnPage.length > 0 && /* @__PURE__ */ jsx(PostMessagePreviewSnapshots, { comlink: visualEditingComlink, perspective, refs: documentsOnPage }),
      visualEditingComlink && /* @__PURE__ */ jsx(PostMessageDocuments, { comlink: visualEditingComlink, perspective }),
      visualEditingComlink && /* @__PURE__ */ jsx(PostMessageFeatures$1, { comlink: visualEditingComlink }),
      visualEditingComlink && /* @__PURE__ */ jsx(PostMessagePerspective, { comlink: visualEditingComlink, perspective }),
      visualEditingComlink && /* @__PURE__ */ jsx(PostMessageTelemetry, { comlink: visualEditingComlink })
    ] })
  ] });
}
function isAltKey(event) {
  return event.key === "Alt";
}
const IS_MAC = typeof window < "u" && /Mac|iPod|iPhone|iPad/.test(window.navigator.platform), MODIFIERS = {
  alt: "altKey",
  ctrl: "ctrlKey",
  mod: IS_MAC ? "metaKey" : "ctrlKey",
  shift: "shiftKey"
};
function isHotkey(keys, event) {
  return keys.every((key) => MODIFIERS[key] ? event[MODIFIERS[key]] : event.key === key.toUpperCase());
}
function defineCreatePreviewSecretActor({
  client,
  currentUserId
}) {
  return fromPromise(async () => await createPreviewSecret(client, "sanity/presentation", location.href, currentUserId));
}
function defineReadSharedSecretActor({
  client
}) {
  return fromPromise(async () => client.fetch(fetchSharedAccessQuery, {}, {
    tag: "presentation.fallback-to-shared-access-secret"
  }));
}
function defineResolveAllowPatternsActor({
  client,
  allowOption
}) {
  return fromPromise(async ({
    input
  }) => {
    const {
      initialUrl
    } = input;
    if (typeof URLPattern > "u" && await import("urlpattern-polyfill"), !allowOption)
      return [new URLPattern(initialUrl.origin)];
    const maybePatterns = typeof allowOption == "function" ? await allowOption({
      client,
      origin,
      initialUrl
    }) : allowOption, urlPatterns = (Array.isArray(maybePatterns) ? maybePatterns : [maybePatterns]).map((value) => {
      const urlPattern = new URLPattern(value);
      if (urlPattern.hostname === "*")
        throw new Error("It's insecure to allow any hostname, it could disclose data to a malicious site");
      return urlPattern;
    });
    return urlPatterns.some((pattern) => pattern.test(initialUrl.origin)) ? urlPatterns : [...urlPatterns, new URLPattern(initialUrl.origin)];
  });
}
function defineResolveInitialUrlActor({
  client,
  studioBasePath,
  previewUrlOption,
  perspective
}) {
  return fromPromise(async ({
    input
  }) => {
    const {
      origin: origin2
    } = location;
    if (typeof previewUrlOption == "function") {
      const initial = await previewUrlOption({
        client,
        studioBasePath,
        // @TODO handle checking permissions here, and then generating a secret
        previewUrlSecret: "",
        studioPreviewPerspective: encodeStudioPerspective(perspective),
        previewSearchParam: input.previewSearchParam
      });
      return new URL(initial, origin2);
    }
    if (!previewUrlOption)
      return new URL("/", origin2);
    if (typeof previewUrlOption == "string")
      return new URL(previewUrlOption, origin2);
    if (typeof previewUrlOption.initial == "function") {
      const initial = await previewUrlOption.initial({
        client,
        origin: origin2
      });
      return new URL(initial, origin2);
    }
    return typeof previewUrlOption.initial == "string" ? new URL(previewUrlOption.initial, origin2) : new URL(previewUrlOption.preview || "/", previewUrlOption.origin || origin2);
  });
}
function defineResolvePreviewModeActor({
  client,
  previewUrlOption
}) {
  return fromPromise(async ({
    input
  }) => {
    const {
      targetOrigin
    } = input;
    if (typeof previewUrlOption == "object" && previewUrlOption?.draftMode)
      return {
        enable: previewUrlOption.draftMode.enable,
        shareAccess: previewUrlOption.draftMode.shareAccess ?? !0
      };
    if (!previewUrlOption || typeof previewUrlOption == "string" || typeof previewUrlOption == "function" || !previewUrlOption.previewMode)
      return !1;
    const previewMode = typeof previewUrlOption.previewMode == "function" ? await previewUrlOption.previewMode({
      client,
      origin,
      targetOrigin
    }) : previewUrlOption.previewMode;
    return previewMode === !1 ? !1 : {
      enable: previewMode.enable,
      shareAccess: previewMode.shareAccess ?? !0
    };
  });
}
function defineResolvePreviewModeUrlActor({
  client,
  studioBasePath,
  previewUrlOption,
  perspective
}) {
  return fromPromise(async ({
    input
  }) => {
    const {
      previewUrlSecret,
      resolvedPreviewMode,
      initialUrl
    } = input;
    if (typeof previewUrlOption == "function") {
      const initial = await previewUrlOption({
        client,
        studioBasePath,
        previewUrlSecret,
        studioPreviewPerspective: encodeStudioPerspective(perspective),
        previewSearchParam: initialUrl.toString()
      });
      return new URL(initial, initialUrl);
    }
    if (!resolvedPreviewMode)
      throw new Error("Resolved preview mode is false");
    const url = new URL(resolvedPreviewMode.enable, initialUrl);
    return url.searchParams.set(urlSearchParamPreviewSecret, previewUrlSecret), url.searchParams.set(urlSearchParamPreviewPerspective, encodeStudioPerspective(perspective)), initialUrl.pathname !== url.pathname && url.searchParams.set(urlSearchParamPreviewPathname, `${initialUrl.pathname}${initialUrl.search}${initialUrl.hash}`), url;
  });
}
const resolveUrlFromPreviewSearchParamActor = fromPromise(async ({
  input
}) => {
  const {
    previewSearchParam,
    initialUrl,
    allowOrigins
  } = input;
  if (!previewSearchParam)
    return initialUrl;
  try {
    const previewSearchParamUrl = new URL(previewSearchParam, initialUrl.origin);
    return allowOrigins.some((pattern) => pattern.test(previewSearchParamUrl.origin)) ? previewSearchParamUrl : initialUrl;
  } catch {
    return initialUrl;
  }
}), shareAccessSingletonDocument = {
  _id: schemaIdSingleton,
  _type: schemaTypeSingleton
}, previewUrlSecretDocument = {
  _id: `drafts.${uuid()}`,
  _type: schemaType
}, previewUrlMachine = setup({
  types: {},
  actions: {
    "notify preview will likely fail": log("Missing permissions to create preview secret, or read shared preview secret. Preview will likely fail loading."),
    "assign preview search param": assign({
      previewSearchParam: (_, params) => params.previewSearchParam
    }),
    "assign error": assign({
      error: (_, params) => params.error instanceof Error ? params.error : new Error(params.message, {
        cause: params.error
      })
    })
  },
  actors: {
    "check permission": fromObservable(() => throwError(() => new Error("The 'check permission' actor is not implemented. Add it to previewUrlMachine.provide({actors: {'check permission': fromObservable(({input}: {input: CheckPermissionInput}) => ...)}})"))),
    "resolve initial url": fromPromise(() => Promise.reject(new Error("The 'resolve initial url' actor is not implemented. Add it to previewUrlMachine.provide({actors: {'resolve initial url': fromPromise(...)}})"))),
    "resolve allow patterns": fromPromise(() => Promise.reject(new Error("The 'resolve allow patterns' actor is not implemented. Add it to previewUrlMachine.provide({actors: {'resolve allow pattern': fromPromise(...)}})"))),
    "resolve url from preview search param": resolveUrlFromPreviewSearchParamActor,
    "resolve preview mode": fromPromise(() => Promise.reject(new Error("The 'resolve preview mode' actor is not implemented. Add it to previewUrlMachine.provide({actors: {'resolve preview mode': fromPromise(...)}})"))),
    "create preview secret": fromPromise(async () => Promise.reject(new Error("The 'create preview secret' actor is not implemented. Add it to previewUrlMachine.provide({actors: {'create preview secret': fromPromise(...)}})"))),
    "read shared preview secret": fromPromise(async () => Promise.reject(new Error("The 'read shared preview secret' actor is not implemented. Add it to previewUrlMachine.provide({actors: {'read shared preview secret': fromPromise(...)}})"))),
    "resolve preview mode url": fromPromise(() => Promise.reject(new Error("The 'resolve preview mode url' actor is not implemented. Add it to previewUrlMachine.provide({actors: {'resolve preview mode url': fromPromise(...)}})")))
  },
  guards: {
    "has checked permissions": ({
      context
    }) => !!(context.previewAccessSharingCreatePermission && context.previewAccessSharingReadPermission && context.previewAccessSharingUpdatePermission && context.previewUrlSecretPermission),
    "search param has new origin": ({
      context,
      event
    }) => {
      if (!context.previewUrl || !event.previewSearchParam)
        return !1;
      try {
        const previewSearchParamUrl = new URL(event.previewSearchParam, context.previewUrl);
        return context.previewUrl.origin !== previewSearchParamUrl.origin;
      } catch {
        return !1;
      }
    },
    "can create preview secret": ({
      context
    }) => context.previewUrlSecretPermission?.granted === !0,
    "has preview mode with created secret": ({
      context
    }, params) => params === !1 ? !1 : context.previewUrlSecretPermission?.granted === !0,
    "has preview mode with share access": ({
      context
    }, params) => params === !1 ? !1 : context.previewAccessSharingReadPermission?.granted === !0,
    "has preview mode without permissions": ({
      context
    }, params) => params === !1 ? !1 : context.previewAccessSharingReadPermission?.granted === !1 && context.previewUrlSecretPermission?.granted === !1
  },
  delays: {
    expiredSecret: ({
      context
    }) => {
      if (!context.previewUrlSecret?.expiresAt)
        return 0;
      const now = Date.now(), expiresAt = context.previewUrlSecret.expiresAt.getTime();
      return Math.max(expiresAt - now, 0);
    }
  }
}).createMachine({
  // eslint-disable-next-line tsdoc/syntax
  /** @xstate-layout N4IgpgJg5mDOIC5QAUBOYBuBLMB3ABAKoBKAMgMRiqoD2qAdAA4A2AhgC4BmdAtvWphwESpBFgB2GGgGMOWGuIDaABgC6K1YlCMasLO3nitIAB6IArAA56AZgCcAdkcBGS8vMAmO+YBszgDQgAJ6Izs4+9M7KACzKztGWHg4OPubmAL7pgQLYeERklNR0TGxcvPzoucJkYpIycgqKzupqxjp6BgrGZggAtM520ZHRdjZjNjFe7oEhCGERUbHxicmpGVkgOUL5FFS0DCwc3Kh8W3kitVKynUoeLZpIIO36ht2IvV62Hl7elmE2lh83xmoXCkRicQSSRS5gSmWylW2IkK+xKR3KZ2qogkVwaShs9zauheXUePV6gPo3jSUyi-xBczBi0hKxh5mc8M2iPOBVgYHY+EY3IIfNYqGkAAtBWLWDwNESOq8yaCbM56A4bB5fGllHYvD4fAz4h56CNfG5LKqHMpLdFOZidvRJWBpABrCRQZBUHhYWB6BSwcjyx7PG5vPrs5TqjWqyyjTXRDwMjwxei68J2ZQ2nyWXN2jYOkT0dCwGjMbDiKAASXEL1YzEIqGY5AgCjA9BxNFd7cLZGLcDLFertYM9cbzEu9RuGmD2mJYeVfRGdipyh86Yc0XiE3MDK3JssIwcrmtPjGSXzCMEPNI-dL5Y9NbrDabKOKhzKJwq16xd8Hj5HLAxybSdrkMGdWhDeclVAclN3odlzBsKwBjSSxjwcZM7DVeJ1w8P4xmidk7HtYVHRLf9KwAQWYZgaFwZAOHYKhxEDVtxHbTtu2-KpyIHB9qNo+jGPYZjUFY0C8Qgh450VUlYPedkHHoHwnDSZDVOiGwfGiBlUhXXwwjsQYtKSYzSJ-Pj7yHGi6IYpiWMDPZ31KY5TjIosKIEqBbOEhzxNgSTpzUWcnmg+TTHePV6Hw3MYgzaItJ0hlYRNTNkLiHxBl1GILN4zz+KHccADFaB4TEAGUwDFSVGNQWUWzbDs6m43tby8oqm1KmhyuFKqaolOrZSC8CQsg2SSSMRdel8ZSNUTdlcw8M07AZQZrDXdaDRtUZnHWK98r7DqPRKsrKuq8VBplHg3wOVyMQ8o7CpOrqzr6i7auukbGjGmSwrkqaFL6MJlLiWFlC1EGty0hknAiXVVPMRx12UJwOQLR72ueytMQAWRoCAwEajjmqkVrMb-by8YJsBvqUX6FUm8Nem2+hbWPUZErGTcjS8NUJg8AE9T1ZwHHwvKkSe6yPWpwnic4lqewp46ceFfHCbpmdmkZhcgZmyxzFsDmTPcXUUiNRKDy3ZQJlVLSkYlm9KaHWWifYhWyaVyyCul1Wf3V2nOzAn71DuHWYMivovGsBxPCy74beWaJDWCUJzBSFTrUcQYdMzIFHd-FXPTVmn5dJrsvcOrHfeL-2ac1kKCXDiLyWcNKJiiHM-BtONwgtnMEM1DVNwhhI7B8AurMo2uqgD260U-dzval6fXYbwkoIB5moijLLkm5tvYRBo1nGQtND11ZaIdzEiMeX6vV5LuW+QFIVLNFS7pXquVxv+pnF1FtYP4OY7AG3QohJMqcEDeGUq4NwYQBhLEnkWWAABXaQ0g4CBhfoKMiH9JRf1lKFUMEceiizVPA0+7gtQQy8LzXU6obaJTFtEJwHhXDIL7G-WepccHcO2PgqUjBrrEPCoDSOFI3C2AGHtQ8sIiJJGTILZS7JRaeGSKw7CnDbz8LwAHJ06AOBgHOtIdA7Ay5cUrpLHRT92ymOqsxExZj16iK3gAqI6oaQ6QtE4YylhkynzmkCBGNgNR7VvgdaxTBbEGIccY969jzHOTuuiL8bVol10JrEoxTj+QuN-iQlu7xwjKX1P8bSTC0hGhcKaBIOZAQGkBKE7RGSeFZMMRACqEoxRgCohgrBFjFY8Sibo3A+iOldJ6X0zBfp8l-UKeIshjgqTGTiPYPaGotS7igd8QWtgsp6iQnFOEd8q6tKEOM6qnTunoGmQM5JC83LDKdqMy5rBrlTP6bMoOUkGab3-kDU+ERVEpnsEjDRVSdljBXKeQY3h5gOBaa8mmzt4k-nHIMz2zzfzIvaYVNFVRxxzObosxAfg1Q2jSOERIh5kIBNGKaNZ2lvjhFhEimJHUCVCAxQ8j8Tz0m4vbJyzERKfnBQ3hNXWkdyWeJsCMVhqNsK6mTO4Q2Q9DysLCEhDw7LMntjQV8wMJhYDsCMfQVgnAxIAAowAmEYFgdAnSXRmIAJTkAFTEg1MzYCuIBZHKYKlUiqWwrCMJkDZgDAYceRMfwUisPYZYTIGxxA03gI8NqJLmZ6msKqENcjErqIZL0cethvDGXLew9hiYWnOjdDLb0vp-SsUzdNcwEMEJ7WTohDMfgU4RpTCpUJnhYrHghuEFpRcnyjhfMwFtet2Q2FNOwsWZarBan8TsuMkRvhIzPJGDwmkWnJLnf6g0aZl0mQTURDdsxYiGwwsRIEgwEwTuxj5IS9lRKORPeSJCOF4XgrUZqbZsxwZszcJtbC4RUg2FfTXU6PVzoDSGjwH9ik-gxRGG4NtxkkZblhgyxIhFQG5lSPEODj89VoYjKqGKURkij0zImXSUCwiozZuDLUCQQY6tOVEr1WDqMsxNCkP4RFPBZj+I4I0qoRMODjIlceBzkK6raWAIT7DDZlNPhUuVkKI0pEXbHBISF1yAiIqpi5KL7E5ISWYoTna2b6Qg+DcFN7EAphLdpdOWVoPJ0RXxl5HKrmTNuYahzaQviaQPVERa8mlGeBUnnQyDStSwcCzi4L1kuV4HHNR4DCFdRaVVFSzcZ4VVIVsDEVhZ5QnWlYZZvRKLj3-KlT0FIKjVRZghkCXwqkjQGzVFxvOMisoWYy46QV9ABN+mo3mFZZ427lp032jzVa2bJGtCUtciak1AA */
  id: "Preview URL",
  context: ({
    input
  }) => ({
    initialUrl: null,
    previewUrl: null,
    error: null,
    allowOrigins: null,
    previewSearchParam: input.previewSearchParam,
    previewUrlSecret: null,
    previewAccessSharingCreatePermission: null,
    previewAccessSharingReadPermission: null,
    previewAccessSharingUpdatePermission: null,
    previewUrlSecretPermission: null,
    previewMode: null
  }),
  invoke: [{
    src: "check permission",
    input: () => ({
      checkPermissionName: "read",
      document: shareAccessSingletonDocument
    }),
    onError: {
      target: ".error",
      actions: {
        type: "assign error",
        params: ({
          event
        }) => ({
          message: "Failed to check permission",
          error: event.error
        })
      }
    },
    onSnapshot: {
      actions: assign({
        previewAccessSharingReadPermission: ({
          event
        }) => event.snapshot.context ?? null
      })
    }
  }, {
    src: "check permission",
    input: () => ({
      checkPermissionName: "create",
      document: shareAccessSingletonDocument
    }),
    onError: {
      target: ".error",
      actions: {
        type: "assign error",
        params: ({
          event
        }) => ({
          message: "Failed to check permission",
          error: event.error
        })
      }
    },
    onSnapshot: {
      actions: assign({
        previewAccessSharingCreatePermission: ({
          event
        }) => event.snapshot.context ?? null
      })
    }
  }, {
    src: "check permission",
    input: () => ({
      checkPermissionName: "update",
      document: shareAccessSingletonDocument
    }),
    onError: {
      target: ".error",
      actions: {
        type: "assign error",
        params: ({
          event
        }) => ({
          message: "Failed to check permission",
          error: event.error
        })
      }
    },
    onSnapshot: {
      actions: assign({
        previewAccessSharingUpdatePermission: ({
          event
        }) => event.snapshot.context ?? null
      })
    }
  }, {
    src: "check permission",
    input: () => ({
      checkPermissionName: "create",
      document: previewUrlSecretDocument
    }),
    onError: {
      target: ".error",
      actions: {
        type: "assign error",
        params: ({
          event
        }) => ({
          message: "Failed to check permission",
          error: event.error
        })
      }
    },
    onSnapshot: {
      actions: assign({
        previewUrlSecretPermission: ({
          event
        }) => event.snapshot.context ?? null
      })
    }
  }],
  on: {
    "set preview search param": {
      actions: {
        type: "assign preview search param",
        params: ({
          event
        }) => ({
          previewSearchParam: event.previewSearchParam
        })
      }
    }
  },
  states: {
    checkingPermissions: {
      always: {
        guard: "has checked permissions",
        target: "resolvingInitialUrl"
      },
      tags: "busy"
    },
    resolvingInitialUrl: {
      invoke: {
        src: "resolve initial url",
        input: ({
          context
        }) => ({
          previewSearchParam: context.previewSearchParam
        }),
        onError: {
          target: "error",
          actions: {
            type: "assign error",
            params: ({
              event
            }) => ({
              message: "Failed to resolve initial url",
              error: event.error
            })
          }
        },
        onDone: {
          target: "resolvingAllowPatterns",
          actions: assign({
            initialUrl: ({
              event
            }) => event.output
          })
        }
      },
      tags: "busy"
    },
    error: {
      type: "final",
      tags: "error"
    },
    resolvingAllowPatterns: {
      invoke: {
        src: "resolve allow patterns",
        input: ({
          context
        }) => ({
          initialUrl: context.initialUrl
        }),
        onError: {
          target: "error",
          actions: {
            type: "assign error",
            params: ({
              event
            }) => ({
              message: "Failed to resolve preview url allow patterns",
              error: event.error
            })
          }
        },
        onDone: {
          target: "resolvingUrlFromPreviewSearchParam",
          actions: assign({
            allowOrigins: ({
              event
            }) => event.output
          })
        }
      },
      tags: ["busy"]
    },
    resolvingUrlFromPreviewSearchParam: {
      id: "loop",
      invoke: {
        src: "resolve url from preview search param",
        input: ({
          context
        }) => ({
          initialUrl: context.initialUrl,
          allowOrigins: context.allowOrigins,
          previewSearchParam: context.previewSearchParam
        }),
        onError: {
          target: "error",
          actions: {
            type: "assign error",
            params: ({
              event
            }) => ({
              message: "Failed to resolve preview url from search param",
              error: event.error
            })
          }
        },
        onDone: {
          target: "resolvingPreviewMode",
          actions: assign({
            initialUrl: ({
              event
            }) => event.output
          })
        }
      },
      tags: ["busy"]
    },
    resolvingPreviewMode: {
      on: {
        "set preview search param": {
          guard: "search param has new origin",
          actions: {
            type: "assign preview search param",
            params: ({
              event
            }) => ({
              previewSearchParam: event.previewSearchParam
            })
          },
          target: "#loop",
          reenter: !0
        }
      },
      invoke: {
        src: "resolve preview mode",
        input: ({
          context
        }) => ({
          targetOrigin: context.initialUrl.origin
        }),
        onError: {
          target: "error",
          actions: {
            type: "assign error",
            params: ({
              event
            }) => ({
              message: "Failed to resolve preview url allow patterns",
              error: event.error
            })
          }
        },
        onDone: [{
          guard: {
            type: "has preview mode with created secret",
            params: ({
              event
            }) => event.output
          },
          actions: assign({
            previewMode: ({
              event
            }) => event.output
          }),
          target: "previewMode.createPreviewSecret"
        }, {
          guard: {
            type: "has preview mode with share access",
            params: ({
              event
            }) => event.output
          },
          actions: assign({
            previewMode: ({
              event
            }) => event.output
          }),
          target: "previewMode.readShareAccess"
        }, {
          guard: {
            type: "has preview mode without permissions",
            params: ({
              event
            }) => event.output
          },
          actions: [assign({
            previewUrl: ({
              context
            }) => context.initialUrl
          }), "notify preview will likely fail"],
          target: "success"
        }, {
          actions: assign({
            previewUrl: ({
              context
            }) => context.initialUrl
          }),
          target: "success"
        }]
      },
      tags: ["busy"]
    },
    success: {
      on: {
        "set preview search param": {
          guard: "search param has new origin",
          actions: {
            type: "assign preview search param",
            params: ({
              event
            }) => ({
              previewSearchParam: event.previewSearchParam
            })
          },
          target: "#loop",
          reenter: !0
        }
      }
    },
    previewMode: {
      on: {
        "set preview search param": {
          guard: "search param has new origin",
          actions: {
            type: "assign preview search param",
            params: ({
              event
            }) => ({
              previewSearchParam: event.previewSearchParam
            })
          },
          target: "#loop",
          reenter: !0
        }
      },
      states: {
        createPreviewSecret: {
          invoke: {
            src: "create preview secret",
            onError: {
              target: "error",
              actions: {
                type: "assign error",
                params: ({
                  event
                }) => ({
                  message: "Failed to create preview secret",
                  error: event.error
                })
              }
            },
            onDone: {
              target: "resolvePreviewUrl",
              actions: assign({
                previewUrlSecret: ({
                  event
                }) => event.output
              })
            }
          },
          tags: ["busy"]
        },
        readShareAccess: {
          invoke: {
            src: "read shared preview secret",
            onError: {
              target: "error",
              actions: {
                type: "assign error",
                params: ({
                  event
                }) => ({
                  message: "Failed to read shared preview secret",
                  error: event.error
                })
              }
            },
            onDone: {
              target: "resolvePreviewUrl",
              actions: assign({
                previewUrlSecret: ({
                  event
                }) => ({
                  secret: event.output,
                  expiresAt: new Date(Date.now() + 1e3 * 60 * 60 * 60 * 24)
                })
              })
            }
          },
          tags: ["busy"]
        },
        resolvePreviewUrl: {
          invoke: {
            src: "resolve preview mode url",
            input: ({
              context
            }) => ({
              initialUrl: context.initialUrl,
              resolvedPreviewMode: context.previewMode,
              previewUrlSecret: context.previewUrlSecret.secret
            }),
            onError: {
              target: "error",
              actions: {
                type: "assign error",
                params: ({
                  event
                }) => ({
                  message: "Failed to resolve preview url",
                  error: event.error
                })
              }
            },
            onDone: {
              target: "success",
              actions: assign({
                previewUrl: ({
                  event
                }) => event.output
              })
            }
          },
          tags: ["busy"]
        },
        error: {
          type: "final",
          tags: ["error"]
        },
        success: {
          after: {
            expiredSecret: {
              guard: "can create preview secret",
              actions: assign({
                previewUrlSecret: null
              }),
              target: "createPreviewSecret",
              reenter: !0
            }
          }
        }
      },
      initial: "readShareAccess"
    }
  },
  initial: "checkingPermissions"
});
function usePreviewUrlActorRef(previewUrlOption, allowOption) {
  const $ = c(24), grantsStore = useGrantsStore();
  let t0;
  $[0] === Symbol.for("react.memo_cache_sentinel") ? (t0 = {
    apiVersion: API_VERSION
  }, $[0] = t0) : t0 = $[0];
  const client = useClient(t0), currentUserId = useCurrentUser()?.id, studioBasePath = useActiveWorkspace()?.activeWorkspace?.basePath || "/", router = useRouter();
  let t1;
  $[1] !== router.state._searchParams ? (t1 = new URLSearchParams(router.state._searchParams).get("preview"), $[1] = router.state._searchParams, $[2] = t1) : t1 = $[2];
  const previewSearchParam = t1, {
    push: pushToast
  } = useToast(), {
    t
  } = useTranslation(presentationLocaleNamespace), perspective = usePresentationPerspective();
  let t2;
  if ($[3] !== allowOption || $[4] !== client || $[5] !== currentUserId || $[6] !== grantsStore || $[7] !== perspective || $[8] !== previewUrlOption || $[9] !== pushToast || $[10] !== studioBasePath || $[11] !== t) {
    let t32;
    $[13] !== pushToast || $[14] !== t ? (t32 = () => pushToast({
      id: "preview-url-secret.missing-grants",
      closable: !0,
      status: "error",
      duration: 1 / 0,
      title: t("preview-url-secret.missing-grants")
    }), $[13] = pushToast, $[14] = t, $[15] = t32) : t32 = $[15];
    let t42;
    $[16] !== grantsStore ? (t42 = (t52) => {
      const {
        input
      } = t52;
      return grantsStore.checkDocumentPermission(input.checkPermissionName, input.document);
    }, $[16] = grantsStore, $[17] = t42) : t42 = $[17], t2 = previewUrlMachine.provide({
      actions: {
        "notify preview will likely fail": t32
      },
      actors: {
        "create preview secret": defineCreatePreviewSecretActor({
          client,
          currentUserId
        }),
        "read shared preview secret": defineReadSharedSecretActor({
          client
        }),
        "resolve allow patterns": defineResolveAllowPatternsActor({
          client,
          allowOption
        }),
        "resolve initial url": defineResolveInitialUrlActor({
          client,
          studioBasePath,
          previewUrlOption,
          perspective
        }),
        "resolve preview mode": defineResolvePreviewModeActor({
          client,
          previewUrlOption
        }),
        "resolve preview mode url": defineResolvePreviewModeUrlActor({
          client,
          studioBasePath,
          previewUrlOption,
          perspective
        }),
        "check permission": fromObservable(t42)
      }
    }), $[3] = allowOption, $[4] = client, $[5] = currentUserId, $[6] = grantsStore, $[7] = perspective, $[8] = previewUrlOption, $[9] = pushToast, $[10] = studioBasePath, $[11] = t, $[12] = t2;
  } else
    t2 = $[12];
  let t3;
  $[18] !== previewSearchParam ? (t3 = {
    input: {
      previewSearchParam
    }
  }, $[18] = previewSearchParam, $[19] = t3) : t3 = $[19];
  const actorRef = useActorRef(t2, t3);
  let t4, t5;
  $[20] !== actorRef || $[21] !== previewSearchParam ? (t4 = () => {
    actorRef.send({
      type: "set preview search param",
      previewSearchParam
    });
  }, t5 = [actorRef, previewSearchParam], $[20] = actorRef, $[21] = previewSearchParam, $[22] = t4, $[23] = t5) : (t4 = $[22], t5 = $[23]), useEffect(t4, t5);
  const error = useSelector(actorRef, _temp$3);
  if (error)
    throw error;
  return actorRef;
}
function _temp$3(state) {
  return state.status === "error" ? state.error : state.hasTag("error") ? state.context.error : null;
}
function useReportInvalidPreviewSearchParam(previewUrlRef) {
  const $ = c(9), {
    t
  } = useTranslation(presentationLocaleNamespace), {
    push: pushToast
  } = useToast(), router = useRouter();
  let t0;
  $[0] !== router.state._searchParams ? (t0 = new URLSearchParams(router.state._searchParams).get("preview"), $[0] = router.state._searchParams, $[1] = t0) : t0 = $[1];
  const previewSearchParam = t0, allowOrigins = useSelector(previewUrlRef, _temp$2), currentOrigin = useSelector(previewUrlRef, _temp2$1);
  let t1, t2;
  $[2] !== allowOrigins || $[3] !== currentOrigin || $[4] !== previewSearchParam || $[5] !== pushToast || $[6] !== t ? (t1 = () => {
    if (!Array.isArray(allowOrigins) || !previewSearchParam || !currentOrigin)
      return;
    const nextOrigin = new URL(previewSearchParam, currentOrigin).origin;
    allowOrigins.some((pattern) => pattern.test(nextOrigin)) || pushToast({
      closable: !0,
      id: `presentation-iframe-origin-mismatch-${nextOrigin}`,
      status: "error",
      duration: 1 / 0,
      title: t("preview-search-param.configuration.error.title"),
      description: /* @__PURE__ */ jsx(Translate, { t, i18nKey: "preview-search-param.configuration.error.description", components: {
        Code: "code"
      }, values: {
        previewSearchParam,
        blockedOrigin: nextOrigin
      } })
    });
  }, t2 = [allowOrigins, currentOrigin, previewSearchParam, pushToast, t], $[2] = allowOrigins, $[3] = currentOrigin, $[4] = previewSearchParam, $[5] = pushToast, $[6] = t, $[7] = t1, $[8] = t2) : (t1 = $[7], t2 = $[8]), useEffect(t1, t2);
}
function _temp2$1(state_0) {
  return state_0.context.previewUrl?.origin;
}
function _temp$2(state) {
  return state.context.allowOrigins;
}
function useVercelBypassSecret() {
  const $ = c(7);
  let t0;
  $[0] === Symbol.for("react.memo_cache_sentinel") ? (t0 = {
    apiVersion: API_VERSION
  }, $[0] = t0) : t0 = $[0];
  const client = useClient(t0), [vercelProtectionBypassReadyState, ready] = useReducer(_temp$1, "loading"), [vercelProtectionBypassSecret, setVercelProtectionBypassSecret] = useState(null);
  let t1, t2;
  $[1] !== client ? (t1 = () => {
    const unsubscribe = subcribeToVercelProtectionBypass(client, (secret) => {
      setVercelProtectionBypassSecret(secret), ready();
    });
    return () => unsubscribe();
  }, t2 = [client], $[1] = client, $[2] = t1, $[3] = t2) : (t1 = $[2], t2 = $[3]), useEffect(t1, t2);
  let t3;
  return $[4] !== vercelProtectionBypassReadyState || $[5] !== vercelProtectionBypassSecret ? (t3 = [vercelProtectionBypassSecret, vercelProtectionBypassReadyState], $[4] = vercelProtectionBypassReadyState, $[5] = vercelProtectionBypassSecret, $[6] = t3) : t3 = $[6], t3;
}
function _temp$1() {
  return "ready";
}
function PresentationToolGrantsCheck(t0) {
  const $ = c(8), {
    tool
  } = t0, previewUrlRef = usePreviewUrlActorRef(tool.options?.previewUrl, tool.options?.allowOrigins);
  useReportInvalidPreviewSearchParam(previewUrlRef);
  const previewAccessSharingCreatePermission = useSelector(previewUrlRef, _temp), previewAccessSharingUpdatePermission = useSelector(previewUrlRef, _temp2), previewAccessSharingReadPermission = useSelector(previewUrlRef, _temp3), previewUrlSecretPermission = useSelector(previewUrlRef, _temp4), url = useSelector(previewUrlRef, _temp5), [vercelProtectionBypass, vercelProtectionBypassReadyState] = useVercelBypassSecret();
  if (!url || vercelProtectionBypassReadyState === "loading" || !previewAccessSharingCreatePermission || typeof previewAccessSharingCreatePermission.granted > "u" || !previewAccessSharingUpdatePermission || typeof previewAccessSharingUpdatePermission.granted > "u" || !previewUrlSecretPermission || !previewAccessSharingReadPermission || typeof previewAccessSharingReadPermission.granted > "u" || typeof previewUrlSecretPermission.granted > "u") {
    let t12;
    return $[0] === Symbol.for("react.memo_cache_sentinel") ? (t12 = /* @__PURE__ */ jsx(PresentationSpinner, {}), $[0] = t12) : t12 = $[0], t12;
  }
  const t1 = previewAccessSharingCreatePermission?.granted === !0 && previewAccessSharingUpdatePermission?.granted === !0, t2 = previewAccessSharingReadPermission?.granted === !0;
  let t3;
  return $[1] !== previewUrlRef || $[2] !== t1 || $[3] !== t2 || $[4] !== tool || $[5] !== url || $[6] !== vercelProtectionBypass ? (t3 = /* @__PURE__ */ jsx(PresentationTool, { tool, initialPreviewUrl: url, vercelProtectionBypass, canToggleSharePreviewAccess: t1, canUseSharedPreviewAccess: t2, previewUrlRef }), $[1] = previewUrlRef, $[2] = t1, $[3] = t2, $[4] = tool, $[5] = url, $[6] = vercelProtectionBypass, $[7] = t3) : t3 = $[7], t3;
}
function _temp5(state_3) {
  return state_3.context.previewUrl;
}
function _temp4(state_2) {
  return state_2.context.previewUrlSecretPermission;
}
function _temp3(state_1) {
  return state_1.context.previewAccessSharingReadPermission;
}
function _temp2(state_0) {
  return state_0.context.previewAccessSharingUpdatePermission;
}
function _temp(state) {
  return state.context.previewAccessSharingCreatePermission;
}
export {
  PresentationToolGrantsCheck as default
};
//# sourceMappingURL=PresentationToolGrantsCheck.mjs.map
