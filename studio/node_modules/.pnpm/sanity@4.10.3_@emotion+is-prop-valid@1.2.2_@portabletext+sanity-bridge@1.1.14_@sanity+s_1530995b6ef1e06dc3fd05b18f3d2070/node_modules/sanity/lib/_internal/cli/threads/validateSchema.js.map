{"version":3,"file":"validateSchema.js","sources":["../../../../src/_internal/cli/threads/validateSchema.ts"],"sourcesContent":["import {isMainThread, parentPort, workerData as _workerData} from 'node:worker_threads'\n\nimport {groupProblems, validateSchema} from '@sanity/schema/_internal'\nimport {type SchemaValidationProblem, type SchemaValidationProblemGroup} from '@sanity/types'\nimport {resolveSchemaTypes} from 'sanity'\n\nimport {getStudioConfig} from '../util/getStudioWorkspaces'\nimport {mockBrowserEnvironment} from '../util/mockBrowserEnvironment'\n\n/** @internal */\nexport interface ValidateSchemaWorkerData {\n  workDir: string\n  workspace?: string\n  level?: SchemaValidationProblem['severity']\n}\n\n/** @internal */\nexport interface ValidateSchemaWorkerResult {\n  validation: SchemaValidationProblemGroup[]\n}\n\nconst {\n  workDir,\n  workspace: workspaceName,\n  level = 'warning',\n} = _workerData as ValidateSchemaWorkerData\n\nasync function main() {\n  if (isMainThread || !parentPort) {\n    throw new Error('This module must be run as a worker thread')\n  }\n\n  const cleanup = mockBrowserEnvironment(workDir)\n\n  try {\n    const workspaces = getStudioConfig({basePath: workDir})\n\n    if (!workspaces.length) {\n      throw new Error(`Configuration did not return any workspaces.`)\n    }\n\n    let workspace\n    if (workspaceName) {\n      workspace = workspaces.find((w) => w.name === workspaceName)\n      if (!workspace) {\n        throw new Error(`Could not find any workspaces with name \\`${workspaceName}\\``)\n      }\n    } else {\n      if (workspaces.length !== 1) {\n        throw new Error(\n          \"Multiple workspaces found. Please specify which workspace to use with '--workspace'.\",\n        )\n      }\n      workspace = workspaces[0]\n    }\n\n    const schemaTypes = resolveSchemaTypes({\n      config: workspace,\n      context: {dataset: workspace.dataset, projectId: workspace.projectId},\n    })\n\n    const validation = groupProblems(validateSchema(schemaTypes).getTypes())\n\n    const result: ValidateSchemaWorkerResult = {\n      validation: validation\n        .map((group) => ({\n          ...group,\n          problems: group.problems.filter((problem) =>\n            level === 'error' ? problem.severity === 'error' : true,\n          ),\n        }))\n        .filter((group) => group.problems.length),\n    }\n\n    parentPort?.postMessage(result)\n  } finally {\n    cleanup()\n  }\n}\n\nmain().then(() => process.exit())\n"],"names":["workDir","workspace","workspaceName","level","_workerData","main","isMainThread","parentPort","Error","cleanup","mockBrowserEnvironment","workspaces","getStudioConfig","basePath","length","find","w","name","schemaTypes","resolveSchemaTypes","config","context","dataset","projectId","result","validation","groupProblems","validateSchema","getTypes","map","group","problems","filter","problem","severity","postMessage","then","process","exit"],"mappings":";;AAqBA,MAAM;AAAA,EACJA;AAAAA,EACAC,WAAWC;AAAAA,EACXC,QAAQ;AACV,IAAIC,oBAAAA;AAEJ,eAAeC,OAAO;AACpB,MAAIC,oBAAAA,gBAAgB,CAACC,oBAAAA;AACnB,UAAM,IAAIC,MAAM,4CAA4C;AAG9D,QAAMC,UAAUC,uBAAAA,uBAAuBV,OAAO;AAE9C,MAAI;AACF,UAAMW,aAAaC,oBAAAA,gBAAgB;AAAA,MAACC,UAAUb;AAAAA,IAAAA,CAAQ;AAEtD,QAAI,CAACW,WAAWG;AACd,YAAM,IAAIN,MAAM,8CAA8C;AAGhE,QAAIP;AACJ,QAAIC;AAEF,UADAD,YAAYU,WAAWI,KAAMC,CAAAA,MAAMA,EAAEC,SAASf,aAAa,GACvD,CAACD;AACH,cAAM,IAAIO,MAAM,6CAA6CN,aAAa,IAAI;AAAA,WAE3E;AACL,UAAIS,WAAWG,WAAW;AACxB,cAAM,IAAIN,MACR,sFACF;AAEFP,kBAAYU,WAAW,CAAC;AAAA,IAC1B;AAEA,UAAMO,cAAcC,OAAAA,mBAAmB;AAAA,MACrCC,QAAQnB;AAAAA,MACRoB,SAAS;AAAA,QAACC,SAASrB,UAAUqB;AAAAA,QAASC,WAAWtB,UAAUsB;AAAAA,MAAAA;AAAAA,IAAS,CACrE,GAIKC,SAAqC;AAAA,MACzCC,YAHiBC,UAAAA,cAAcC,UAAAA,eAAeT,WAAW,EAAEU,UAAU,EAIlEC,IAAKC,CAAAA,WAAW;AAAA,QACf,GAAGA;AAAAA,QACHC,UAAUD,MAAMC,SAASC,OAAQC,CAAAA,YAC/B9B,UAAU,UAAU8B,QAAQC,aAAa,UAAU,EACrD;AAAA,MAAA,EACA,EACDF,OAAQF,CAAAA,UAAUA,MAAMC,SAASjB,MAAM;AAAA,IAAA;AAG5CP,wBAAAA,YAAY4B,YAAYX,MAAM;AAAA,EAChC,UAAA;AACEf,YAAAA;AAAAA,EACF;AACF;AAEAJ,KAAAA,EAAO+B,KAAK,MAAMC,QAAQC,MAAM;"}